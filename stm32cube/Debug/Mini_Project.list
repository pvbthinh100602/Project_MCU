
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005650  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c4  080057c4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080057c4  080057c4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057c4  080057c4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080057cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000098  08005864  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08005864  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e8a  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a8  00000000  00000000  00037f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0003aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0003be20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8c  00000000  00000000  0003cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001345b  00000000  00000000  00056894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3aa  00000000  00000000  00069cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000f50ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08005744 	.word	0x08005744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08005744 	.word	0x08005744

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <isButtonPressed+0x30>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <isButtonPressed+0x30>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2100      	movs	r1, #0
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <isButtonPressed+0x24>
	}
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000104 	.word	0x20000104

0800096c <button_process>:

void button_process(int index){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db07      	blt.n	800098a <button_process+0x1e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b03      	cmp	r3, #3
 800097e:	dc04      	bgt.n	800098a <button_process+0x1e>
		button_flag[index] = 1;
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <button_process+0x28>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000104 	.word	0x20000104

08000998 <button_reading>:

void button_reading(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e0e5      	b.n	8000b70 <button_reading+0x1d8>
        //debouncing button
		debounce_buffer3[i] = debounce_buffer2[i];
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4976      	ldr	r1, [pc, #472]	; (8000b84 <button_reading+0x1ec>)
 80009aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ae:	4976      	ldr	r1, [pc, #472]	; (8000b88 <button_reading+0x1f0>)
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4974      	ldr	r1, [pc, #464]	; (8000b8c <button_reading+0x1f4>)
 80009ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009be:	4971      	ldr	r1, [pc, #452]	; (8000b84 <button_reading+0x1ec>)
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// readpin
		//...

		if(i == 0) debounce_buffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10b      	bne.n	80009e2 <button_reading+0x4a>
 80009ca:	2101      	movs	r1, #1
 80009cc:	4870      	ldr	r0, [pc, #448]	; (8000b90 <button_reading+0x1f8>)
 80009ce:	f002 fa4d 	bl	8002e6c <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4611      	mov	r1, r2
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <button_reading+0x1f4>)
 80009dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009e0:	e02b      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 1) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <button_reading+0x68>
 80009e8:	2102      	movs	r1, #2
 80009ea:	4869      	ldr	r0, [pc, #420]	; (8000b90 <button_reading+0x1f8>)
 80009ec:	f002 fa3e 	bl	8002e6c <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a64      	ldr	r2, [pc, #400]	; (8000b8c <button_reading+0x1f4>)
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fe:	e01c      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 2) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d10b      	bne.n	8000a1e <button_reading+0x86>
 8000a06:	2110      	movs	r1, #16
 8000a08:	4861      	ldr	r0, [pc, #388]	; (8000b90 <button_reading+0x1f8>)
 8000a0a:	f002 fa2f 	bl	8002e6c <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <button_reading+0x1f4>)
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1c:	e00d      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 3) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d10a      	bne.n	8000a3a <button_reading+0xa2>
 8000a24:	2101      	movs	r1, #1
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <button_reading+0x1fc>)
 8000a28:	f002 fa20 	bl	8002e6c <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <button_reading+0x1f4>)
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


        //process after debouncing
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <button_reading+0x1f0>)
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	494f      	ldr	r1, [pc, #316]	; (8000b84 <button_reading+0x1ec>)
 8000a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f040 8084 	bne.w	8000b58 <button_reading+0x1c0>
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <button_reading+0x1ec>)
 8000a54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	494c      	ldr	r1, [pc, #304]	; (8000b8c <button_reading+0x1f4>)
 8000a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d179      	bne.n	8000b58 <button_reading+0x1c0>
			button_buffer[i] = debounce_buffer3[i];
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4947      	ldr	r1, [pc, #284]	; (8000b88 <button_reading+0x1f0>)
 8000a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a6e:	494a      	ldr	r1, [pc, #296]	; (8000b98 <button_reading+0x200>)
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// fsm for processing button
			switch(button_state[i]){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <button_reading+0x204>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	2b0d      	cmp	r3, #13
 8000a7e:	d043      	beq.n	8000b08 <button_reading+0x170>
 8000a80:	2b0d      	cmp	r3, #13
 8000a82:	dc6b      	bgt.n	8000b5c <button_reading+0x1c4>
 8000a84:	2b0b      	cmp	r3, #11
 8000a86:	d002      	beq.n	8000a8e <button_reading+0xf6>
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d02d      	beq.n	8000ae8 <button_reading+0x150>
					button_state[i] = BUTTON_IS_RELEASED;
					counter_for_button_pressed[i] = 0;
				}
				break;
			default:
				break;
 8000a8c:	e066      	b.n	8000b5c <button_reading+0x1c4>
				counter_for_button_pressed[i]++;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a43      	ldr	r2, [pc, #268]	; (8000ba0 <button_reading+0x208>)
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	3201      	adds	r2, #1
 8000a98:	4941      	ldr	r1, [pc, #260]	; (8000ba0 <button_reading+0x208>)
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == WAITING_TIME/TIMER_CYCLE){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <button_reading+0x208>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d10d      	bne.n	8000ac6 <button_reading+0x12e>
					button_state[i] = BUTTON_IS_LONG_PRESSED;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <button_reading+0x204>)
 8000aae:	210d      	movs	r1, #13
 8000ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <button_reading+0x208>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff53 	bl	800096c <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <button_reading+0x200>)
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d146      	bne.n	8000b60 <button_reading+0x1c8>
					button_state[i] = BUTTON_IS_RELEASED;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <button_reading+0x204>)
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <button_reading+0x208>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ae6:	e03b      	b.n	8000b60 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <button_reading+0x200>)
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d137      	bne.n	8000b64 <button_reading+0x1cc>
					button_state[i] = BUTTON_IS_PRESSED;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <button_reading+0x204>)
 8000af8:	210b      	movs	r1, #11
 8000afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff33 	bl	800096c <button_process>
				break;
 8000b06:	e02d      	b.n	8000b64 <button_reading+0x1cc>
				counter_for_button_pressed[i]++;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <button_reading+0x208>)
 8000b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b10:	3201      	adds	r2, #1
 8000b12:	4923      	ldr	r1, [pc, #140]	; (8000ba0 <button_reading+0x208>)
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <button_reading+0x208>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2b14      	cmp	r3, #20
 8000b22:	d108      	bne.n	8000b36 <button_reading+0x19e>
					button_process(i);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff20 	bl	800096c <button_process>
					counter_for_button_pressed[i] = 0;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <button_reading+0x208>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <button_reading+0x200>)
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d112      	bne.n	8000b68 <button_reading+0x1d0>
					button_state[i] = BUTTON_IS_RELEASED;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <button_reading+0x204>)
 8000b46:	210c      	movs	r1, #12
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <button_reading+0x208>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000b56:	e007      	b.n	8000b68 <button_reading+0x1d0>
			}
		}
 8000b58:	bf00      	nop
 8000b5a:	e006      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b5c:	bf00      	nop
 8000b5e:	e004      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b60:	bf00      	nop
 8000b62:	e002      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b68:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f67f af16 	bls.w	80009a4 <button_reading+0xc>
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000d4 	.word	0x200000d4
 8000b88:	200000e4 	.word	0x200000e4
 8000b8c:	200000c4 	.word	0x200000c4
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	200000b4 	.word	0x200000b4
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200000f4 	.word	0x200000f4

08000ba4 <fsm_auto_run>:
 *      Author: phamv
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	switch (status)
 8000ba8:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <fsm_auto_run+0x234>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	f200 810f 	bhi.w	8000dd2 <fsm_auto_run+0x22e>
 8000bb4:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <fsm_auto_run+0x18>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000bf5 	.word	0x08000bf5
 8000bc4:	08000c65 	.word	0x08000c65
 8000bc8:	08000cdd 	.word	0x08000cdd
 8000bcc:	08000d4f 	.word	0x08000d4f
	{
	case INIT:
		status=AUTO_RED_GREEN;
 8000bd0:	4b81      	ldr	r3, [pc, #516]	; (8000dd8 <fsm_auto_run+0x234>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f001 faed 	bl	80021b8 <setTimer1>
		counter = max_red1;
 8000bde:	4b7f      	ldr	r3, [pc, #508]	; (8000ddc <fsm_auto_run+0x238>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a7f      	ldr	r2, [pc, #508]	; (8000de0 <fsm_auto_run+0x23c>)
 8000be4:	6013      	str	r3, [r2, #0]
		displayCounter();
 8000be6:	f001 fd49 	bl	800267c <displayCounter>
		setTraffic1Red();
 8000bea:	f001 fb85 	bl	80022f8 <setTraffic1Red>
		setTraffic2Green();
 8000bee:	f001 fbcf 	bl	8002390 <setTraffic2Green>
		break;
 8000bf2:	e0ee      	b.n	8000dd2 <fsm_auto_run+0x22e>
	case AUTO_RED_GREEN:
		if(timer1_flag == 1){
 8000bf4:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <fsm_auto_run+0x240>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d115      	bne.n	8000c28 <fsm_auto_run+0x84>
			counter--;
 8000bfc:	4b78      	ldr	r3, [pc, #480]	; (8000de0 <fsm_auto_run+0x23c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	4a77      	ldr	r2, [pc, #476]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c04:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 fad5 	bl	80021b8 <setTimer1>
			if(counter == max_yellow2){
 8000c0e:	4b74      	ldr	r3, [pc, #464]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b75      	ldr	r3, [pc, #468]	; (8000de8 <fsm_auto_run+0x244>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d104      	bne.n	8000c24 <fsm_auto_run+0x80>
				setTraffic2Yellow();
 8000c1a:	f001 fbdd 	bl	80023d8 <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 8000c1e:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c24:	f001 fd2a 	bl	800267c <displayCounter>
		}

		if(isButtonPressed(1)){
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fe85 	bl	8000938 <isButtonPressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80c7 	beq.w	8000dc4 <fsm_auto_run+0x220>
			isButtonPressed(2);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fe7e 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fe7b 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000c42:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c44:	220b      	movs	r2, #11
 8000c46:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000c48:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000c4c:	f001 fab4 	bl	80021b8 <setTimer1>
			setTraffic1Red();
 8000c50:	f001 fb52 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 8000c54:	f001 fb9c 	bl	8002390 <setTraffic2Green>
			counter = 99;
 8000c58:	4b61      	ldr	r3, [pc, #388]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000c5e:	f001 fd0d 	bl	800267c <displayCounter>
			break;
 8000c62:	e0b6      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
	case AUTO_RED_YELLOW:
		if(timer1_flag == 1){
 8000c64:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <fsm_auto_run+0x240>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d119      	bne.n	8000ca0 <fsm_auto_run+0xfc>
			counter--;
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a5b      	ldr	r2, [pc, #364]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c74:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f001 fa9d 	bl	80021b8 <setTimer1>
			if(counter == 0){
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10a      	bne.n	8000c9c <fsm_auto_run+0xf8>
				counter = max_green1;
 8000c86:	4b59      	ldr	r3, [pc, #356]	; (8000dec <fsm_auto_run+0x248>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a55      	ldr	r2, [pc, #340]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c8c:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 8000c8e:	f001 fb57 	bl	8002340 <setTraffic1Green>
				setTraffic2Red();
 8000c92:	f001 fb45 	bl	8002320 <setTraffic2Red>
				status=AUTO_GREEN_RED;
 8000c96:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c9c:	f001 fcee 	bl	800267c <displayCounter>
		}

		if(isButtonPressed(1)){
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fe49 	bl	8000938 <isButtonPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 808d 	beq.w	8000dc8 <fsm_auto_run+0x224>
			isButtonPressed(2);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fe42 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f7ff fe3f 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <fsm_auto_run+0x234>)
 8000cbc:	220b      	movs	r2, #11
 8000cbe:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000cc0:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000cc4:	f001 fa78 	bl	80021b8 <setTimer1>
			setTraffic1Red();
 8000cc8:	f001 fb16 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 8000ccc:	f001 fb60 	bl	8002390 <setTraffic2Green>
			counter = 99;
 8000cd0:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cd2:	2263      	movs	r2, #99	; 0x63
 8000cd4:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000cd6:	f001 fcd1 	bl	800267c <displayCounter>
			break;
 8000cda:	e07a      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_GREEN_RED:
		if(timer1_flag == 1){
 8000cdc:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <fsm_auto_run+0x240>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d117      	bne.n	8000d14 <fsm_auto_run+0x170>
			counter--;
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <fsm_auto_run+0x23c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cec:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f001 fa61 	bl	80021b8 <setTimer1>
			if(counter == 0){
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d108      	bne.n	8000d10 <fsm_auto_run+0x16c>
				counter = max_yellow1;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <fsm_auto_run+0x24c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d04:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 8000d06:	f001 fb53 	bl	80023b0 <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d10:	f001 fcb4 	bl	800267c <displayCounter>
		}

		if(isButtonPressed(1)){
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fe0f 	bl	8000938 <isButtonPressed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d055      	beq.n	8000dcc <fsm_auto_run+0x228>
			isButtonPressed(2);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fe09 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f7ff fe06 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d2e:	220b      	movs	r2, #11
 8000d30:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000d32:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000d36:	f001 fa3f 	bl	80021b8 <setTimer1>
			setTraffic1Red();
 8000d3a:	f001 fadd 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 8000d3e:	f001 fb27 	bl	8002390 <setTraffic2Green>
			counter = 99;
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d44:	2263      	movs	r2, #99	; 0x63
 8000d46:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000d48:	f001 fc98 	bl	800267c <displayCounter>
			break;
 8000d4c:	e041      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_YELLOW_RED:

		if(timer1_flag == 1){
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <fsm_auto_run+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d119      	bne.n	8000d8a <fsm_auto_run+0x1e6>
			counter--;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d5e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f001 fa28 	bl	80021b8 <setTimer1>
			if(counter == 0){
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10a      	bne.n	8000d86 <fsm_auto_run+0x1e2>
				counter = max_red1;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <fsm_auto_run+0x238>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d76:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 8000d78:	f001 fabe 	bl	80022f8 <setTraffic1Red>
				setTraffic2Green();
 8000d7c:	f001 fb08 	bl	8002390 <setTraffic2Green>
				status=AUTO_RED_GREEN;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d86:	f001 fc79 	bl	800267c <displayCounter>
		}

		if(isButtonPressed(1)==1){
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fdd4 	bl	8000938 <isButtonPressed>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11c      	bne.n	8000dd0 <fsm_auto_run+0x22c>
			isButtonPressed(2);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fdce 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fdcb 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <fsm_auto_run+0x234>)
 8000da4:	220b      	movs	r2, #11
 8000da6:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000da8:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000dac:	f001 fa04 	bl	80021b8 <setTimer1>
			setTraffic1Red();
 8000db0:	f001 faa2 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 8000db4:	f001 faec 	bl	8002390 <setTraffic2Green>
			counter = 99;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <fsm_auto_run+0x23c>)
 8000dba:	2263      	movs	r2, #99	; 0x63
 8000dbc:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000dbe:	f001 fc5d 	bl	800267c <displayCounter>
			break;
 8000dc2:	e006      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc4:	bf00      	nop
 8000dc6:	e004      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc8:	bf00      	nop
 8000dca:	e002      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
 8000dd0:	bf00      	nop
	}

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000118 	.word	0x20000118
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	20000120 	.word	0x20000120
 8000de4:	2000013c 	.word	0x2000013c
 8000de8:	20000024 	.word	0x20000024
 8000dec:	20000014 	.word	0x20000014
 8000df0:	20000018 	.word	0x20000018

08000df4 <fsm_manual_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	switch (status) {
 8000df8:	4b99      	ldr	r3, [pc, #612]	; (8001060 <fsm_manual_run+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b0b      	subs	r3, #11
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f200 8122 	bhi.w	8001048 <fsm_manual_run+0x254>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <fsm_manual_run+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000ea9 	.word	0x08000ea9
 8000e14:	08000f35 	.word	0x08000f35
 8000e18:	08000fbf 	.word	0x08000fbf
		case MAN_RED_GREEN:
			isButtonPressed(3);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff fd8b 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000e22:	4b90      	ldr	r3, [pc, #576]	; (8001064 <fsm_manual_run+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d010      	beq.n	8000e4c <fsm_manual_run+0x58>
				status = AUTO_RED_YELLOW;
 8000e2a:	4b8d      	ldr	r3, [pc, #564]	; (8001060 <fsm_manual_run+0x26c>)
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f001 f9c0 	bl	80021b8 <setTimer1>
				counter = max_yellow2;
 8000e38:	4b8b      	ldr	r3, [pc, #556]	; (8001068 <fsm_manual_run+0x274>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a8b      	ldr	r2, [pc, #556]	; (800106c <fsm_manual_run+0x278>)
 8000e3e:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e40:	f001 fc1c 	bl	800267c <displayCounter>
				setTraffic1Red();
 8000e44:	f001 fa58 	bl	80022f8 <setTraffic1Red>
				setTraffic2Yellow();
 8000e48:	f001 fac6 	bl	80023d8 <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fd73 	bl	8000938 <isButtonPressed>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d014      	beq.n	8000e82 <fsm_manual_run+0x8e>
				isButtonPressed(2);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fd6d 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000e5e:	4b80      	ldr	r3, [pc, #512]	; (8001060 <fsm_manual_run+0x26c>)
 8000e60:	2215      	movs	r2, #21
 8000e62:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f001 f9a6 	bl	80021b8 <setTimer1>
				counter = max_red1;
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <fsm_manual_run+0x27c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a7e      	ldr	r2, [pc, #504]	; (800106c <fsm_manual_run+0x278>)
 8000e72:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e74:	f001 fc02 	bl	800267c <displayCounter>
				clearTraffic1();
 8000e78:	f001 fa76 	bl	8002368 <clearTraffic1>
				clearTraffic2();
 8000e7c:	f001 fabc 	bl	80023f8 <clearTraffic2>
				break;
 8000e80:	e0eb      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff fd58 	bl	8000938 <isButtonPressed>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80de 	beq.w	800104c <fsm_manual_run+0x258>
				status = MAN_RED_YELLOW;
 8000e90:	4b73      	ldr	r3, [pc, #460]	; (8001060 <fsm_manual_run+0x26c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000e96:	f001 fa2f 	bl	80022f8 <setTraffic1Red>
				setTraffic2Yellow();
 8000e9a:	f001 fa9d 	bl	80023d8 <setTraffic2Yellow>
				setTimer1(60000);
 8000e9e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000ea2:	f001 f989 	bl	80021b8 <setTimer1>
			}
			break;
 8000ea6:	e0d1      	b.n	800104c <fsm_manual_run+0x258>

		case MAN_RED_YELLOW:
			if(isButtonPressed(3));
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff fd45 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000eae:	4b6d      	ldr	r3, [pc, #436]	; (8001064 <fsm_manual_run+0x270>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d010      	beq.n	8000ed8 <fsm_manual_run+0xe4>
				status = AUTO_GREEN_RED;
 8000eb6:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <fsm_manual_run+0x26c>)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec0:	f001 f97a 	bl	80021b8 <setTimer1>
				counter = max_green1;
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <fsm_manual_run+0x280>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a68      	ldr	r2, [pc, #416]	; (800106c <fsm_manual_run+0x278>)
 8000eca:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000ecc:	f001 fbd6 	bl	800267c <displayCounter>
				setTraffic1Green();
 8000ed0:	f001 fa36 	bl	8002340 <setTraffic1Green>
				setTraffic2Red();
 8000ed4:	f001 fa24 	bl	8002320 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fd2d 	bl	8000938 <isButtonPressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <fsm_manual_run+0x11a>
				isButtonPressed(2);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f7ff fd27 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <fsm_manual_run+0x26c>)
 8000eec:	2215      	movs	r2, #21
 8000eee:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f001 f960 	bl	80021b8 <setTimer1>
				counter = max_red1;
 8000ef8:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <fsm_manual_run+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a5b      	ldr	r2, [pc, #364]	; (800106c <fsm_manual_run+0x278>)
 8000efe:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f00:	f001 fbbc 	bl	800267c <displayCounter>
				clearTraffic1();
 8000f04:	f001 fa30 	bl	8002368 <clearTraffic1>
				clearTraffic2();
 8000f08:	f001 fa76 	bl	80023f8 <clearTraffic2>
				break;
 8000f0c:	e0a5      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fd12 	bl	8000938 <isButtonPressed>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 809a 	beq.w	8001050 <fsm_manual_run+0x25c>
				status = MAN_GREEN_RED;
 8000f1c:	4b50      	ldr	r3, [pc, #320]	; (8001060 <fsm_manual_run+0x26c>)
 8000f1e:	220d      	movs	r2, #13
 8000f20:	601a      	str	r2, [r3, #0]
				setTraffic1Green();
 8000f22:	f001 fa0d 	bl	8002340 <setTraffic1Green>
				setTraffic2Red();
 8000f26:	f001 f9fb 	bl	8002320 <setTraffic2Red>
				setTimer1(60000);
 8000f2a:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000f2e:	f001 f943 	bl	80021b8 <setTimer1>
			}
			break;
 8000f32:	e08d      	b.n	8001050 <fsm_manual_run+0x25c>

		case MAN_GREEN_RED:
			isButtonPressed(3);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f7ff fcff 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <fsm_manual_run+0x270>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d010      	beq.n	8000f64 <fsm_manual_run+0x170>
				status = AUTO_YELLOW_RED;
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <fsm_manual_run+0x26c>)
 8000f44:	2205      	movs	r2, #5
 8000f46:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f001 f934 	bl	80021b8 <setTimer1>
				counter = max_yellow1;
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <fsm_manual_run+0x284>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <fsm_manual_run+0x278>)
 8000f56:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f58:	f001 fb90 	bl	800267c <displayCounter>
				setTraffic1Yellow();
 8000f5c:	f001 fa28 	bl	80023b0 <setTraffic1Yellow>
				setTraffic2Red();
 8000f60:	f001 f9de 	bl	8002320 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fce7 	bl	8000938 <isButtonPressed>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d014      	beq.n	8000f9a <fsm_manual_run+0x1a6>
				isButtonPressed(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f7ff fce1 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <fsm_manual_run+0x26c>)
 8000f78:	2215      	movs	r2, #21
 8000f7a:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f001 f91a 	bl	80021b8 <setTimer1>
				counter = max_red1;
 8000f84:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <fsm_manual_run+0x27c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a38      	ldr	r2, [pc, #224]	; (800106c <fsm_manual_run+0x278>)
 8000f8a:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f8c:	f001 fb76 	bl	800267c <displayCounter>
				clearTraffic1();
 8000f90:	f001 f9ea 	bl	8002368 <clearTraffic1>
				clearTraffic2();
 8000f94:	f001 fa30 	bl	80023f8 <clearTraffic2>
				break;
 8000f98:	e05f      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fccc 	bl	8000938 <isButtonPressed>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d056      	beq.n	8001054 <fsm_manual_run+0x260>
				status = MAN_YELLOW_RED;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <fsm_manual_run+0x26c>)
 8000fa8:	220e      	movs	r2, #14
 8000faa:	601a      	str	r2, [r3, #0]
				setTraffic1Yellow();
 8000fac:	f001 fa00 	bl	80023b0 <setTraffic1Yellow>
				setTraffic2Red();
 8000fb0:	f001 f9b6 	bl	8002320 <setTraffic2Red>
				setTimer1(60000);
 8000fb4:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000fb8:	f001 f8fe 	bl	80021b8 <setTimer1>
			}

			break;
 8000fbc:	e04a      	b.n	8001054 <fsm_manual_run+0x260>

		case MAN_YELLOW_RED:
			isButtonPressed(3);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f7ff fcba 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <fsm_manual_run+0x270>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d010      	beq.n	8000fee <fsm_manual_run+0x1fa>
				status = AUTO_RED_GREEN;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <fsm_manual_run+0x26c>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f001 f8ef 	bl	80021b8 <setTimer1>
				counter = max_red1;
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <fsm_manual_run+0x27c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <fsm_manual_run+0x278>)
 8000fe0:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000fe2:	f001 fb4b 	bl	800267c <displayCounter>
				setTraffic1Red();
 8000fe6:	f001 f987 	bl	80022f8 <setTraffic1Red>
				setTraffic2Green();
 8000fea:	f001 f9d1 	bl	8002390 <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fca2 	bl	8000938 <isButtonPressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d014      	beq.n	8001024 <fsm_manual_run+0x230>
				isButtonPressed(2);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f7ff fc9c 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <fsm_manual_run+0x26c>)
 8001002:	2215      	movs	r2, #21
 8001004:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f001 f8d5 	bl	80021b8 <setTimer1>
				counter = max_red1;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <fsm_manual_run+0x27c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <fsm_manual_run+0x278>)
 8001014:	6013      	str	r3, [r2, #0]
				displayCounter();
 8001016:	f001 fb31 	bl	800267c <displayCounter>
				clearTraffic1();
 800101a:	f001 f9a5 	bl	8002368 <clearTraffic1>
				clearTraffic2();
 800101e:	f001 f9eb 	bl	80023f8 <clearTraffic2>
				break;
 8001022:	e01a      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff fc87 	bl	8000938 <isButtonPressed>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <fsm_manual_run+0x264>
				status = MAN_RED_GREEN;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <fsm_manual_run+0x26c>)
 8001032:	220b      	movs	r2, #11
 8001034:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8001036:	f001 f95f 	bl	80022f8 <setTraffic1Red>
				setTraffic2Green();
 800103a:	f001 f9a9 	bl	8002390 <setTraffic2Green>
				setTimer1(60000);
 800103e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001042:	f001 f8b9 	bl	80021b8 <setTimer1>
			}


			break;
 8001046:	e007      	b.n	8001058 <fsm_manual_run+0x264>
		default:
			break;
 8001048:	bf00      	nop
 800104a:	e006      	b.n	800105a <fsm_manual_run+0x266>
			break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000118 	.word	0x20000118
 8001064:	2000013c 	.word	0x2000013c
 8001068:	20000024 	.word	0x20000024
 800106c:	20000120 	.word	0x20000120
 8001070:	20000010 	.word	0x20000010
 8001074:	20000014 	.word	0x20000014
 8001078:	20000018 	.word	0x20000018

0800107c <fsm_pedestrian_run>:

#include "fsm_pedestrian.h"

int PWM = 0;

void fsm_pedestrian_run(){
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 8001080:	4b72      	ldr	r3, [pc, #456]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	2b03      	cmp	r3, #3
 8001088:	f200 80d6 	bhi.w	8001238 <fsm_pedestrian_run+0x1bc>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <fsm_pedestrian_run+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a5 	.word	0x080010a5
 8001098:	080010b1 	.word	0x080010b1
 800109c:	08001133 	.word	0x08001133
 80010a0:	08001181 	.word	0x08001181
		case INIT:
			clearPedestrian();
 80010a4:	f001 f9e0 	bl	8002468 <clearPedestrian>
			pedestrianStatus = PED_NONE;
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	601a      	str	r2, [r3, #0]
			break;
 80010ae:	e0ca      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
		case PED_NONE:
			if(isButtonPressed(0)){
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fc41 	bl	8000938 <isButtonPressed>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80bf 	beq.w	800123c <fsm_pedestrian_run+0x1c0>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW){
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <fsm_pedestrian_run+0x52>
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d108      	bne.n	80010e0 <fsm_pedestrian_run+0x64>
					pedestrianStatus = PED_GREEN;
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 80010d4:	f001 f9b4 	bl	8002440 <setPedestrianGreen>
					setTimer2(250);
 80010d8:	20fa      	movs	r0, #250	; 0xfa
 80010da:	f001 f889 	bl	80021f0 <setTimer2>
 80010de:	e027      	b.n	8001130 <fsm_pedestrian_run+0xb4>
				} else if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW ){
 80010e0:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b0b      	cmp	r3, #11
 80010e6:	d003      	beq.n	80010f0 <fsm_pedestrian_run+0x74>
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	d108      	bne.n	8001102 <fsm_pedestrian_run+0x86>
					pedestrianStatus = PED_GREEN;
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 80010f6:	f001 f9a3 	bl	8002440 <setPedestrianGreen>
					setTimer2(0);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f001 f878 	bl	80021f0 <setTimer2>
 8001100:	e016      	b.n	8001130 <fsm_pedestrian_run+0xb4>
				}
				else if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d00c      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b0d      	cmp	r3, #13
 8001110:	d008      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 8001112:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b05      	cmp	r3, #5
 8001118:	d004      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 800111a:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b0e      	cmp	r3, #14
 8001120:	f040 808c 	bne.w	800123c <fsm_pedestrian_run+0x1c0>
					pedestrianStatus = PED_RED;
 8001124:	4b49      	ldr	r3, [pc, #292]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001126:	2203      	movs	r2, #3
 8001128:	601a      	str	r2, [r3, #0]
					setPedestrianRed();
 800112a:	f001 f975 	bl	8002418 <setPedestrianRed>
				}
			}
			break;
 800112e:	e085      	b.n	800123c <fsm_pedestrian_run+0x1c0>
 8001130:	e084      	b.n	800123c <fsm_pedestrian_run+0x1c0>
		case PED_RED:
			if(timer3_flag){
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <fsm_pedestrian_run+0xd0>
				timer3_flag = 0;
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
				clearPedestrian();
 8001146:	f001 f98f 	bl	8002468 <clearPedestrian>
				break;
 800114a:	e07c      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			}
			else if(status == AUTO_RED_GREEN){
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d108      	bne.n	8001166 <fsm_pedestrian_run+0xea>
				pedestrianStatus = PED_GREEN;
 8001154:	4b3d      	ldr	r3, [pc, #244]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001156:	2204      	movs	r2, #4
 8001158:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 800115a:	f001 f971 	bl	8002440 <setPedestrianGreen>
				setTimer2(250);
 800115e:	20fa      	movs	r0, #250	; 0xfa
 8001160:	f001 f846 	bl	80021f0 <setTimer2>
			else if (status == MAN_RED_GREEN){
				pedestrianStatus = PED_GREEN;
				setPedestrianGreen();
				setTimer2(0);
			}
			break;
 8001164:	e06c      	b.n	8001240 <fsm_pedestrian_run+0x1c4>
			else if (status == MAN_RED_GREEN){
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b0b      	cmp	r3, #11
 800116c:	d168      	bne.n	8001240 <fsm_pedestrian_run+0x1c4>
				pedestrianStatus = PED_GREEN;
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001170:	2204      	movs	r2, #4
 8001172:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 8001174:	f001 f964 	bl	8002440 <setPedestrianGreen>
				setTimer2(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f001 f839 	bl	80021f0 <setTimer2>
			break;
 800117e:	e05f      	b.n	8001240 <fsm_pedestrian_run+0x1c4>
		case PED_GREEN:
			if(timer2_flag){
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d039      	beq.n	80011fc <fsm_pedestrian_run+0x180>
				if(PWM == 0){
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <fsm_pedestrian_run+0x1e0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12a      	bne.n	80011e6 <fsm_pedestrian_run+0x16a>
					PWM = 63-63*counter/(double)max_red1;
 8001190:	4b33      	ldr	r3, [pc, #204]	; (8001260 <fsm_pedestrian_run+0x1e4>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f928 	bl	80003f0 <__aeabi_i2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <fsm_pedestrian_run+0x1e8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f921 	bl	80003f0 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff faaf 	bl	8000718 <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4929      	ldr	r1, [pc, #164]	; (8001268 <fsm_pedestrian_run+0x1ec>)
 80011c4:	f7fe ffc6 	bl	8000154 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fb8a 	bl	80008e8 <__aeabi_d2iz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <fsm_pedestrian_run+0x1e0>)
 80011d8:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <fsm_pedestrian_run+0x1e0>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <fsm_pedestrian_run+0x1f0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
 80011e4:	e007      	b.n	80011f6 <fsm_pedestrian_run+0x17a>
				} else {
					PWM = 0;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <fsm_pedestrian_run+0x1e0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <fsm_pedestrian_run+0x1e0>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <fsm_pedestrian_run+0x1f0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 80011f6:	20fa      	movs	r0, #250	; 0xfa
 80011f8:	f000 fffa 	bl	80021f0 <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d00b      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b0d      	cmp	r3, #13
 800120a:	d007      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d003      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b0e      	cmp	r3, #14
 800121a:	d113      	bne.n	8001244 <fsm_pedestrian_run+0x1c8>
				pedestrianStatus = PED_RED;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <fsm_pedestrian_run+0x1d0>)
 800121e:	2203      	movs	r2, #3
 8001220:	601a      	str	r2, [r3, #0]
				setTimer3(2000);
 8001222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001226:	f000 ffff 	bl	8002228 <setTimer3>
				setPedestrianRed();
 800122a:	f001 f8f5 	bl	8002418 <setPedestrianRed>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <fsm_pedestrian_run+0x1f0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8001236:	e005      	b.n	8001244 <fsm_pedestrian_run+0x1c8>
		default:
			break;
 8001238:	bf00      	nop
 800123a:	e004      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	bf00      	nop
 800124c:	2000011c 	.word	0x2000011c
 8001250:	20000118 	.word	0x20000118
 8001254:	20000144 	.word	0x20000144
 8001258:	20000140 	.word	0x20000140
 800125c:	20000114 	.word	0x20000114
 8001260:	20000120 	.word	0x20000120
 8001264:	20000010 	.word	0x20000010
 8001268:	404f8000 	.word	0x404f8000
 800126c:	2000015c 	.word	0x2000015c

08001270 <fsm_tuning_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_tuning.h"

void fsm_tuning_run(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	switch(status){
 8001274:	4bb6      	ldr	r3, [pc, #728]	; (8001550 <fsm_tuning_run+0x2e0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b15      	subs	r3, #21
 800127a:	2b05      	cmp	r3, #5
 800127c:	f200 8276 	bhi.w	800176c <fsm_tuning_run+0x4fc>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <fsm_tuning_run+0x18>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	080012a1 	.word	0x080012a1
 800128c:	08001367 	.word	0x08001367
 8001290:	0800142d 	.word	0x0800142d
 8001294:	080014f7 	.word	0x080014f7
 8001298:	080015dd 	.word	0x080015dd
 800129c:	080016a5 	.word	0x080016a5
	case TUNING_RED1:

		if(timer1_flag){
 80012a0:	4bac      	ldr	r3, [pc, #688]	; (8001554 <fsm_tuning_run+0x2e4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 80012a8:	4baa      	ldr	r3, [pc, #680]	; (8001554 <fsm_tuning_run+0x2e4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80012ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b2:	f000 ff81 	bl	80021b8 <setTimer1>
			toggleTraffic1Red();
 80012b6:	f001 f8eb 	bl	8002490 <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fb3c 	bl	8000938 <isButtonPressed>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d019      	beq.n	80012fa <fsm_tuning_run+0x8a>
			isButtonPressed(2);
 80012c6:	2002      	movs	r0, #2
 80012c8:	f7ff fb36 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f7ff fb33 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 80012d2:	4b9f      	ldr	r3, [pc, #636]	; (8001550 <fsm_tuning_run+0x2e0>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 80012d8:	f001 f924 	bl	8002524 <acceptTraffic1Red>
			setTimer1(1000);
 80012dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e0:	f000 ff6a 	bl	80021b8 <setTimer1>
			counter = max_red1;
 80012e4:	4b9c      	ldr	r3, [pc, #624]	; (8001558 <fsm_tuning_run+0x2e8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a9c      	ldr	r2, [pc, #624]	; (800155c <fsm_tuning_run+0x2ec>)
 80012ea:	6013      	str	r3, [r2, #0]
			displayCounter();
 80012ec:	f001 f9c6 	bl	800267c <displayCounter>
			setTraffic1Red();
 80012f0:	f001 f802 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 80012f4:	f001 f84c 	bl	8002390 <setTraffic2Green>
			break;
 80012f8:	e245      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fb1c 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff fb19 	bl	8000938 <isButtonPressed>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d016      	beq.n	800133a <fsm_tuning_run+0xca>
			isButtonPressed(3);
 800130c:	2003      	movs	r0, #3
 800130e:	f7ff fb13 	bl	8000938 <isButtonPressed>
			status = TUNING_RED2;
 8001312:	4b8f      	ldr	r3, [pc, #572]	; (8001550 <fsm_tuning_run+0x2e0>)
 8001314:	2216      	movs	r2, #22
 8001316:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131c:	f000 ff4c 	bl	80021b8 <setTimer1>
			acceptTraffic1Red();
 8001320:	f001 f900 	bl	8002524 <acceptTraffic1Red>
			counter = max_red2;
 8001324:	4b8e      	ldr	r3, [pc, #568]	; (8001560 <fsm_tuning_run+0x2f0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a8c      	ldr	r2, [pc, #560]	; (800155c <fsm_tuning_run+0x2ec>)
 800132a:	6013      	str	r3, [r2, #0]
			displayCounter();
 800132c:	f001 f9a6 	bl	800267c <displayCounter>
			clearTraffic1();
 8001330:	f001 f81a 	bl	8002368 <clearTraffic1>
			clearTraffic2();
 8001334:	f001 f860 	bl	80023f8 <clearTraffic2>
			break;
 8001338:	e225      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 800133a:	2003      	movs	r0, #3
 800133c:	f7ff fafc 	bl	8000938 <isButtonPressed>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8214 	beq.w	8001770 <fsm_tuning_run+0x500>
			counter++;
 8001348:	4b84      	ldr	r3, [pc, #528]	; (800155c <fsm_tuning_run+0x2ec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a83      	ldr	r2, [pc, #524]	; (800155c <fsm_tuning_run+0x2ec>)
 8001350:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8001352:	4b82      	ldr	r3, [pc, #520]	; (800155c <fsm_tuning_run+0x2ec>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b63      	cmp	r3, #99	; 0x63
 8001358:	dd02      	ble.n	8001360 <fsm_tuning_run+0xf0>
				counter = 2;
 800135a:	4b80      	ldr	r3, [pc, #512]	; (800155c <fsm_tuning_run+0x2ec>)
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001360:	f001 f98c 	bl	800267c <displayCounter>
		}

		break;
 8001364:	e204      	b.n	8001770 <fsm_tuning_run+0x500>
	case TUNING_RED2:
		if(timer1_flag){
 8001366:	4b7b      	ldr	r3, [pc, #492]	; (8001554 <fsm_tuning_run+0x2e4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <fsm_tuning_run+0x110>
			timer1_flag = 0;
 800136e:	4b79      	ldr	r3, [pc, #484]	; (8001554 <fsm_tuning_run+0x2e4>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001378:	f000 ff1e 	bl	80021b8 <setTimer1>
			toggleTraffic2Red();
 800137c:	f001 f894 	bl	80024a8 <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fad9 	bl	8000938 <isButtonPressed>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d019      	beq.n	80013c0 <fsm_tuning_run+0x150>
			isButtonPressed(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fad3 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001392:	2003      	movs	r0, #3
 8001394:	f7ff fad0 	bl	8000938 <isButtonPressed>
			acceptTraffic2Red();
 8001398:	f001 f8e6 	bl	8002568 <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 800139c:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <fsm_tuning_run+0x2e0>)
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80013a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a6:	f000 ff07 	bl	80021b8 <setTimer1>
			counter = max_red1;
 80013aa:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <fsm_tuning_run+0x2e8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6b      	ldr	r2, [pc, #428]	; (800155c <fsm_tuning_run+0x2ec>)
 80013b0:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013b2:	f001 f963 	bl	800267c <displayCounter>
			setTraffic2Red();
 80013b6:	f000 ffb3 	bl	8002320 <setTraffic2Red>
			setTraffic2Green();
 80013ba:	f000 ffe9 	bl	8002390 <setTraffic2Green>
			break;
 80013be:	e1e2      	b.n	8001786 <fsm_tuning_run+0x516>
		}
		if(isButtonPressed(0)){
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fab9 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff fab6 	bl	8000938 <isButtonPressed>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <fsm_tuning_run+0x190>
			isButtonPressed(3);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f7ff fab0 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN1;
 80013d8:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <fsm_tuning_run+0x2e0>)
 80013da:	2217      	movs	r2, #23
 80013dc:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80013de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e2:	f000 fee9 	bl	80021b8 <setTimer1>
			acceptTraffic2Red();
 80013e6:	f001 f8bf 	bl	8002568 <acceptTraffic2Red>
			counter = max_green1;
 80013ea:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <fsm_tuning_run+0x2f4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a5b      	ldr	r2, [pc, #364]	; (800155c <fsm_tuning_run+0x2ec>)
 80013f0:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013f2:	f001 f943 	bl	800267c <displayCounter>
			clearTraffic1();
 80013f6:	f000 ffb7 	bl	8002368 <clearTraffic1>
			clearTraffic2();
 80013fa:	f000 fffd 	bl	80023f8 <clearTraffic2>
			break;
 80013fe:	e1c2      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001400:	2003      	movs	r0, #3
 8001402:	f7ff fa99 	bl	8000938 <isButtonPressed>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 81b3 	beq.w	8001774 <fsm_tuning_run+0x504>
			counter++;
 800140e:	4b53      	ldr	r3, [pc, #332]	; (800155c <fsm_tuning_run+0x2ec>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a51      	ldr	r2, [pc, #324]	; (800155c <fsm_tuning_run+0x2ec>)
 8001416:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <fsm_tuning_run+0x2ec>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b63      	cmp	r3, #99	; 0x63
 800141e:	dd02      	ble.n	8001426 <fsm_tuning_run+0x1b6>
				counter = 2;
 8001420:	4b4e      	ldr	r3, [pc, #312]	; (800155c <fsm_tuning_run+0x2ec>)
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001426:	f001 f929 	bl	800267c <displayCounter>
		}
		break;
 800142a:	e1a3      	b.n	8001774 <fsm_tuning_run+0x504>
	case TUNING_GREEN1:

		if(timer1_flag){
 800142c:	4b49      	ldr	r3, [pc, #292]	; (8001554 <fsm_tuning_run+0x2e4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <fsm_tuning_run+0x1d6>
			timer1_flag = 0;
 8001434:	4b47      	ldr	r3, [pc, #284]	; (8001554 <fsm_tuning_run+0x2e4>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800143a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143e:	f000 febb 	bl	80021b8 <setTimer1>
			toggleTraffic1Green();
 8001442:	f001 f83b 	bl	80024bc <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff fa76 	bl	8000938 <isButtonPressed>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d019      	beq.n	8001486 <fsm_tuning_run+0x216>
			isButtonPressed(2);
 8001452:	2002      	movs	r0, #2
 8001454:	f7ff fa70 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001458:	2003      	movs	r0, #3
 800145a:	f7ff fa6d 	bl	8000938 <isButtonPressed>
			acceptTraffic1Green();
 800145e:	f001 f8a5 	bl	80025ac <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <fsm_tuning_run+0x2e0>)
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146c:	f000 fea4 	bl	80021b8 <setTimer1>
			counter = max_red1;
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <fsm_tuning_run+0x2e8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a39      	ldr	r2, [pc, #228]	; (800155c <fsm_tuning_run+0x2ec>)
 8001476:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001478:	f001 f900 	bl	800267c <displayCounter>
			setTraffic1Red();
 800147c:	f000 ff3c 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 8001480:	f000 ff86 	bl	8002390 <setTraffic2Green>
			break;
 8001484:	e17f      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fa56 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 800148c:	2002      	movs	r0, #2
 800148e:	f7ff fa53 	bl	8000938 <isButtonPressed>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d016      	beq.n	80014c6 <fsm_tuning_run+0x256>
			isButtonPressed(3);
 8001498:	2003      	movs	r0, #3
 800149a:	f7ff fa4d 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN2;
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <fsm_tuning_run+0x2e0>)
 80014a0:	2218      	movs	r2, #24
 80014a2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f000 fe86 	bl	80021b8 <setTimer1>
			acceptTraffic1Green();
 80014ac:	f001 f87e 	bl	80025ac <acceptTraffic1Green>
			counter = max_green2;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <fsm_tuning_run+0x2f8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a29      	ldr	r2, [pc, #164]	; (800155c <fsm_tuning_run+0x2ec>)
 80014b6:	6013      	str	r3, [r2, #0]
			displayCounter();
 80014b8:	f001 f8e0 	bl	800267c <displayCounter>
			clearTraffic1();
 80014bc:	f000 ff54 	bl	8002368 <clearTraffic1>
			clearTraffic2();
 80014c0:	f000 ff9a 	bl	80023f8 <clearTraffic2>
			break;
 80014c4:	e15f      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80014c6:	2003      	movs	r0, #3
 80014c8:	f7ff fa36 	bl	8000938 <isButtonPressed>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8152 	beq.w	8001778 <fsm_tuning_run+0x508>
			counter++;
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <fsm_tuning_run+0x2ec>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	4a20      	ldr	r2, [pc, #128]	; (800155c <fsm_tuning_run+0x2ec>)
 80014dc:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <fsm_tuning_run+0x2f0>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <fsm_tuning_run+0x2ec>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dc02      	bgt.n	80014f0 <fsm_tuning_run+0x280>
				counter = 1;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <fsm_tuning_run+0x2ec>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80014f0:	f001 f8c4 	bl	800267c <displayCounter>
		}
		break;
 80014f4:	e140      	b.n	8001778 <fsm_tuning_run+0x508>
	case TUNING_GREEN2:

		if(timer1_flag){
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <fsm_tuning_run+0x2e4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <fsm_tuning_run+0x2a0>
			timer1_flag = 0;
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <fsm_tuning_run+0x2e4>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001508:	f000 fe56 	bl	80021b8 <setTimer1>
			toggleTraffic2Green();
 800150c:	f000 ffe0 	bl	80024d0 <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff fa11 	bl	8000938 <isButtonPressed>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d027      	beq.n	800156c <fsm_tuning_run+0x2fc>
			isButtonPressed(2);
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fa0b 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001522:	2003      	movs	r0, #3
 8001524:	f7ff fa08 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <fsm_tuning_run+0x2e0>)
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 800152e:	f001 f857 	bl	80025e0 <acceptTraffic2Green>
			setTimer1(1000);
 8001532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001536:	f000 fe3f 	bl	80021b8 <setTimer1>
			counter = max_red1;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <fsm_tuning_run+0x2e8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <fsm_tuning_run+0x2ec>)
 8001540:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001542:	f001 f89b 	bl	800267c <displayCounter>
			setTraffic1Red();
 8001546:	f000 fed7 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 800154a:	f000 ff21 	bl	8002390 <setTraffic2Green>
			break;
 800154e:	e11a      	b.n	8001786 <fsm_tuning_run+0x516>
 8001550:	20000118 	.word	0x20000118
 8001554:	2000013c 	.word	0x2000013c
 8001558:	20000010 	.word	0x20000010
 800155c:	20000120 	.word	0x20000120
 8001560:	2000001c 	.word	0x2000001c
 8001564:	20000014 	.word	0x20000014
 8001568:	20000020 	.word	0x20000020
		}

		if(isButtonPressed(0)){
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff f9e3 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001572:	2002      	movs	r0, #2
 8001574:	f7ff f9e0 	bl	8000938 <isButtonPressed>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d016      	beq.n	80015ac <fsm_tuning_run+0x33c>
			isButtonPressed(3);
 800157e:	2003      	movs	r0, #3
 8001580:	f7ff f9da 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW1;
 8001584:	4b81      	ldr	r3, [pc, #516]	; (800178c <fsm_tuning_run+0x51c>)
 8001586:	2219      	movs	r2, #25
 8001588:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800158a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158e:	f000 fe13 	bl	80021b8 <setTimer1>
			acceptTraffic2Green();
 8001592:	f001 f825 	bl	80025e0 <acceptTraffic2Green>
			counter = max_yellow1;
 8001596:	4b7e      	ldr	r3, [pc, #504]	; (8001790 <fsm_tuning_run+0x520>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a7e      	ldr	r2, [pc, #504]	; (8001794 <fsm_tuning_run+0x524>)
 800159c:	6013      	str	r3, [r2, #0]
			displayCounter();
 800159e:	f001 f86d 	bl	800267c <displayCounter>
			clearTraffic1();
 80015a2:	f000 fee1 	bl	8002368 <clearTraffic1>
			clearTraffic2();
 80015a6:	f000 ff27 	bl	80023f8 <clearTraffic2>
			break;
 80015aa:	e0ec      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff f9c3 	bl	8000938 <isButtonPressed>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80e1 	beq.w	800177c <fsm_tuning_run+0x50c>
			counter++;
 80015ba:	4b76      	ldr	r3, [pc, #472]	; (8001794 <fsm_tuning_run+0x524>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a74      	ldr	r2, [pc, #464]	; (8001794 <fsm_tuning_run+0x524>)
 80015c2:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 80015c4:	4b74      	ldr	r3, [pc, #464]	; (8001798 <fsm_tuning_run+0x528>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b72      	ldr	r3, [pc, #456]	; (8001794 <fsm_tuning_run+0x524>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dc02      	bgt.n	80015d6 <fsm_tuning_run+0x366>
				counter = 1;
 80015d0:	4b70      	ldr	r3, [pc, #448]	; (8001794 <fsm_tuning_run+0x524>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80015d6:	f001 f851 	bl	800267c <displayCounter>
		}
		break;
 80015da:	e0cf      	b.n	800177c <fsm_tuning_run+0x50c>
	case TUNING_YELLOW1:
		if(timer1_flag){
 80015dc:	4b6f      	ldr	r3, [pc, #444]	; (800179c <fsm_tuning_run+0x52c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <fsm_tuning_run+0x386>
			timer1_flag = 0;
 80015e4:	4b6d      	ldr	r3, [pc, #436]	; (800179c <fsm_tuning_run+0x52c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80015ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ee:	f000 fde3 	bl	80021b8 <setTimer1>
			toggleTraffic1Yellow();
 80015f2:	f000 ff77 	bl	80024e4 <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff f99e 	bl	8000938 <isButtonPressed>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d019      	beq.n	8001636 <fsm_tuning_run+0x3c6>
			isButtonPressed(2);
 8001602:	2002      	movs	r0, #2
 8001604:	f7ff f998 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001608:	2003      	movs	r0, #3
 800160a:	f7ff f995 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 800160e:	4b5f      	ldr	r3, [pc, #380]	; (800178c <fsm_tuning_run+0x51c>)
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 8001614:	f000 fffe 	bl	8002614 <acceptTraffic1Yellow>
			setTimer1(1000);
 8001618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161c:	f000 fdcc 	bl	80021b8 <setTimer1>
			counter = max_red1;
 8001620:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <fsm_tuning_run+0x528>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a5b      	ldr	r2, [pc, #364]	; (8001794 <fsm_tuning_run+0x524>)
 8001626:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001628:	f001 f828 	bl	800267c <displayCounter>
			setTraffic1Red();
 800162c:	f000 fe64 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 8001630:	f000 feae 	bl	8002390 <setTraffic2Green>
			break;
 8001634:	e0a7      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff f97e 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff f97b 	bl	8000938 <isButtonPressed>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d016      	beq.n	8001676 <fsm_tuning_run+0x406>
			isButtonPressed(3);
 8001648:	2003      	movs	r0, #3
 800164a:	f7ff f975 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW2;
 800164e:	4b4f      	ldr	r3, [pc, #316]	; (800178c <fsm_tuning_run+0x51c>)
 8001650:	221a      	movs	r2, #26
 8001652:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001658:	f000 fdae 	bl	80021b8 <setTimer1>
			acceptTraffic1Yellow();
 800165c:	f000 ffda 	bl	8002614 <acceptTraffic1Yellow>
			counter = max_yellow2;
 8001660:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <fsm_tuning_run+0x530>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <fsm_tuning_run+0x524>)
 8001666:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001668:	f001 f808 	bl	800267c <displayCounter>
			clearTraffic1();
 800166c:	f000 fe7c 	bl	8002368 <clearTraffic1>
			clearTraffic2();
 8001670:	f000 fec2 	bl	80023f8 <clearTraffic2>
			break;
 8001674:	e087      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001676:	2003      	movs	r0, #3
 8001678:	f7ff f95e 	bl	8000938 <isButtonPressed>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d07e      	beq.n	8001780 <fsm_tuning_run+0x510>
			counter++;
 8001682:	4b44      	ldr	r3, [pc, #272]	; (8001794 <fsm_tuning_run+0x524>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a42      	ldr	r2, [pc, #264]	; (8001794 <fsm_tuning_run+0x524>)
 800168a:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 800168c:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <fsm_tuning_run+0x534>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <fsm_tuning_run+0x524>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	dc02      	bgt.n	800169e <fsm_tuning_run+0x42e>
				counter = 1;
 8001698:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <fsm_tuning_run+0x524>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800169e:	f000 ffed 	bl	800267c <displayCounter>
		}
		break;
 80016a2:	e06d      	b.n	8001780 <fsm_tuning_run+0x510>
	case TUNING_YELLOW2:
		if(timer1_flag){
 80016a4:	4b3d      	ldr	r3, [pc, #244]	; (800179c <fsm_tuning_run+0x52c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <fsm_tuning_run+0x44e>
			timer1_flag = 0;
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <fsm_tuning_run+0x52c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80016b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b6:	f000 fd7f 	bl	80021b8 <setTimer1>
			toggleTraffic2Yellow();
 80016ba:	f000 ff25 	bl	8002508 <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff f93a 	bl	8000938 <isButtonPressed>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d019      	beq.n	80016fe <fsm_tuning_run+0x48e>
			isButtonPressed(2);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f7ff f934 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f7ff f931 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <fsm_tuning_run+0x51c>)
 80016d8:	2202      	movs	r2, #2
 80016da:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 80016dc:	f000 ffb4 	bl	8002648 <acceptTraffic2Yellow>
			setTimer1(1000);
 80016e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e4:	f000 fd68 	bl	80021b8 <setTimer1>
			counter = max_red1;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <fsm_tuning_run+0x528>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <fsm_tuning_run+0x524>)
 80016ee:	6013      	str	r3, [r2, #0]
			displayCounter();
 80016f0:	f000 ffc4 	bl	800267c <displayCounter>
			setTraffic1Red();
 80016f4:	f000 fe00 	bl	80022f8 <setTraffic1Red>
			setTraffic2Green();
 80016f8:	f000 fe4a 	bl	8002390 <setTraffic2Green>
			break;
 80016fc:	e043      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff f91a 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001704:	2002      	movs	r0, #2
 8001706:	f7ff f917 	bl	8000938 <isButtonPressed>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d016      	beq.n	800173e <fsm_tuning_run+0x4ce>
			isButtonPressed(3);
 8001710:	2003      	movs	r0, #3
 8001712:	f7ff f911 	bl	8000938 <isButtonPressed>
			status = TUNING_RED1;
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <fsm_tuning_run+0x51c>)
 8001718:	2215      	movs	r2, #21
 800171a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800171c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001720:	f000 fd4a 	bl	80021b8 <setTimer1>
			acceptTraffic2Yellow();
 8001724:	f000 ff90 	bl	8002648 <acceptTraffic2Yellow>
			counter = max_red1;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <fsm_tuning_run+0x528>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <fsm_tuning_run+0x524>)
 800172e:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001730:	f000 ffa4 	bl	800267c <displayCounter>
			clearTraffic1();
 8001734:	f000 fe18 	bl	8002368 <clearTraffic1>
			clearTraffic2();
 8001738:	f000 fe5e 	bl	80023f8 <clearTraffic2>
			break;
 800173c:	e023      	b.n	8001786 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 800173e:	2003      	movs	r0, #3
 8001740:	f7ff f8fa 	bl	8000938 <isButtonPressed>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d01c      	beq.n	8001784 <fsm_tuning_run+0x514>
			counter++;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <fsm_tuning_run+0x524>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a10      	ldr	r2, [pc, #64]	; (8001794 <fsm_tuning_run+0x524>)
 8001752:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <fsm_tuning_run+0x528>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <fsm_tuning_run+0x524>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	dc02      	bgt.n	8001766 <fsm_tuning_run+0x4f6>
				counter = 1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <fsm_tuning_run+0x524>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001766:	f000 ff89 	bl	800267c <displayCounter>
		}
		break;
 800176a:	e00b      	b.n	8001784 <fsm_tuning_run+0x514>
	default:
		break;
 800176c:	bf00      	nop
 800176e:	e00a      	b.n	8001786 <fsm_tuning_run+0x516>
		break;
 8001770:	bf00      	nop
 8001772:	e008      	b.n	8001786 <fsm_tuning_run+0x516>
		break;
 8001774:	bf00      	nop
 8001776:	e006      	b.n	8001786 <fsm_tuning_run+0x516>
		break;
 8001778:	bf00      	nop
 800177a:	e004      	b.n	8001786 <fsm_tuning_run+0x516>
		break;
 800177c:	bf00      	nop
 800177e:	e002      	b.n	8001786 <fsm_tuning_run+0x516>
		break;
 8001780:	bf00      	nop
 8001782:	e000      	b.n	8001786 <fsm_tuning_run+0x516>
		break;
 8001784:	bf00      	nop
	}
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000118 	.word	0x20000118
 8001790:	20000018 	.word	0x20000018
 8001794:	20000120 	.word	0x20000120
 8001798:	20000010 	.word	0x20000010
 800179c:	2000013c 	.word	0x2000013c
 80017a0:	20000024 	.word	0x20000024
 80017a4:	2000001c 	.word	0x2000001c

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ac:	f000 ffba 	bl	8002724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b0:	f000 f84c 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b4:	f000 f978 	bl	8001aa8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017b8:	f000 f88a 	bl	80018d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80017bc:	f000 f94a 	bl	8001a54 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80017c0:	f000 f8d2 	bl	8001968 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 80017c4:	f000 f9e3 	bl	8001b8e <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 80017c8:	4816      	ldr	r0, [pc, #88]	; (8001824 <main+0x7c>)
 80017ca:	f002 f801 	bl	80037d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017ce:	2100      	movs	r1, #0
 80017d0:	4815      	ldr	r0, [pc, #84]	; (8001828 <main+0x80>)
 80017d2:	f002 f8a7 	bl	8003924 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <main+0x84>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <main+0x88>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timer_run, 1, 1);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2101      	movs	r1, #1
 80017e6:	4813      	ldr	r0, [pc, #76]	; (8001834 <main+0x8c>)
 80017e8:	f000 fa16 	bl	8001c18 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 1, 1);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2101      	movs	r1, #1
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <main+0x90>)
 80017f2:	f000 fa11 	bl	8001c18 <SCH_Add_Task>
  SCH_Add_Task(fsm_auto_run, 2, 10);
 80017f6:	220a      	movs	r2, #10
 80017f8:	2102      	movs	r1, #2
 80017fa:	4810      	ldr	r0, [pc, #64]	; (800183c <main+0x94>)
 80017fc:	f000 fa0c 	bl	8001c18 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 3, 10);
 8001800:	220a      	movs	r2, #10
 8001802:	2103      	movs	r1, #3
 8001804:	480e      	ldr	r0, [pc, #56]	; (8001840 <main+0x98>)
 8001806:	f000 fa07 	bl	8001c18 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 4, 10);
 800180a:	220a      	movs	r2, #10
 800180c:	2104      	movs	r1, #4
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <main+0x9c>)
 8001810:	f000 fa02 	bl	8001c18 <SCH_Add_Task>
  SCH_Add_Task(fsm_pedestrian_run, 5, 10);
 8001814:	220a      	movs	r2, #10
 8001816:	2105      	movs	r1, #5
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <main+0xa0>)
 800181a:	f000 f9fd 	bl	8001c18 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800181e:	f000 faed 	bl	8001dfc <SCH_Dispatch_Tasks>
 8001822:	e7fc      	b.n	800181e <main+0x76>
 8001824:	200001a4 	.word	0x200001a4
 8001828:	2000015c 	.word	0x2000015c
 800182c:	20000118 	.word	0x20000118
 8001830:	2000011c 	.word	0x2000011c
 8001834:	08002261 	.word	0x08002261
 8001838:	08000999 	.word	0x08000999
 800183c:	08000ba5 	.word	0x08000ba5
 8001840:	08000df5 	.word	0x08000df5
 8001844:	08001271 	.word	0x08001271
 8001848:	0800107d 	.word	0x0800107d

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	2228      	movs	r2, #40	; 0x28
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fb30 	bl	8004ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001872:	2301      	movs	r3, #1
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001876:	2310      	movs	r3, #16
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	2302      	movs	r3, #2
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800187e:	2300      	movs	r3, #0
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001882:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fb35 	bl	8002efc <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001898:	f000 f974 	bl	8001b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2302      	movs	r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2102      	movs	r1, #2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fda0 	bl	80033fc <HAL_RCC_ClockConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018c2:	f000 f95f 	bl	8001b84 <Error_Handler>
  }
}
 80018c6:	bf00      	nop
 80018c8:	3740      	adds	r7, #64	; 0x40
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_TIM2_Init+0x94>)
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_TIM2_Init+0x94>)
 80018f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80018fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_TIM2_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_TIM2_Init+0x94>)
 8001904:	223f      	movs	r2, #63	; 0x3f
 8001906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_TIM2_Init+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM2_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_TIM2_Init+0x94>)
 8001916:	f001 ff0b 	bl	8003730 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001920:	f000 f930 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <MX_TIM2_Init+0x94>)
 8001932:	f002 fa5f 	bl	8003df4 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800193c:	f000 f922 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_TIM2_Init+0x94>)
 800194e:	f002 fddd 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001958:	f000 f914 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200001a4 	.word	0x200001a4

08001968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <MX_TIM3_Init+0xe4>)
 800199a:	4a2d      	ldr	r2, [pc, #180]	; (8001a50 <MX_TIM3_Init+0xe8>)
 800199c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019ae:	223f      	movs	r2, #63	; 0x3f
 80019b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019be:	4823      	ldr	r0, [pc, #140]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019c0:	f001 feb6 	bl	8003730 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019ca:	f000 f8db 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d8:	4619      	mov	r1, r3
 80019da:	481c      	ldr	r0, [pc, #112]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019dc:	f002 fa0a 	bl	8003df4 <HAL_TIM_ConfigClockSource>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019e6:	f000 f8cd 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ea:	4818      	ldr	r0, [pc, #96]	; (8001a4c <MX_TIM3_Init+0xe4>)
 80019ec:	f001 ff42 	bl	8003874 <HAL_TIM_PWM_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019f6:	f000 f8c5 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	4619      	mov	r1, r3
 8001a08:	4810      	ldr	r0, [pc, #64]	; (8001a4c <MX_TIM3_Init+0xe4>)
 8001a0a:	f002 fd7f 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a14:	f000 f8b6 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a18:	2360      	movs	r3, #96	; 0x60
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM3_Init+0xe4>)
 8001a30:	f002 f922 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a3a:	f000 f8a3 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a3e:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM3_Init+0xe4>)
 8001a40:	f000 fabe 	bl	8001fc0 <HAL_TIM_MspPostInit>

}
 8001a44:	bf00      	nop
 8001a46:	3738      	adds	r7, #56	; 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000015c 	.word	0x2000015c
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <MX_USART2_UART_Init+0x50>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	f002 fdae 	bl	80045ec <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a96:	f000 f875 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001ec 	.word	0x200001ec
 8001aa4:	40004400 	.word	0x40004400

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <MX_GPIO_Init+0xd0>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <MX_GPIO_Init+0xd0>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <MX_GPIO_Init+0xd0>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <MX_GPIO_Init+0xd0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <MX_GPIO_Init+0xd0>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <MX_GPIO_Init+0xd0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001af2:	4822      	ldr	r0, [pc, #136]	; (8001b7c <MX_GPIO_Init+0xd4>)
 8001af4:	f001 f9d1 	bl	8002e9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001afe:	4820      	ldr	r0, [pc, #128]	; (8001b80 <MX_GPIO_Init+0xd8>)
 8001b00:	f001 f9cb 	bl	8002e9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8001b04:	2313      	movs	r3, #19
 8001b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4619      	mov	r1, r3
 8001b16:	481a      	ldr	r0, [pc, #104]	; (8001b80 <MX_GPIO_Init+0xd8>)
 8001b18:	f001 f824 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4813      	ldr	r0, [pc, #76]	; (8001b7c <MX_GPIO_Init+0xd4>)
 8001b30:	f001 f818 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001b34:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2302      	movs	r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <MX_GPIO_Init+0xd4>)
 8001b4e:	f001 f809 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8001b52:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2302      	movs	r3, #2
 8001b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_GPIO_Init+0xd8>)
 8001b6c:	f000 fffa 	bl	8002b64 <HAL_GPIO_Init>

}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010c00 	.word	0x40010c00
 8001b80:	40010800 	.word	0x40010800

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <Error_Handler+0x8>

08001b8e <SCH_Init>:
#include "scheduler.h"

struct sTask SCH_tasks_G[SCH_MAX_TASKS];
struct sTask *head = NULL;
struct sTask *pRun = NULL;
void SCH_Init(void){
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001b94:	2300      	movs	r3, #0
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	e006      	b.n	8001ba8 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 f951 	bl	8001e44 <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b13      	cmp	r3, #19
 8001bac:	d9f5      	bls.n	8001b9a <SCH_Init+0xc>
	}
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <SCH_Update>:

void SCH_Update(void){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
//				SCH_tasks_G[index].RunMe += 1;
//				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
//			}
//		}
//	}
	if(head != NULL){
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <SCH_Update+0x5c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <SCH_Update+0x44>
		head->Delay--;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <SCH_Update+0x5c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	605a      	str	r2, [r3, #4]
	}
	while(head != NULL && head->Delay == 0){
 8001bce:	e015      	b.n	8001bfc <SCH_Update+0x44>
		if(head->Period != 0) SCH_Add_Task(head->pTask, head->Period, head->Period);
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <SCH_Update+0x5c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <SCH_Update+0x3a>
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <SCH_Update+0x5c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <SCH_Update+0x5c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <SCH_Update+0x5c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f000 f813 	bl	8001c18 <SCH_Add_Task>
		head = head->pNext;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <SCH_Update+0x5c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <SCH_Update+0x5c>)
 8001bfa:	6013      	str	r3, [r2, #0]
	while(head != NULL && head->Delay == 0){
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SCH_Update+0x5c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <SCH_Update+0x56>
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <SCH_Update+0x5c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0e0      	beq.n	8001bd0 <SCH_Update+0x18>
	}
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000130 	.word	0x20000130

08001c18 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunc)(), uint32_t delay, uint32_t period){
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
//	SCH_tasks_G[index].Period = period;
//	SCH_tasks_G[index].Delay = delay;
//	SCH_tasks_G[index].RunMe = 0;
//	SCH_tasks_G[index].TaskID = index;
//	return index;
	uint32_t index = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
	uint8_t waiting = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	76fb      	strb	r3, [r7, #27]
	while(SCH_tasks_G[index].pTask != 0 && index < SCH_MAX_TASKS) index++;
 8001c2c:	e002      	b.n	8001c34 <SCH_Add_Task+0x1c>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	496e      	ldr	r1, [pc, #440]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <SCH_Add_Task+0x36>
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	d9ef      	bls.n	8001c2e <SCH_Add_Task+0x16>
	if(index == SCH_MAX_TASKS){
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b14      	cmp	r3, #20
 8001c52:	d101      	bne.n	8001c58 <SCH_Add_Task+0x40>
		return SCH_MAX_TASKS;
 8001c54:	2314      	movs	r3, #20
 8001c56:	e0c5      	b.n	8001de4 <SCH_Add_Task+0x1cc>
	}
	SCH_tasks_G[index].pTask = pFunc;
 8001c58:	4965      	ldr	r1, [pc, #404]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = period;
 8001c6a:	4961      	ldr	r1, [pc, #388]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	3308      	adds	r3, #8
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe = 0;
 8001c7e:	495c      	ldr	r1, [pc, #368]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskID = index;
 8001c92:	4957      	ldr	r1, [pc, #348]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	601a      	str	r2, [r3, #0]
	struct sTask *cur = head;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617b      	str	r3, [r7, #20]
	struct sTask *prev = NULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
	if(head == NULL){
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d126      	bne.n	8001d06 <SCH_Add_Task+0xee>
		head = &SCH_tasks_G[index];
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a4b      	ldr	r2, [pc, #300]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001cc8:	6013      	str	r3, [r2, #0]
		SCH_tasks_G[index].Delay = delay;
 8001cca:	4949      	ldr	r1, [pc, #292]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3304      	adds	r3, #4
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	601a      	str	r2, [r3, #0]
		pRun = head;
 8001cde:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a45      	ldr	r2, [pc, #276]	; (8001df8 <SCH_Add_Task+0x1e0>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e07c      	b.n	8001de2 <SCH_Add_Task+0x1ca>
	} else {
		while(cur != NULL){
			waiting += cur->Delay;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	7efb      	ldrb	r3, [r7, #27]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	76fb      	strb	r3, [r7, #27]
			if(waiting > delay) break;
 8001cf4:	7efb      	ldrb	r3, [r7, #27]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d308      	bcc.n	8001d0e <SCH_Add_Task+0xf6>
			prev = cur;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
			cur = cur->pNext;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	617b      	str	r3, [r7, #20]
		while(cur != NULL){
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ed      	bne.n	8001ce8 <SCH_Add_Task+0xd0>
 8001d0c:	e000      	b.n	8001d10 <SCH_Add_Task+0xf8>
			if(waiting > delay) break;
 8001d0e:	bf00      	nop
		}
		if(cur == NULL){
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <SCH_Add_Task+0x12a>
			prev->pNext = &SCH_tasks_G[index];
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4a33      	ldr	r2, [pc, #204]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001d22:	441a      	add	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	615a      	str	r2, [r3, #20]
			SCH_tasks_G[index].Delay = delay - waiting;
 8001d28:	7efb      	ldrb	r3, [r7, #27]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	1ad1      	subs	r1, r2, r3
 8001d2e:	4830      	ldr	r0, [pc, #192]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4403      	add	r3, r0
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	6019      	str	r1, [r3, #0]
 8001d40:	e04f      	b.n	8001de2 <SCH_Add_Task+0x1ca>
		} else{
			if(cur == head){
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d11a      	bne.n	8001d82 <SCH_Add_Task+0x16a>
				head = &SCH_tasks_G[index];
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001d5c:	6013      	str	r3, [r2, #0]
				head->pNext = cur;
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	615a      	str	r2, [r3, #20]
				head->Delay = delay;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	605a      	str	r2, [r3, #4]
				if(pRun == cur) pRun = head;
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <SCH_Add_Task+0x1e0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d126      	bne.n	8001dc6 <SCH_Add_Task+0x1ae>
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <SCH_Add_Task+0x1dc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <SCH_Add_Task+0x1e0>)
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e021      	b.n	8001dc6 <SCH_Add_Task+0x1ae>
			} else {
				prev->pNext =  &SCH_tasks_G[index];
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001d8e:	441a      	add	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	615a      	str	r2, [r3, #20]
				SCH_tasks_G[index].Delay = delay - waiting + cur->Delay;
 8001d94:	7efb      	ldrb	r3, [r7, #27]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	18d1      	adds	r1, r2, r3
 8001da0:	4813      	ldr	r0, [pc, #76]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4403      	add	r3, r0
 8001dae:	3304      	adds	r3, #4
 8001db0:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[index].pNext = cur;
 8001db2:	490f      	ldr	r1, [pc, #60]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3314      	adds	r3, #20
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]
			}
			cur->Delay -= SCH_tasks_G[index].Delay;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <SCH_Add_Task+0x1d8>)
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4403      	add	r3, r0
 8001dd8:	3304      	adds	r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	1aca      	subs	r2, r1, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	605a      	str	r2, [r3, #4]
//				}
//				cur = cur->pNext;
//			}
		}
	}
	return index;
 8001de2:	69fb      	ldr	r3, [r7, #28]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000230 	.word	0x20000230
 8001df4:	20000130 	.word	0x20000130
 8001df8:	20000134 	.word	0x20000134

08001dfc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
//			(*SCH_tasks_G[index].pTask)();
//			if(SCH_tasks_G[index].Period == 0) SCH_Delete_Task(index);
//		}
//	}
//	SCH_Go_To_Sleep();
	while(pRun != head){
 8001e02:	e00f      	b.n	8001e24 <SCH_Dispatch_Tasks+0x28>
		(pRun->pTask)();
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <SCH_Dispatch_Tasks+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4798      	blx	r3
		uint32_t id = pRun->TaskID;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <SCH_Dispatch_Tasks+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	607b      	str	r3, [r7, #4]
		pRun = pRun->pNext;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <SCH_Dispatch_Tasks+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <SCH_Dispatch_Tasks+0x40>)
 8001e1c:	6013      	str	r3, [r2, #0]
		SCH_Delete_Task(id);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f810 	bl	8001e44 <SCH_Delete_Task>
	while(pRun != head){
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SCH_Dispatch_Tasks+0x40>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SCH_Dispatch_Tasks+0x44>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1e9      	bne.n	8001e04 <SCH_Dispatch_Tasks+0x8>
	}
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000134 	.word	0x20000134
 8001e40:	20000130 	.word	0x20000130

08001e44 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t index){
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 8001e4c:	4926      	ldr	r1, [pc, #152]	; (8001ee8 <SCH_Delete_Task+0xa4>)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <SCH_Delete_Task+0x20>
		return 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e03b      	b.n	8001edc <SCH_Delete_Task+0x98>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8001e64:	4920      	ldr	r1, [pc, #128]	; (8001ee8 <SCH_Delete_Task+0xa4>)
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8001e76:	491c      	ldr	r1, [pc, #112]	; (8001ee8 <SCH_Delete_Task+0xa4>)
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3304      	adds	r3, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <SCH_Delete_Task+0xa4>)
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	3308      	adds	r3, #8
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 8001e9e:	4912      	ldr	r1, [pc, #72]	; (8001ee8 <SCH_Delete_Task+0xa4>)
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	330c      	adds	r3, #12
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[index].pNext = 0;
 8001eb2:	490d      	ldr	r1, [pc, #52]	; (8001ee8 <SCH_Delete_Task+0xa4>)
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].TaskID = 0;
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <SCH_Delete_Task+0xa4>)
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3310      	adds	r3, #16
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
		return 1;
 8001eda:	2301      	movs	r3, #1
	}
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000230 	.word	0x20000230

08001eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_MspInit+0x5c>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6193      	str	r3, [r2, #24]
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_MspInit+0x60>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_MspInit+0x60>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d114      	bne.n	8001f8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_TIM_Base_MspInit+0x68>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <HAL_TIM_Base_MspInit+0x68>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_TIM_Base_MspInit+0x68>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	201c      	movs	r0, #28
 8001f80:	f000 fd09 	bl	8002996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f84:	201c      	movs	r0, #28
 8001f86:	f000 fd22 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f8a:	e010      	b.n	8001fae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_TIM_Base_MspInit+0x6c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10b      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_TIM_Base_MspInit+0x68>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_TIM_Base_MspInit+0x68>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	61d3      	str	r3, [r2, #28]
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_TIM_Base_MspInit+0x68>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40000400 	.word	0x40000400

08001fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_TIM_MspPostInit+0x58>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d117      	bne.n	8002010 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_TIM_MspPostInit+0x5c>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <HAL_TIM_MspPostInit+0x5c>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_TIM_MspPostInit+0x5c>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2302      	movs	r3, #2
 8002002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_TIM_MspPostInit+0x60>)
 800200c:	f000 fdaa 	bl	8002b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40000400 	.word	0x40000400
 800201c:	40021000 	.word	0x40021000
 8002020:	40010800 	.word	0x40010800

08002024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_UART_MspInit+0x98>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d137      	bne.n	80020b4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_UART_MspInit+0x9c>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_UART_MspInit+0x9c>)
 800204a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204e:	61d3      	str	r3, [r2, #28]
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_UART_MspInit+0x9c>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_UART_MspInit+0x9c>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_UART_MspInit+0x9c>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_UART_MspInit+0x9c>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002074:	2304      	movs	r3, #4
 8002076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4619      	mov	r1, r3
 8002086:	480f      	ldr	r0, [pc, #60]	; (80020c4 <HAL_UART_MspInit+0xa0>)
 8002088:	f000 fd6c 	bl	8002b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800208c:	2308      	movs	r3, #8
 800208e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4809      	ldr	r0, [pc, #36]	; (80020c4 <HAL_UART_MspInit+0xa0>)
 80020a0:	f000 fd60 	bl	8002b64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2026      	movs	r0, #38	; 0x26
 80020aa:	f000 fc74 	bl	8002996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ae:	2026      	movs	r0, #38	; 0x26
 80020b0:	f000 fc8d 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40004400 	.word	0x40004400
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010800 	.word	0x40010800

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler+0x4>

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210e:	f000 fb4f 	bl	80027b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <TIM2_IRQHandler+0x10>)
 800211e:	f001 fca3 	bl	8003a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200001a4 	.word	0x200001a4

0800212c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <USART2_IRQHandler+0x10>)
 8002132:	f002 faed 	bl	8004710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200001ec 	.word	0x200001ec

08002140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <_sbrk+0x5c>)
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <_sbrk+0x60>)
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <_sbrk+0x64>)
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <_sbrk+0x68>)
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	429a      	cmp	r2, r3
 800216e:	d207      	bcs.n	8002180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002170:	f002 fe7c 	bl	8004e6c <__errno>
 8002174:	4603      	mov	r3, r0
 8002176:	220c      	movs	r2, #12
 8002178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e009      	b.n	8002194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <_sbrk+0x64>)
 8002190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20005000 	.word	0x20005000
 80021a0:	00000400 	.word	0x00000400
 80021a4:	20000138 	.word	0x20000138
 80021a8:	20000428 	.word	0x20000428

080021ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <setTimer1+0x2c>)
 80021c4:	fb82 1203 	smull	r1, r2, r2, r3
 80021c8:	1092      	asrs	r2, r2, #2
 80021ca:	17db      	asrs	r3, r3, #31
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <setTimer1+0x30>)
 80021d0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <setTimer1+0x34>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	66666667 	.word	0x66666667
 80021e8:	20000148 	.word	0x20000148
 80021ec:	2000013c 	.word	0x2000013c

080021f0 <setTimer2>:

void setTimer2(int duration){
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <setTimer2+0x2c>)
 80021fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002200:	1092      	asrs	r2, r2, #2
 8002202:	17db      	asrs	r3, r3, #31
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	4a06      	ldr	r2, [pc, #24]	; (8002220 <setTimer2+0x30>)
 8002208:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <setTimer2+0x34>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	66666667 	.word	0x66666667
 8002220:	2000014c 	.word	0x2000014c
 8002224:	20000140 	.word	0x20000140

08002228 <setTimer3>:

void setTimer3(int duration){
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <setTimer3+0x2c>)
 8002234:	fb82 1203 	smull	r1, r2, r2, r3
 8002238:	1092      	asrs	r2, r2, #2
 800223a:	17db      	asrs	r3, r3, #31
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	4a06      	ldr	r2, [pc, #24]	; (8002258 <setTimer3+0x30>)
 8002240:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <setTimer3+0x34>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	66666667 	.word	0x66666667
 8002258:	20000150 	.word	0x20000150
 800225c:	20000144 	.word	0x20000144

08002260 <timer_run>:

void timer_run(){
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <timer_run+0x6c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	dd0b      	ble.n	8002284 <timer_run+0x24>
		timer1_counter--;
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <timer_run+0x6c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3b01      	subs	r3, #1
 8002272:	4a16      	ldr	r2, [pc, #88]	; (80022cc <timer_run+0x6c>)
 8002274:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <timer_run+0x6c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <timer_run+0x24>
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <timer_run+0x70>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <timer_run+0x74>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	dd0b      	ble.n	80022a4 <timer_run+0x44>
		timer2_counter--;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <timer_run+0x74>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <timer_run+0x74>)
 8002294:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <timer_run+0x74>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <timer_run+0x44>
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <timer_run+0x78>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <timer_run+0x7c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	dd0b      	ble.n	80022c4 <timer_run+0x64>
		timer3_counter--;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <timer_run+0x7c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <timer_run+0x7c>)
 80022b4:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <timer_run+0x7c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <timer_run+0x64>
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <timer_run+0x80>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
	}
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000148 	.word	0x20000148
 80022d0:	2000013c 	.word	0x2000013c
 80022d4:	2000014c 	.word	0x2000014c
 80022d8:	20000140 	.word	0x20000140
 80022dc:	20000150 	.word	0x20000150
 80022e0:	20000144 	.word	0x20000144

080022e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80022ec:	f7ff fc64 	bl	8001bb8 <SCH_Update>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <setTraffic1Red>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "traffic.h"

void setTraffic1Red(){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <setTraffic1Red+0x20>)
 8002304:	f000 fdc9 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	2108      	movs	r1, #8
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <setTraffic1Red+0x24>)
 800230e:	f000 fdc4 	bl	8002e9a <HAL_GPIO_WritePin>

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40010800 	.word	0x40010800
 800231c:	40010c00 	.word	0x40010c00

08002320 <setTraffic2Red>:

void setTraffic2Red(){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	2120      	movs	r1, #32
 8002328:	4804      	ldr	r0, [pc, #16]	; (800233c <setTraffic2Red+0x1c>)
 800232a:	f000 fdb6 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	2110      	movs	r1, #16
 8002332:	4802      	ldr	r0, [pc, #8]	; (800233c <setTraffic2Red+0x1c>)
 8002334:	f000 fdb1 	bl	8002e9a <HAL_GPIO_WritePin>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40010c00 	.word	0x40010c00

08002340 <setTraffic1Green>:

void setTraffic1Green(){
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <setTraffic1Green+0x20>)
 800234c:	f000 fda5 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	2108      	movs	r1, #8
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <setTraffic1Green+0x24>)
 8002356:	f000 fda0 	bl	8002e9a <HAL_GPIO_WritePin>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40010800 	.word	0x40010800
 8002364:	40010c00 	.word	0x40010c00

08002368 <clearTraffic1>:

void clearTraffic1(){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <clearTraffic1+0x20>)
 8002374:	f000 fd91 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	2108      	movs	r1, #8
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <clearTraffic1+0x24>)
 800237e:	f000 fd8c 	bl	8002e9a <HAL_GPIO_WritePin>
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40010800 	.word	0x40010800
 800238c:	40010c00 	.word	0x40010c00

08002390 <setTraffic2Green>:


void setTraffic2Green(){
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	2120      	movs	r1, #32
 8002398:	4804      	ldr	r0, [pc, #16]	; (80023ac <setTraffic2Green+0x1c>)
 800239a:	f000 fd7e 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800239e:	2201      	movs	r2, #1
 80023a0:	2110      	movs	r1, #16
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <setTraffic2Green+0x1c>)
 80023a4:	f000 fd79 	bl	8002e9a <HAL_GPIO_WritePin>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40010c00 	.word	0x40010c00

080023b0 <setTraffic1Yellow>:

void setTraffic1Yellow(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <setTraffic1Yellow+0x20>)
 80023bc:	f000 fd6d 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2108      	movs	r1, #8
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <setTraffic1Yellow+0x24>)
 80023c6:	f000 fd68 	bl	8002e9a <HAL_GPIO_WritePin>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40010800 	.word	0x40010800
 80023d4:	40010c00 	.word	0x40010c00

080023d8 <setTraffic2Yellow>:

void setTraffic2Yellow(){
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	2120      	movs	r1, #32
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <setTraffic2Yellow+0x1c>)
 80023e2:	f000 fd5a 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80023e6:	2201      	movs	r2, #1
 80023e8:	2110      	movs	r1, #16
 80023ea:	4802      	ldr	r0, [pc, #8]	; (80023f4 <setTraffic2Yellow+0x1c>)
 80023ec:	f000 fd55 	bl	8002e9a <HAL_GPIO_WritePin>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40010c00 	.word	0x40010c00

080023f8 <clearTraffic2>:

void clearTraffic2(){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2120      	movs	r1, #32
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <clearTraffic2+0x1c>)
 8002402:	f000 fd4a 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2110      	movs	r1, #16
 800240a:	4802      	ldr	r0, [pc, #8]	; (8002414 <clearTraffic2+0x1c>)
 800240c:	f000 fd45 	bl	8002e9a <HAL_GPIO_WritePin>
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40010c00 	.word	0x40010c00

08002418 <setPedestrianRed>:

void setPedestrianRed(){
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 800241c:	2201      	movs	r2, #1
 800241e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <setPedestrianRed+0x20>)
 8002424:	f000 fd39 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242e:	4803      	ldr	r0, [pc, #12]	; (800243c <setPedestrianRed+0x24>)
 8002430:	f000 fd33 	bl	8002e9a <HAL_GPIO_WritePin>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40010800 	.word	0x40010800

08002440 <setPedestrianGreen>:

void setPedestrianGreen(){
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <setPedestrianGreen+0x20>)
 800244c:	f000 fd25 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002456:	4803      	ldr	r0, [pc, #12]	; (8002464 <setPedestrianGreen+0x24>)
 8002458:	f000 fd1f 	bl	8002e9a <HAL_GPIO_WritePin>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40010c00 	.word	0x40010c00
 8002464:	40010800 	.word	0x40010800

08002468 <clearPedestrian>:
void setPedestrianYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void clearPedestrian(){
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <clearPedestrian+0x20>)
 8002474:	f000 fd11 	bl	8002e9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <clearPedestrian+0x24>)
 8002480:	f000 fd0b 	bl	8002e9a <HAL_GPIO_WritePin>
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40010c00 	.word	0x40010c00
 800248c:	40010800 	.word	0x40010800

08002490 <toggleTraffic1Red>:

void toggleTraffic1Red(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8002494:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <toggleTraffic1Red+0x14>)
 800249a:	f000 fd16 	bl	8002eca <HAL_GPIO_TogglePin>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40010800 	.word	0x40010800

080024a8 <toggleTraffic2Red>:

void toggleTraffic2Red(){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 80024ac:	2120      	movs	r1, #32
 80024ae:	4802      	ldr	r0, [pc, #8]	; (80024b8 <toggleTraffic2Red+0x10>)
 80024b0:	f000 fd0b 	bl	8002eca <HAL_GPIO_TogglePin>
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40010c00 	.word	0x40010c00

080024bc <toggleTraffic1Green>:

void toggleTraffic1Green(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 80024c0:	2108      	movs	r1, #8
 80024c2:	4802      	ldr	r0, [pc, #8]	; (80024cc <toggleTraffic1Green+0x10>)
 80024c4:	f000 fd01 	bl	8002eca <HAL_GPIO_TogglePin>
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40010c00 	.word	0x40010c00

080024d0 <toggleTraffic2Green>:

void toggleTraffic2Green(){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 80024d4:	2110      	movs	r1, #16
 80024d6:	4802      	ldr	r0, [pc, #8]	; (80024e0 <toggleTraffic2Green+0x10>)
 80024d8:	f000 fcf7 	bl	8002eca <HAL_GPIO_TogglePin>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40010c00 	.word	0x40010c00

080024e4 <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 80024e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <toggleTraffic1Yellow+0x1c>)
 80024ee:	f000 fcec 	bl	8002eca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 80024f2:	2108      	movs	r1, #8
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <toggleTraffic1Yellow+0x20>)
 80024f6:	f000 fce8 	bl	8002eca <HAL_GPIO_TogglePin>
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40010800 	.word	0x40010800
 8002504:	40010c00 	.word	0x40010c00

08002508 <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 800250c:	2120      	movs	r1, #32
 800250e:	4804      	ldr	r0, [pc, #16]	; (8002520 <toggleTraffic2Yellow+0x18>)
 8002510:	f000 fcdb 	bl	8002eca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8002514:	2110      	movs	r1, #16
 8002516:	4802      	ldr	r0, [pc, #8]	; (8002520 <toggleTraffic2Yellow+0x18>)
 8002518:	f000 fcd7 	bl	8002eca <HAL_GPIO_TogglePin>
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40010c00 	.word	0x40010c00

08002524 <acceptTraffic1Red>:

void acceptTraffic1Red(){
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	max_red1 = counter;
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <acceptTraffic1Red+0x34>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <acceptTraffic1Red+0x38>)
 800252e:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <acceptTraffic1Red+0x38>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <acceptTraffic1Red+0x3c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	dc02      	bgt.n	8002542 <acceptTraffic1Red+0x1e>
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <acceptTraffic1Red+0x3c>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <acceptTraffic1Red+0x38>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <acceptTraffic1Red+0x3c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	4a05      	ldr	r2, [pc, #20]	; (8002564 <acceptTraffic1Red+0x40>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000120 	.word	0x20000120
 800255c:	20000010 	.word	0x20000010
 8002560:	20000024 	.word	0x20000024
 8002564:	20000020 	.word	0x20000020

08002568 <acceptTraffic2Red>:

void acceptTraffic2Red(){
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
	max_red2 = counter;
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <acceptTraffic2Red+0x34>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <acceptTraffic2Red+0x38>)
 8002572:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <acceptTraffic2Red+0x38>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <acceptTraffic2Red+0x3c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	dc02      	bgt.n	8002586 <acceptTraffic2Red+0x1e>
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <acceptTraffic2Red+0x3c>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <acceptTraffic2Red+0x38>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <acceptTraffic2Red+0x3c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <acceptTraffic2Red+0x40>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	20000120 	.word	0x20000120
 80025a0:	2000001c 	.word	0x2000001c
 80025a4:	20000018 	.word	0x20000018
 80025a8:	20000014 	.word	0x20000014

080025ac <acceptTraffic1Green>:

void acceptTraffic1Green(){
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	max_green1 = counter;
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <acceptTraffic1Green+0x24>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <acceptTraffic1Green+0x28>)
 80025b6:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <acceptTraffic1Green+0x2c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <acceptTraffic1Green+0x28>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	4a06      	ldr	r2, [pc, #24]	; (80025dc <acceptTraffic1Green+0x30>)
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000120 	.word	0x20000120
 80025d4:	20000014 	.word	0x20000014
 80025d8:	2000001c 	.word	0x2000001c
 80025dc:	20000018 	.word	0x20000018

080025e0 <acceptTraffic2Green>:

void acceptTraffic2Green(){
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
	max_green2 = counter;
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <acceptTraffic2Green+0x24>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <acceptTraffic2Green+0x28>)
 80025ea:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <acceptTraffic2Green+0x2c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <acceptTraffic2Green+0x28>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	4a06      	ldr	r2, [pc, #24]	; (8002610 <acceptTraffic2Green+0x30>)
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000120 	.word	0x20000120
 8002608:	20000020 	.word	0x20000020
 800260c:	20000010 	.word	0x20000010
 8002610:	20000024 	.word	0x20000024

08002614 <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <acceptTraffic1Yellow+0x24>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <acceptTraffic1Yellow+0x28>)
 800261e:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <acceptTraffic1Yellow+0x2c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <acceptTraffic1Yellow+0x28>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	4a06      	ldr	r2, [pc, #24]	; (8002644 <acceptTraffic1Yellow+0x30>)
 800262c:	6013      	str	r3, [r2, #0]
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000120 	.word	0x20000120
 800263c:	20000018 	.word	0x20000018
 8002640:	2000001c 	.word	0x2000001c
 8002644:	20000014 	.word	0x20000014

08002648 <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <acceptTraffic2Yellow+0x24>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <acceptTraffic2Yellow+0x28>)
 8002652:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <acceptTraffic2Yellow+0x2c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <acceptTraffic2Yellow+0x28>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	4a06      	ldr	r2, [pc, #24]	; (8002678 <acceptTraffic2Yellow+0x30>)
 8002660:	6013      	str	r3, [r2, #0]
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000120 	.word	0x20000120
 8002670:	20000024 	.word	0x20000024
 8002674:	20000010 	.word	0x20000010
 8002678:	20000020 	.word	0x20000020

0800267c <displayCounter>:

void displayCounter(){
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#", counter/10, counter%10);
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <displayCounter+0x48>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <displayCounter+0x4c>)
 8002686:	fb82 1203 	smull	r1, r2, r2, r3
 800268a:	1092      	asrs	r2, r2, #2
 800268c:	17db      	asrs	r3, r3, #31
 800268e:	1ad0      	subs	r0, r2, r3
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <displayCounter+0x48>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <displayCounter+0x4c>)
 8002696:	fb83 1302 	smull	r1, r3, r3, r2
 800269a:	1099      	asrs	r1, r3, #2
 800269c:	17d3      	asrs	r3, r2, #31
 800269e:	1ac9      	subs	r1, r1, r3
 80026a0:	460b      	mov	r3, r1
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	1ad1      	subs	r1, r2, r3
 80026aa:	460b      	mov	r3, r1
 80026ac:	4602      	mov	r2, r0
 80026ae:	4907      	ldr	r1, [pc, #28]	; (80026cc <displayCounter+0x50>)
 80026b0:	4807      	ldr	r0, [pc, #28]	; (80026d0 <displayCounter+0x54>)
 80026b2:	f002 fc0d 	bl	8004ed0 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 9);
 80026b6:	2209      	movs	r2, #9
 80026b8:	4905      	ldr	r1, [pc, #20]	; (80026d0 <displayCounter+0x54>)
 80026ba:	4806      	ldr	r0, [pc, #24]	; (80026d4 <displayCounter+0x58>)
 80026bc:	f001 ffe3 	bl	8004686 <HAL_UART_Transmit_IT>
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000120 	.word	0x20000120
 80026c8:	66666667 	.word	0x66666667
 80026cc:	0800575c 	.word	0x0800575c
 80026d0:	20000124 	.word	0x20000124
 80026d4:	200001ec 	.word	0x200001ec

080026d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026da:	490d      	ldr	r1, [pc, #52]	; (8002710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f0:	4c0a      	ldr	r4, [pc, #40]	; (800271c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026fe:	f7ff fd55 	bl	80021ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002702:	f002 fbb9 	bl	8004e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002706:	f7ff f84f 	bl	80017a8 <main>
  bx lr
 800270a:	4770      	bx	lr
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002714:	080057cc 	.word	0x080057cc
  ldr r2, =_sbss
 8002718:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800271c:	20000424 	.word	0x20000424

08002720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC1_2_IRQHandler>
	...

08002724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_Init+0x28>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_Init+0x28>)
 800272e:	f043 0310 	orr.w	r3, r3, #16
 8002732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002734:	2003      	movs	r0, #3
 8002736:	f000 f923 	bl	8002980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273a:	200f      	movs	r0, #15
 800273c:	f000 f808 	bl	8002750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002740:	f7ff fbd4 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40022000 	.word	0x40022000

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x54>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_InitTick+0x58>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002766:	fbb3 f3f1 	udiv	r3, r3, r1
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f93b 	bl	80029ea <HAL_SYSTICK_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00e      	b.n	800279c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d80a      	bhi.n	800279a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f000 f903 	bl	8002996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002790:	4a06      	ldr	r2, [pc, #24]	; (80027ac <HAL_InitTick+0x5c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000028 	.word	0x20000028
 80027a8:	20000030 	.word	0x20000030
 80027ac:	2000002c 	.word	0x2000002c

080027b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_IncTick+0x1c>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_IncTick+0x20>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <HAL_IncTick+0x20>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000030 	.word	0x20000030
 80027d0:	20000410 	.word	0x20000410

080027d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <HAL_GetTick+0x10>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	20000410 	.word	0x20000410

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4906      	ldr	r1, [pc, #24]	; (8002880 <__NVIC_EnableIRQ+0x34>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	; (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	; (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800294c:	d301      	bcc.n	8002952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294e:	2301      	movs	r3, #1
 8002950:	e00f      	b.n	8002972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <SysTick_Config+0x40>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295a:	210f      	movs	r1, #15
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f7ff ff90 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <SysTick_Config+0x40>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <SysTick_Config+0x40>)
 800296c:	2207      	movs	r2, #7
 800296e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	e000e010 	.word	0xe000e010

08002980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff2d 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a8:	f7ff ff42 	bl	8002830 <__NVIC_GetPriorityGrouping>
 80029ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7ff ff90 	bl	80028d8 <NVIC_EncodePriority>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff5f 	bl	8002884 <__NVIC_SetPriority>
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff35 	bl	800284c <__NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffa2 	bl	800293c <SysTick_Config>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e020      	b.n	8002a6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 020e 	bic.w	r2, r2, #14
 8002a38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d005      	beq.n	8002a9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2204      	movs	r2, #4
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e051      	b.n	8002b3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 020e 	bic.w	r2, r2, #14
 8002aa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_DMA_Abort_IT+0xd0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d029      	beq.n	8002b18 <HAL_DMA_Abort_IT+0xa0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <HAL_DMA_Abort_IT+0xd4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d022      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x9c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_DMA_Abort_IT+0xd8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d01a      	beq.n	8002b0e <HAL_DMA_Abort_IT+0x96>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_DMA_Abort_IT+0xdc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d012      	beq.n	8002b08 <HAL_DMA_Abort_IT+0x90>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_DMA_Abort_IT+0xe0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00a      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x8a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_DMA_Abort_IT+0xe4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d102      	bne.n	8002afc <HAL_DMA_Abort_IT+0x84>
 8002af6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002afa:	e00e      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b00:	e00b      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b06:	e008      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0c:	e005      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b12:	e002      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b14:	2310      	movs	r3, #16
 8002b16:	e000      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_DMA_Abort_IT+0xe8>)
 8002b1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
    } 
  }
  return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40020008 	.word	0x40020008
 8002b4c:	4002001c 	.word	0x4002001c
 8002b50:	40020030 	.word	0x40020030
 8002b54:	40020044 	.word	0x40020044
 8002b58:	40020058 	.word	0x40020058
 8002b5c:	4002006c 	.word	0x4002006c
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b08b      	sub	sp, #44	; 0x2c
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b76:	e169      	b.n	8002e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b78:	2201      	movs	r2, #1
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8158 	bne.w	8002e46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a9a      	ldr	r2, [pc, #616]	; (8002e04 <HAL_GPIO_Init+0x2a0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d05e      	beq.n	8002c5e <HAL_GPIO_Init+0xfa>
 8002ba0:	4a98      	ldr	r2, [pc, #608]	; (8002e04 <HAL_GPIO_Init+0x2a0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d875      	bhi.n	8002c92 <HAL_GPIO_Init+0x12e>
 8002ba6:	4a98      	ldr	r2, [pc, #608]	; (8002e08 <HAL_GPIO_Init+0x2a4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d058      	beq.n	8002c5e <HAL_GPIO_Init+0xfa>
 8002bac:	4a96      	ldr	r2, [pc, #600]	; (8002e08 <HAL_GPIO_Init+0x2a4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d86f      	bhi.n	8002c92 <HAL_GPIO_Init+0x12e>
 8002bb2:	4a96      	ldr	r2, [pc, #600]	; (8002e0c <HAL_GPIO_Init+0x2a8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d052      	beq.n	8002c5e <HAL_GPIO_Init+0xfa>
 8002bb8:	4a94      	ldr	r2, [pc, #592]	; (8002e0c <HAL_GPIO_Init+0x2a8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d869      	bhi.n	8002c92 <HAL_GPIO_Init+0x12e>
 8002bbe:	4a94      	ldr	r2, [pc, #592]	; (8002e10 <HAL_GPIO_Init+0x2ac>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04c      	beq.n	8002c5e <HAL_GPIO_Init+0xfa>
 8002bc4:	4a92      	ldr	r2, [pc, #584]	; (8002e10 <HAL_GPIO_Init+0x2ac>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d863      	bhi.n	8002c92 <HAL_GPIO_Init+0x12e>
 8002bca:	4a92      	ldr	r2, [pc, #584]	; (8002e14 <HAL_GPIO_Init+0x2b0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d046      	beq.n	8002c5e <HAL_GPIO_Init+0xfa>
 8002bd0:	4a90      	ldr	r2, [pc, #576]	; (8002e14 <HAL_GPIO_Init+0x2b0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d85d      	bhi.n	8002c92 <HAL_GPIO_Init+0x12e>
 8002bd6:	2b12      	cmp	r3, #18
 8002bd8:	d82a      	bhi.n	8002c30 <HAL_GPIO_Init+0xcc>
 8002bda:	2b12      	cmp	r3, #18
 8002bdc:	d859      	bhi.n	8002c92 <HAL_GPIO_Init+0x12e>
 8002bde:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <HAL_GPIO_Init+0x80>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002c5f 	.word	0x08002c5f
 8002be8:	08002c39 	.word	0x08002c39
 8002bec:	08002c4b 	.word	0x08002c4b
 8002bf0:	08002c8d 	.word	0x08002c8d
 8002bf4:	08002c93 	.word	0x08002c93
 8002bf8:	08002c93 	.word	0x08002c93
 8002bfc:	08002c93 	.word	0x08002c93
 8002c00:	08002c93 	.word	0x08002c93
 8002c04:	08002c93 	.word	0x08002c93
 8002c08:	08002c93 	.word	0x08002c93
 8002c0c:	08002c93 	.word	0x08002c93
 8002c10:	08002c93 	.word	0x08002c93
 8002c14:	08002c93 	.word	0x08002c93
 8002c18:	08002c93 	.word	0x08002c93
 8002c1c:	08002c93 	.word	0x08002c93
 8002c20:	08002c93 	.word	0x08002c93
 8002c24:	08002c93 	.word	0x08002c93
 8002c28:	08002c41 	.word	0x08002c41
 8002c2c:	08002c55 	.word	0x08002c55
 8002c30:	4a79      	ldr	r2, [pc, #484]	; (8002e18 <HAL_GPIO_Init+0x2b4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c36:	e02c      	b.n	8002c92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	623b      	str	r3, [r7, #32]
          break;
 8002c3e:	e029      	b.n	8002c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	3304      	adds	r3, #4
 8002c46:	623b      	str	r3, [r7, #32]
          break;
 8002c48:	e024      	b.n	8002c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	3308      	adds	r3, #8
 8002c50:	623b      	str	r3, [r7, #32]
          break;
 8002c52:	e01f      	b.n	8002c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	623b      	str	r3, [r7, #32]
          break;
 8002c5c:	e01a      	b.n	8002c94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c66:	2304      	movs	r3, #4
 8002c68:	623b      	str	r3, [r7, #32]
          break;
 8002c6a:	e013      	b.n	8002c94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c74:	2308      	movs	r3, #8
 8002c76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	611a      	str	r2, [r3, #16]
          break;
 8002c7e:	e009      	b.n	8002c94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c80:	2308      	movs	r3, #8
 8002c82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	615a      	str	r2, [r3, #20]
          break;
 8002c8a:	e003      	b.n	8002c94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	623b      	str	r3, [r7, #32]
          break;
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x130>
          break;
 8002c92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2bff      	cmp	r3, #255	; 0xff
 8002c98:	d801      	bhi.n	8002c9e <HAL_GPIO_Init+0x13a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	e001      	b.n	8002ca2 <HAL_GPIO_Init+0x13e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2bff      	cmp	r3, #255	; 0xff
 8002ca8:	d802      	bhi.n	8002cb0 <HAL_GPIO_Init+0x14c>
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0x152>
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	3b08      	subs	r3, #8
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	210f      	movs	r1, #15
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80b1 	beq.w	8002e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_GPIO_Init+0x2b8>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4a4c      	ldr	r2, [pc, #304]	; (8002e1c <HAL_GPIO_Init+0x2b8>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6193      	str	r3, [r2, #24]
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <HAL_GPIO_Init+0x2b8>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cfc:	4a48      	ldr	r2, [pc, #288]	; (8002e20 <HAL_GPIO_Init+0x2bc>)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a40      	ldr	r2, [pc, #256]	; (8002e24 <HAL_GPIO_Init+0x2c0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_GPIO_Init+0x1ec>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3f      	ldr	r2, [pc, #252]	; (8002e28 <HAL_GPIO_Init+0x2c4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00d      	beq.n	8002d4c <HAL_GPIO_Init+0x1e8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a3e      	ldr	r2, [pc, #248]	; (8002e2c <HAL_GPIO_Init+0x2c8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <HAL_GPIO_Init+0x1e4>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <HAL_GPIO_Init+0x2cc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_GPIO_Init+0x1e0>
 8002d40:	2303      	movs	r3, #3
 8002d42:	e006      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d44:	2304      	movs	r3, #4
 8002d46:	e004      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e002      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d50:	2300      	movs	r3, #0
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d62:	492f      	ldr	r1, [pc, #188]	; (8002e20 <HAL_GPIO_Init+0x2bc>)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	492c      	ldr	r1, [pc, #176]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	4928      	ldr	r1, [pc, #160]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4922      	ldr	r1, [pc, #136]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	491e      	ldr	r1, [pc, #120]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4918      	ldr	r1, [pc, #96]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	4914      	ldr	r1, [pc, #80]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d021      	beq.n	8002e38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	490e      	ldr	r1, [pc, #56]	; (8002e34 <HAL_GPIO_Init+0x2d0>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
 8002e00:	e021      	b.n	8002e46 <HAL_GPIO_Init+0x2e2>
 8002e02:	bf00      	nop
 8002e04:	10320000 	.word	0x10320000
 8002e08:	10310000 	.word	0x10310000
 8002e0c:	10220000 	.word	0x10220000
 8002e10:	10210000 	.word	0x10210000
 8002e14:	10120000 	.word	0x10120000
 8002e18:	10110000 	.word	0x10110000
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40010800 	.word	0x40010800
 8002e28:	40010c00 	.word	0x40010c00
 8002e2c:	40011000 	.word	0x40011000
 8002e30:	40011400 	.word	0x40011400
 8002e34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	4909      	ldr	r1, [pc, #36]	; (8002e68 <HAL_GPIO_Init+0x304>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	3301      	adds	r3, #1
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	fa22 f303 	lsr.w	r3, r2, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f47f ae8e 	bne.w	8002b78 <HAL_GPIO_Init+0x14>
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	372c      	adds	r7, #44	; 0x2c
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	807b      	strh	r3, [r7, #2]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eaa:	787b      	ldrb	r3, [r7, #1]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb0:	887a      	ldrh	r2, [r7, #2]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eb6:	e003      	b.n	8002ec0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	041a      	lsls	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	611a      	str	r2, [r3, #16]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002edc:	887a      	ldrh	r2, [r7, #2]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	041a      	lsls	r2, r3, #16
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	400b      	ands	r3, r1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e26c      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8087 	beq.w	800302a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
 8002f34:	4b8c      	ldr	r3, [pc, #560]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x12c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e246      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x76>
 8002f64:	4b80      	ldr	r3, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7f      	ldr	r2, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xbc>
 8002f9e:	4b72      	ldr	r3, [pc, #456]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a71      	ldr	r2, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a67      	ldr	r2, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7ff fbfc 	bl	80027d4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7ff fbf8 	bl	80027d4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1fa      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe4>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7ff fbe8 	bl	80027d4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7ff fbe4 	bl	80027d4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1e6      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x10c>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d063      	beq.n	80030fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
 800304e:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1ba      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4939      	ldr	r1, [pc, #228]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e03a      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7ff fb9d 	bl	80027d4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7ff fb99 	bl	80027d4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e19b      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4927      	ldr	r1, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e015      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7ff fb7c 	bl	80027d4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e0:	f7ff fb78 	bl	80027d4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e17a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03a      	beq.n	8003180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d019      	beq.n	8003146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7ff fb5c 	bl	80027d4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7ff fb58 	bl	80027d4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e15a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800313e:	2001      	movs	r0, #1
 8003140:	f000 fad8 	bl	80036f4 <RCC_Delay>
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7ff fb42 	bl	80027d4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7ff fb3e 	bl	80027d4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d908      	bls.n	8003174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e140      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	42420000 	.word	0x42420000
 8003170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b9e      	ldr	r3, [pc, #632]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e9      	bne.n	8003154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a6 	beq.w	80032da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b97      	ldr	r3, [pc, #604]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b94      	ldr	r3, [pc, #592]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a93      	ldr	r2, [pc, #588]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b91      	ldr	r3, [pc, #580]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b8e      	ldr	r3, [pc, #568]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a8a      	ldr	r2, [pc, #552]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7ff faff 	bl	80027d4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7ff fafb 	bl	80027d4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	; 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0fd      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x312>
 8003200:	4b7b      	ldr	r3, [pc, #492]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a7a      	ldr	r2, [pc, #488]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e02d      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x334>
 8003216:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a75      	ldr	r2, [pc, #468]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a72      	ldr	r2, [pc, #456]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	e01c      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x356>
 8003238:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a6c      	ldr	r2, [pc, #432]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a66      	ldr	r2, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	4b64      	ldr	r3, [pc, #400]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a63      	ldr	r2, [pc, #396]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7ff faaf 	bl	80027d4 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7ff faab 	bl	80027d4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0ab      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ee      	beq.n	800327a <HAL_RCC_OscConfig+0x37e>
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7ff fa99 	bl	80027d4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7ff fa95 	bl	80027d4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e095      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b48      	ldr	r3, [pc, #288]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a47      	ldr	r2, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8081 	beq.w	80033e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d061      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d146      	bne.n	8003386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7ff fa69 	bl	80027d4 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7ff fa65 	bl	80027d4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e067      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800332e:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	492d      	ldr	r1, [pc, #180]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a19      	ldr	r1, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	4927      	ldr	r1, [pc, #156]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7ff fa39 	bl	80027d4 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7ff fa35 	bl	80027d4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e037      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x46a>
 8003384:	e02f      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff fa22 	bl	80027d4 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7ff fa1e 	bl	80027d4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e020      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x498>
 80033b2:	e018      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e013      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42420060 	.word	0x42420060

080033fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0d0      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b67      	ldr	r3, [pc, #412]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	4965      	ldr	r1, [pc, #404]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b8      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800347a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d040      	beq.n	800351c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d115      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e073      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e06b      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4936      	ldr	r1, [pc, #216]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ec:	f7ff f972 	bl	80027d4 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7ff f96e 	bl	80027d4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e053      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 020c 	and.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	429a      	cmp	r2, r3
 800351a:	d1eb      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d210      	bcs.n	800354c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4922      	ldr	r1, [pc, #136]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e032      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4916      	ldr	r1, [pc, #88]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358a:	f000 f821 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 800358e:	4602      	mov	r2, r0
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	490a      	ldr	r1, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	5ccb      	ldrb	r3, [r1, r3]
 800359e:	fa22 f303 	lsr.w	r3, r2, r3
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1cc>)
 80035a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1d0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f8d0 	bl	8002750 <HAL_InitTick>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40021000 	.word	0x40021000
 80035c4:	08005778 	.word	0x08005778
 80035c8:	20000028 	.word	0x20000028
 80035cc:	2000002c 	.word	0x2000002c

080035d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b490      	push	{r4, r7}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035d8:	1d3c      	adds	r4, r7, #4
 80035da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e0:	f240 2301 	movw	r3, #513	; 0x201
 80035e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x40>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x46>
 800360e:	e02d      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003612:	623b      	str	r3, [r7, #32]
      break;
 8003614:	e02d      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	0c9b      	lsrs	r3, r3, #18
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003622:	4413      	add	r3, r2
 8003624:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003628:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c5b      	lsrs	r3, r3, #17
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003642:	4413      	add	r3, r2
 8003644:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003648:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800364e:	fb02 f203 	mul.w	r2, r2, r3
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e004      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	623b      	str	r3, [r7, #32]
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	623b      	str	r3, [r7, #32]
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	6a3b      	ldr	r3, [r7, #32]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bc90      	pop	{r4, r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	08005768 	.word	0x08005768
 8003684:	40021000 	.word	0x40021000
 8003688:	007a1200 	.word	0x007a1200
 800368c:	003d0900 	.word	0x003d0900

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000028 	.word	0x20000028

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff2 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	08005788 	.word	0x08005788

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d0:	f7ff ffde 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08005788 	.word	0x08005788

080036f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <RCC_Delay+0x34>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <RCC_Delay+0x38>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a5b      	lsrs	r3, r3, #9
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003710:	bf00      	nop
  }
  while (Delay --);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	60fa      	str	r2, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f9      	bne.n	8003710 <RCC_Delay+0x1c>
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000028 	.word	0x20000028
 800372c:	10624dd3 	.word	0x10624dd3

08003730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e041      	b.n	80037c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe fbfa 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f000 fc28 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d001      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e03a      	b.n	800385e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_TIM_Base_Start_IT+0x98>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x58>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d009      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x58>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <HAL_TIM_Base_Start_IT+0x9c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x58>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_TIM_Base_Start_IT+0xa0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d010      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	e007      	b.n	800385c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800

08003874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e041      	b.n	800390a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f839 	bl	8003912 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f000 fb86 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_TIM_PWM_Start+0x24>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e022      	b.n	800398e <HAL_TIM_PWM_Start+0x6a>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d109      	bne.n	8003962 <HAL_TIM_PWM_Start+0x3e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e015      	b.n	800398e <HAL_TIM_PWM_Start+0x6a>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d109      	bne.n	800397c <HAL_TIM_PWM_Start+0x58>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e008      	b.n	800398e <HAL_TIM_PWM_Start+0x6a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e05e      	b.n	8003a54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x82>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a4:	e013      	b.n	80039ce <HAL_TIM_PWM_Start+0xaa>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_PWM_Start+0x92>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b4:	e00b      	b.n	80039ce <HAL_TIM_PWM_Start+0xaa>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xa2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c4:	e003      	b.n	80039ce <HAL_TIM_PWM_Start+0xaa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	6839      	ldr	r1, [r7, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fd74 	bl	80044c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <HAL_TIM_PWM_Start+0x138>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d107      	bne.n	80039f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_TIM_PWM_Start+0x138>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_TIM_PWM_Start+0xfa>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d009      	beq.n	8003a1e <HAL_TIM_PWM_Start+0xfa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <HAL_TIM_PWM_Start+0x13c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_TIM_PWM_Start+0xfa>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <HAL_TIM_PWM_Start+0x140>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d111      	bne.n	8003a42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b06      	cmp	r3, #6
 8003a2e:	d010      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a40:	e007      	b.n	8003a52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800

08003a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d122      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0202 	mvn.w	r2, #2
 8003a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa6f 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa62 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fa71 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d122      	bne.n	8003b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d11b      	bne.n	8003b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0204 	mvn.w	r2, #4
 8003ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa45 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa38 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fa47 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0208 	mvn.w	r2, #8
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2204      	movs	r2, #4
 8003b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa1b 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa0e 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fa1d 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0210 	mvn.w	r2, #16
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2208      	movs	r2, #8
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f9f1 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9e4 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f9f3 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0201 	mvn.w	r2, #1
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fe fb7c 	bl	80022e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b80      	cmp	r3, #128	; 0x80
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fce1 	bl	80045da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9b7 	bl	8003fb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0220 	mvn.w	r2, #32
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fcac 	bl	80045c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0ac      	b.n	8003dec <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	f200 809f 	bhi.w	8003de0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003de1 	.word	0x08003de1
 8003cb0:	08003de1 	.word	0x08003de1
 8003cb4:	08003de1 	.word	0x08003de1
 8003cb8:	08003d1d 	.word	0x08003d1d
 8003cbc:	08003de1 	.word	0x08003de1
 8003cc0:	08003de1 	.word	0x08003de1
 8003cc4:	08003de1 	.word	0x08003de1
 8003cc8:	08003d5f 	.word	0x08003d5f
 8003ccc:	08003de1 	.word	0x08003de1
 8003cd0:	08003de1 	.word	0x08003de1
 8003cd4:	08003de1 	.word	0x08003de1
 8003cd8:	08003d9f 	.word	0x08003d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f9d0 	bl	8004088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0208 	orr.w	r2, r2, #8
 8003cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0204 	bic.w	r2, r2, #4
 8003d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6999      	ldr	r1, [r3, #24]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	619a      	str	r2, [r3, #24]
      break;
 8003d1a:	e062      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fa16 	bl	8004154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	021a      	lsls	r2, r3, #8
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	619a      	str	r2, [r3, #24]
      break;
 8003d5c:	e041      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fa5f 	bl	8004228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0208 	orr.w	r2, r2, #8
 8003d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0204 	bic.w	r2, r2, #4
 8003d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	61da      	str	r2, [r3, #28]
      break;
 8003d9c:	e021      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 faa9 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	021a      	lsls	r2, r3, #8
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	61da      	str	r2, [r3, #28]
      break;
 8003dde:	e000      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_TIM_ConfigClockSource+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0b3      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x180>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e44:	d03e      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0xd0>
 8003e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4a:	f200 8087 	bhi.w	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	f000 8085 	beq.w	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d87f      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d01a      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0xa2>
 8003e60:	2b70      	cmp	r3, #112	; 0x70
 8003e62:	d87b      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d050      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x116>
 8003e68:	2b60      	cmp	r3, #96	; 0x60
 8003e6a:	d877      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e6c:	2b50      	cmp	r3, #80	; 0x50
 8003e6e:	d03c      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xf6>
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d873      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d058      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x136>
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d86f      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d064      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x156>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d86b      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d060      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x156>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d867      	bhi.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d05c      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x156>
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d05a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e94:	e062      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6899      	ldr	r1, [r3, #8]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f000 faee 	bl	8004486 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	609a      	str	r2, [r3, #8]
      break;
 8003ec2:	e04e      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6899      	ldr	r1, [r3, #8]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f000 fad7 	bl	8004486 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee6:	609a      	str	r2, [r3, #8]
      break;
 8003ee8:	e03b      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 fa4e 	bl	8004398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2150      	movs	r1, #80	; 0x50
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 faa5 	bl	8004452 <TIM_ITRx_SetConfig>
      break;
 8003f08:	e02b      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 fa6c 	bl	80043f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2160      	movs	r1, #96	; 0x60
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa95 	bl	8004452 <TIM_ITRx_SetConfig>
      break;
 8003f28:	e01b      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fa2e 	bl	8004398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2140      	movs	r1, #64	; 0x40
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fa85 	bl	8004452 <TIM_ITRx_SetConfig>
      break;
 8003f48:	e00b      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f000 fa7c 	bl	8004452 <TIM_ITRx_SetConfig>
        break;
 8003f5a:	e002      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a29      	ldr	r2, [pc, #164]	; (800407c <TIM_Base_SetConfig+0xb8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_Base_SetConfig+0xbc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x30>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <TIM_Base_SetConfig+0xc0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <TIM_Base_SetConfig+0xb8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d007      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <TIM_Base_SetConfig+0xbc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_Base_SetConfig+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a18      	ldr	r2, [pc, #96]	; (8004084 <TIM_Base_SetConfig+0xc0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <TIM_Base_SetConfig+0xb8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800

08004088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f023 0302 	bic.w	r3, r3, #2
 80040d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <TIM_OC1_SetConfig+0xc8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10c      	bne.n	80040fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0308 	bic.w	r3, r3, #8
 80040ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <TIM_OC1_SetConfig+0xc8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d111      	bne.n	800412a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00

08004154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0210 	bic.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0320 	bic.w	r3, r3, #32
 800419e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <TIM_OC2_SetConfig+0xd0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10d      	bne.n	80041d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a14      	ldr	r2, [pc, #80]	; (8004224 <TIM_OC2_SetConfig+0xd0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d113      	bne.n	8004200 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00

08004228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10d      	bne.n	80042a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d113      	bne.n	80042d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <TIM_OC4_SetConfig+0x98>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d109      	bne.n	8004370 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	40012c00 	.word	0x40012c00

08004398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0201 	bic.w	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 030a 	bic.w	r3, r3, #10
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f023 0210 	bic.w	r2, r3, #16
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800441e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	031b      	lsls	r3, r3, #12
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	f043 0307 	orr.w	r3, r3, #7
 8004474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	609a      	str	r2, [r3, #8]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004486:	b480      	push	{r7}
 8004488:	b087      	sub	sp, #28
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	021a      	lsls	r2, r3, #8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	609a      	str	r2, [r3, #8]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2201      	movs	r2, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e046      	b.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d009      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10c      	bne.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800458c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	4313      	orrs	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800

080045c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e03f      	b.n	800467e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd fd06 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fb8d 	bl	8004d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	4613      	mov	r3, r2
 8004692:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	d130      	bne.n	8004702 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_UART_Transmit_IT+0x26>
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e029      	b.n	8004704 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_UART_Transmit_IT+0x38>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e022      	b.n	8004704 <HAL_UART_Transmit_IT+0x7e>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	88fa      	ldrh	r2, [r7, #6]
 80046d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2221      	movs	r2, #33	; 0x21
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
	...

08004710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_UART_IRQHandler+0x52>
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa4f 	bl	8004bfe <UART_Receive_IT>
      return;
 8004760:	e17b      	b.n	8004a5a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80b1 	beq.w	80048cc <HAL_UART_IRQHandler+0x1bc>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <HAL_UART_IRQHandler+0x70>
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80a6 	beq.w	80048cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_UART_IRQHandler+0x90>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_UART_IRQHandler+0xb0>
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f043 0202 	orr.w	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_UART_IRQHandler+0xd0>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f043 0204 	orr.w	r2, r3, #4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00f      	beq.n	800480a <HAL_UART_IRQHandler+0xfa>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <HAL_UART_IRQHandler+0xee>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f043 0208 	orr.w	r2, r3, #8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 811e 	beq.w	8004a50 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_UART_IRQHandler+0x11e>
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9e8 	bl	8004bfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <HAL_UART_IRQHandler+0x146>
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d031      	beq.n	80048ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f92a 	bl	8004ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d023      	beq.n	80048b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004878:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	2b00      	cmp	r3, #0
 8004880:	d013      	beq.n	80048aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	4a76      	ldr	r2, [pc, #472]	; (8004a60 <HAL_UART_IRQHandler+0x350>)
 8004888:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe f8f2 	bl	8002a78 <HAL_DMA_Abort_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a4:	4610      	mov	r0, r2
 80048a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	e00e      	b.n	80048c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8ec 	bl	8004a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	e00a      	b.n	80048c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8e8 	bl	8004a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b8:	e006      	b.n	80048c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8e4 	bl	8004a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048c6:	e0c3      	b.n	8004a50 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	bf00      	nop
    return;
 80048ca:	e0c1      	b.n	8004a50 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	f040 80a1 	bne.w	8004a18 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 809b 	beq.w	8004a18 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8095 	beq.w	8004a18 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04e      	beq.n	80049b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800491c:	8a3b      	ldrh	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8098 	beq.w	8004a54 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004928:	8a3a      	ldrh	r2, [r7, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	f080 8092 	bcs.w	8004a54 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8a3a      	ldrh	r2, [r7, #16]
 8004934:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b20      	cmp	r3, #32
 800493e:	d02b      	beq.n	8004998 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800494e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0210 	bic.w	r2, r2, #16
 800498c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe f835 	bl	8002a02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f876 	bl	8004a9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049ae:	e051      	b.n	8004a54 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d047      	beq.n	8004a58 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80049c8:	8a7b      	ldrh	r3, [r7, #18]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d044      	beq.n	8004a58 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0210 	bic.w	r2, r2, #16
 8004a0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a0c:	8a7b      	ldrh	r3, [r7, #18]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f842 	bl	8004a9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a16:	e01f      	b.n	8004a58 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_UART_IRQHandler+0x324>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f87f 	bl	8004b30 <UART_Transmit_IT>
    return;
 8004a32:	e012      	b.n	8004a5a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_UART_IRQHandler+0x34a>
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f8c0 	bl	8004bce <UART_EndTransmit_IT>
    return;
 8004a4e:	e004      	b.n	8004a5a <HAL_UART_IRQHandler+0x34a>
    return;
 8004a50:	bf00      	nop
 8004a52:	e002      	b.n	8004a5a <HAL_UART_IRQHandler+0x34a>
      return;
 8004a54:	bf00      	nop
 8004a56:	e000      	b.n	8004a5a <HAL_UART_IRQHandler+0x34a>
      return;
 8004a58:	bf00      	nop
  }
}
 8004a5a:	3728      	adds	r7, #40	; 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	08004b09 	.word	0x08004b09

08004a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ac6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d107      	bne.n	8004af0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0210 	bic.w	r2, r2, #16
 8004aee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff ffb0 	bl	8004a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b21      	cmp	r3, #33	; 0x21
 8004b42:	d13e      	bne.n	8004bc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d114      	bne.n	8004b78 <UART_Transmit_IT+0x48>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d110      	bne.n	8004b78 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]
 8004b76:	e008      	b.n	8004b8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6211      	str	r1, [r2, #32]
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4619      	mov	r1, r3
 8004b98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e000      	b.n	8004bc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bc2:	2302      	movs	r3, #2
  }
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff ff38 	bl	8004a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b22      	cmp	r3, #34	; 0x22
 8004c10:	f040 8099 	bne.w	8004d46 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d117      	bne.n	8004c4e <UART_Receive_IT+0x50>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d113      	bne.n	8004c4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c4c:	e026      	b.n	8004c9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d007      	beq.n	8004c72 <UART_Receive_IT+0x74>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <UART_Receive_IT+0x82>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	e008      	b.n	8004c92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d148      	bne.n	8004d42 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0220 	bic.w	r2, r2, #32
 8004cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d123      	bne.n	8004d38 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0210 	bic.w	r2, r2, #16
 8004d04:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d10a      	bne.n	8004d2a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff feb2 	bl	8004a9a <HAL_UARTEx_RxEventCallback>
 8004d36:	e002      	b.n	8004d3e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff fe9c 	bl	8004a76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e002      	b.n	8004d48 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e000      	b.n	8004d48 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
  }
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d8a:	f023 030c 	bic.w	r3, r3, #12
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2c      	ldr	r2, [pc, #176]	; (8004e64 <UART_SetConfig+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004db8:	f7fe fc88 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	e002      	b.n	8004dc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fe fc70 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009a      	lsls	r2, r3, #2
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <UART_SetConfig+0x118>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	0119      	lsls	r1, r3, #4
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009a      	lsls	r2, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <UART_SetConfig+0x118>)
 8004dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	2064      	movs	r0, #100	; 0x64
 8004e06:	fb00 f303 	mul.w	r3, r0, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	3332      	adds	r3, #50	; 0x32
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <UART_SetConfig+0x118>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1c:	4419      	add	r1, r3
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009a      	lsls	r2, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <UART_SetConfig+0x118>)
 8004e36:	fba3 0302 	umull	r0, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2064      	movs	r0, #100	; 0x64
 8004e3e:	fb00 f303 	mul.w	r3, r0, r3
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	3332      	adds	r3, #50	; 0x32
 8004e48:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <UART_SetConfig+0x118>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	f003 020f 	and.w	r2, r3, #15
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	440a      	add	r2, r1
 8004e5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40013800 	.word	0x40013800
 8004e68:	51eb851f 	.word	0x51eb851f

08004e6c <__errno>:
 8004e6c:	4b01      	ldr	r3, [pc, #4]	; (8004e74 <__errno+0x8>)
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000034 	.word	0x20000034

08004e78 <__libc_init_array>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	2600      	movs	r6, #0
 8004e7c:	4d0c      	ldr	r5, [pc, #48]	; (8004eb0 <__libc_init_array+0x38>)
 8004e7e:	4c0d      	ldr	r4, [pc, #52]	; (8004eb4 <__libc_init_array+0x3c>)
 8004e80:	1b64      	subs	r4, r4, r5
 8004e82:	10a4      	asrs	r4, r4, #2
 8004e84:	42a6      	cmp	r6, r4
 8004e86:	d109      	bne.n	8004e9c <__libc_init_array+0x24>
 8004e88:	f000 fc5c 	bl	8005744 <_init>
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	4d0a      	ldr	r5, [pc, #40]	; (8004eb8 <__libc_init_array+0x40>)
 8004e90:	4c0a      	ldr	r4, [pc, #40]	; (8004ebc <__libc_init_array+0x44>)
 8004e92:	1b64      	subs	r4, r4, r5
 8004e94:	10a4      	asrs	r4, r4, #2
 8004e96:	42a6      	cmp	r6, r4
 8004e98:	d105      	bne.n	8004ea6 <__libc_init_array+0x2e>
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea0:	4798      	blx	r3
 8004ea2:	3601      	adds	r6, #1
 8004ea4:	e7ee      	b.n	8004e84 <__libc_init_array+0xc>
 8004ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eaa:	4798      	blx	r3
 8004eac:	3601      	adds	r6, #1
 8004eae:	e7f2      	b.n	8004e96 <__libc_init_array+0x1e>
 8004eb0:	080057c4 	.word	0x080057c4
 8004eb4:	080057c4 	.word	0x080057c4
 8004eb8:	080057c4 	.word	0x080057c4
 8004ebc:	080057c8 	.word	0x080057c8

08004ec0 <memset>:
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4402      	add	r2, r0
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d100      	bne.n	8004eca <memset+0xa>
 8004ec8:	4770      	bx	lr
 8004eca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ece:	e7f9      	b.n	8004ec4 <memset+0x4>

08004ed0 <siprintf>:
 8004ed0:	b40e      	push	{r1, r2, r3}
 8004ed2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ed6:	b500      	push	{lr}
 8004ed8:	b09c      	sub	sp, #112	; 0x70
 8004eda:	ab1d      	add	r3, sp, #116	; 0x74
 8004edc:	9002      	str	r0, [sp, #8]
 8004ede:	9006      	str	r0, [sp, #24]
 8004ee0:	9107      	str	r1, [sp, #28]
 8004ee2:	9104      	str	r1, [sp, #16]
 8004ee4:	4808      	ldr	r0, [pc, #32]	; (8004f08 <siprintf+0x38>)
 8004ee6:	4909      	ldr	r1, [pc, #36]	; (8004f0c <siprintf+0x3c>)
 8004ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eec:	9105      	str	r1, [sp, #20]
 8004eee:	6800      	ldr	r0, [r0, #0]
 8004ef0:	a902      	add	r1, sp, #8
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	f000 f868 	bl	8004fc8 <_svfiprintf_r>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	9b02      	ldr	r3, [sp, #8]
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	b01c      	add	sp, #112	; 0x70
 8004f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f04:	b003      	add	sp, #12
 8004f06:	4770      	bx	lr
 8004f08:	20000034 	.word	0x20000034
 8004f0c:	ffff0208 	.word	0xffff0208

08004f10 <__ssputs_r>:
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	688e      	ldr	r6, [r1, #8]
 8004f16:	4682      	mov	sl, r0
 8004f18:	429e      	cmp	r6, r3
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4690      	mov	r8, r2
 8004f1e:	461f      	mov	r7, r3
 8004f20:	d838      	bhi.n	8004f94 <__ssputs_r+0x84>
 8004f22:	898a      	ldrh	r2, [r1, #12]
 8004f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f28:	d032      	beq.n	8004f90 <__ssputs_r+0x80>
 8004f2a:	6825      	ldr	r5, [r4, #0]
 8004f2c:	6909      	ldr	r1, [r1, #16]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	eba5 0901 	sub.w	r9, r5, r1
 8004f34:	6965      	ldr	r5, [r4, #20]
 8004f36:	444b      	add	r3, r9
 8004f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f40:	106d      	asrs	r5, r5, #1
 8004f42:	429d      	cmp	r5, r3
 8004f44:	bf38      	it	cc
 8004f46:	461d      	movcc	r5, r3
 8004f48:	0553      	lsls	r3, r2, #21
 8004f4a:	d531      	bpl.n	8004fb0 <__ssputs_r+0xa0>
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	f000 fb53 	bl	80055f8 <_malloc_r>
 8004f52:	4606      	mov	r6, r0
 8004f54:	b950      	cbnz	r0, 8004f6c <__ssputs_r+0x5c>
 8004f56:	230c      	movs	r3, #12
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	f8ca 3000 	str.w	r3, [sl]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6c:	464a      	mov	r2, r9
 8004f6e:	6921      	ldr	r1, [r4, #16]
 8004f70:	f000 face 	bl	8005510 <memcpy>
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7e:	81a3      	strh	r3, [r4, #12]
 8004f80:	6126      	str	r6, [r4, #16]
 8004f82:	444e      	add	r6, r9
 8004f84:	6026      	str	r6, [r4, #0]
 8004f86:	463e      	mov	r6, r7
 8004f88:	6165      	str	r5, [r4, #20]
 8004f8a:	eba5 0509 	sub.w	r5, r5, r9
 8004f8e:	60a5      	str	r5, [r4, #8]
 8004f90:	42be      	cmp	r6, r7
 8004f92:	d900      	bls.n	8004f96 <__ssputs_r+0x86>
 8004f94:	463e      	mov	r6, r7
 8004f96:	4632      	mov	r2, r6
 8004f98:	4641      	mov	r1, r8
 8004f9a:	6820      	ldr	r0, [r4, #0]
 8004f9c:	f000 fac6 	bl	800552c <memmove>
 8004fa0:	68a3      	ldr	r3, [r4, #8]
 8004fa2:	6822      	ldr	r2, [r4, #0]
 8004fa4:	1b9b      	subs	r3, r3, r6
 8004fa6:	4432      	add	r2, r6
 8004fa8:	2000      	movs	r0, #0
 8004faa:	60a3      	str	r3, [r4, #8]
 8004fac:	6022      	str	r2, [r4, #0]
 8004fae:	e7db      	b.n	8004f68 <__ssputs_r+0x58>
 8004fb0:	462a      	mov	r2, r5
 8004fb2:	f000 fb7b 	bl	80056ac <_realloc_r>
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d1e1      	bne.n	8004f80 <__ssputs_r+0x70>
 8004fbc:	4650      	mov	r0, sl
 8004fbe:	6921      	ldr	r1, [r4, #16]
 8004fc0:	f000 face 	bl	8005560 <_free_r>
 8004fc4:	e7c7      	b.n	8004f56 <__ssputs_r+0x46>
	...

08004fc8 <_svfiprintf_r>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	4698      	mov	r8, r3
 8004fce:	898b      	ldrh	r3, [r1, #12]
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	460d      	mov	r5, r1
 8004fd6:	4614      	mov	r4, r2
 8004fd8:	b09d      	sub	sp, #116	; 0x74
 8004fda:	d50e      	bpl.n	8004ffa <_svfiprintf_r+0x32>
 8004fdc:	690b      	ldr	r3, [r1, #16]
 8004fde:	b963      	cbnz	r3, 8004ffa <_svfiprintf_r+0x32>
 8004fe0:	2140      	movs	r1, #64	; 0x40
 8004fe2:	f000 fb09 	bl	80055f8 <_malloc_r>
 8004fe6:	6028      	str	r0, [r5, #0]
 8004fe8:	6128      	str	r0, [r5, #16]
 8004fea:	b920      	cbnz	r0, 8004ff6 <_svfiprintf_r+0x2e>
 8004fec:	230c      	movs	r3, #12
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	e0d1      	b.n	800519a <_svfiprintf_r+0x1d2>
 8004ff6:	2340      	movs	r3, #64	; 0x40
 8004ff8:	616b      	str	r3, [r5, #20]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffe:	2320      	movs	r3, #32
 8005000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005004:	2330      	movs	r3, #48	; 0x30
 8005006:	f04f 0901 	mov.w	r9, #1
 800500a:	f8cd 800c 	str.w	r8, [sp, #12]
 800500e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051b4 <_svfiprintf_r+0x1ec>
 8005012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005016:	4623      	mov	r3, r4
 8005018:	469a      	mov	sl, r3
 800501a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800501e:	b10a      	cbz	r2, 8005024 <_svfiprintf_r+0x5c>
 8005020:	2a25      	cmp	r2, #37	; 0x25
 8005022:	d1f9      	bne.n	8005018 <_svfiprintf_r+0x50>
 8005024:	ebba 0b04 	subs.w	fp, sl, r4
 8005028:	d00b      	beq.n	8005042 <_svfiprintf_r+0x7a>
 800502a:	465b      	mov	r3, fp
 800502c:	4622      	mov	r2, r4
 800502e:	4629      	mov	r1, r5
 8005030:	4638      	mov	r0, r7
 8005032:	f7ff ff6d 	bl	8004f10 <__ssputs_r>
 8005036:	3001      	adds	r0, #1
 8005038:	f000 80aa 	beq.w	8005190 <_svfiprintf_r+0x1c8>
 800503c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800503e:	445a      	add	r2, fp
 8005040:	9209      	str	r2, [sp, #36]	; 0x24
 8005042:	f89a 3000 	ldrb.w	r3, [sl]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80a2 	beq.w	8005190 <_svfiprintf_r+0x1c8>
 800504c:	2300      	movs	r3, #0
 800504e:	f04f 32ff 	mov.w	r2, #4294967295
 8005052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005056:	f10a 0a01 	add.w	sl, sl, #1
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	9307      	str	r3, [sp, #28]
 800505e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005062:	931a      	str	r3, [sp, #104]	; 0x68
 8005064:	4654      	mov	r4, sl
 8005066:	2205      	movs	r2, #5
 8005068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506c:	4851      	ldr	r0, [pc, #324]	; (80051b4 <_svfiprintf_r+0x1ec>)
 800506e:	f000 fa41 	bl	80054f4 <memchr>
 8005072:	9a04      	ldr	r2, [sp, #16]
 8005074:	b9d8      	cbnz	r0, 80050ae <_svfiprintf_r+0xe6>
 8005076:	06d0      	lsls	r0, r2, #27
 8005078:	bf44      	itt	mi
 800507a:	2320      	movmi	r3, #32
 800507c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005080:	0711      	lsls	r1, r2, #28
 8005082:	bf44      	itt	mi
 8005084:	232b      	movmi	r3, #43	; 0x2b
 8005086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800508a:	f89a 3000 	ldrb.w	r3, [sl]
 800508e:	2b2a      	cmp	r3, #42	; 0x2a
 8005090:	d015      	beq.n	80050be <_svfiprintf_r+0xf6>
 8005092:	4654      	mov	r4, sl
 8005094:	2000      	movs	r0, #0
 8005096:	f04f 0c0a 	mov.w	ip, #10
 800509a:	9a07      	ldr	r2, [sp, #28]
 800509c:	4621      	mov	r1, r4
 800509e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a2:	3b30      	subs	r3, #48	; 0x30
 80050a4:	2b09      	cmp	r3, #9
 80050a6:	d94e      	bls.n	8005146 <_svfiprintf_r+0x17e>
 80050a8:	b1b0      	cbz	r0, 80050d8 <_svfiprintf_r+0x110>
 80050aa:	9207      	str	r2, [sp, #28]
 80050ac:	e014      	b.n	80050d8 <_svfiprintf_r+0x110>
 80050ae:	eba0 0308 	sub.w	r3, r0, r8
 80050b2:	fa09 f303 	lsl.w	r3, r9, r3
 80050b6:	4313      	orrs	r3, r2
 80050b8:	46a2      	mov	sl, r4
 80050ba:	9304      	str	r3, [sp, #16]
 80050bc:	e7d2      	b.n	8005064 <_svfiprintf_r+0x9c>
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	1d19      	adds	r1, r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9103      	str	r1, [sp, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfbb      	ittet	lt
 80050ca:	425b      	neglt	r3, r3
 80050cc:	f042 0202 	orrlt.w	r2, r2, #2
 80050d0:	9307      	strge	r3, [sp, #28]
 80050d2:	9307      	strlt	r3, [sp, #28]
 80050d4:	bfb8      	it	lt
 80050d6:	9204      	strlt	r2, [sp, #16]
 80050d8:	7823      	ldrb	r3, [r4, #0]
 80050da:	2b2e      	cmp	r3, #46	; 0x2e
 80050dc:	d10c      	bne.n	80050f8 <_svfiprintf_r+0x130>
 80050de:	7863      	ldrb	r3, [r4, #1]
 80050e0:	2b2a      	cmp	r3, #42	; 0x2a
 80050e2:	d135      	bne.n	8005150 <_svfiprintf_r+0x188>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	3402      	adds	r4, #2
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	9203      	str	r2, [sp, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfb8      	it	lt
 80050f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80050f6:	9305      	str	r3, [sp, #20]
 80050f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051c4 <_svfiprintf_r+0x1fc>
 80050fc:	2203      	movs	r2, #3
 80050fe:	4650      	mov	r0, sl
 8005100:	7821      	ldrb	r1, [r4, #0]
 8005102:	f000 f9f7 	bl	80054f4 <memchr>
 8005106:	b140      	cbz	r0, 800511a <_svfiprintf_r+0x152>
 8005108:	2340      	movs	r3, #64	; 0x40
 800510a:	eba0 000a 	sub.w	r0, r0, sl
 800510e:	fa03 f000 	lsl.w	r0, r3, r0
 8005112:	9b04      	ldr	r3, [sp, #16]
 8005114:	3401      	adds	r4, #1
 8005116:	4303      	orrs	r3, r0
 8005118:	9304      	str	r3, [sp, #16]
 800511a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511e:	2206      	movs	r2, #6
 8005120:	4825      	ldr	r0, [pc, #148]	; (80051b8 <_svfiprintf_r+0x1f0>)
 8005122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005126:	f000 f9e5 	bl	80054f4 <memchr>
 800512a:	2800      	cmp	r0, #0
 800512c:	d038      	beq.n	80051a0 <_svfiprintf_r+0x1d8>
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <_svfiprintf_r+0x1f4>)
 8005130:	bb1b      	cbnz	r3, 800517a <_svfiprintf_r+0x1b2>
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	3307      	adds	r3, #7
 8005136:	f023 0307 	bic.w	r3, r3, #7
 800513a:	3308      	adds	r3, #8
 800513c:	9303      	str	r3, [sp, #12]
 800513e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005140:	4433      	add	r3, r6
 8005142:	9309      	str	r3, [sp, #36]	; 0x24
 8005144:	e767      	b.n	8005016 <_svfiprintf_r+0x4e>
 8005146:	460c      	mov	r4, r1
 8005148:	2001      	movs	r0, #1
 800514a:	fb0c 3202 	mla	r2, ip, r2, r3
 800514e:	e7a5      	b.n	800509c <_svfiprintf_r+0xd4>
 8005150:	2300      	movs	r3, #0
 8005152:	f04f 0c0a 	mov.w	ip, #10
 8005156:	4619      	mov	r1, r3
 8005158:	3401      	adds	r4, #1
 800515a:	9305      	str	r3, [sp, #20]
 800515c:	4620      	mov	r0, r4
 800515e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005162:	3a30      	subs	r2, #48	; 0x30
 8005164:	2a09      	cmp	r2, #9
 8005166:	d903      	bls.n	8005170 <_svfiprintf_r+0x1a8>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0c5      	beq.n	80050f8 <_svfiprintf_r+0x130>
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	e7c3      	b.n	80050f8 <_svfiprintf_r+0x130>
 8005170:	4604      	mov	r4, r0
 8005172:	2301      	movs	r3, #1
 8005174:	fb0c 2101 	mla	r1, ip, r1, r2
 8005178:	e7f0      	b.n	800515c <_svfiprintf_r+0x194>
 800517a:	ab03      	add	r3, sp, #12
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	462a      	mov	r2, r5
 8005180:	4638      	mov	r0, r7
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <_svfiprintf_r+0x1f8>)
 8005184:	a904      	add	r1, sp, #16
 8005186:	f3af 8000 	nop.w
 800518a:	1c42      	adds	r2, r0, #1
 800518c:	4606      	mov	r6, r0
 800518e:	d1d6      	bne.n	800513e <_svfiprintf_r+0x176>
 8005190:	89ab      	ldrh	r3, [r5, #12]
 8005192:	065b      	lsls	r3, r3, #25
 8005194:	f53f af2c 	bmi.w	8004ff0 <_svfiprintf_r+0x28>
 8005198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800519a:	b01d      	add	sp, #116	; 0x74
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	ab03      	add	r3, sp, #12
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	462a      	mov	r2, r5
 80051a6:	4638      	mov	r0, r7
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <_svfiprintf_r+0x1f8>)
 80051aa:	a904      	add	r1, sp, #16
 80051ac:	f000 f87c 	bl	80052a8 <_printf_i>
 80051b0:	e7eb      	b.n	800518a <_svfiprintf_r+0x1c2>
 80051b2:	bf00      	nop
 80051b4:	08005790 	.word	0x08005790
 80051b8:	0800579a 	.word	0x0800579a
 80051bc:	00000000 	.word	0x00000000
 80051c0:	08004f11 	.word	0x08004f11
 80051c4:	08005796 	.word	0x08005796

080051c8 <_printf_common>:
 80051c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	4616      	mov	r6, r2
 80051ce:	4699      	mov	r9, r3
 80051d0:	688a      	ldr	r2, [r1, #8]
 80051d2:	690b      	ldr	r3, [r1, #16]
 80051d4:	4607      	mov	r7, r0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bfb8      	it	lt
 80051da:	4613      	movlt	r3, r2
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051e2:	460c      	mov	r4, r1
 80051e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051e8:	b10a      	cbz	r2, 80051ee <_printf_common+0x26>
 80051ea:	3301      	adds	r3, #1
 80051ec:	6033      	str	r3, [r6, #0]
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	0699      	lsls	r1, r3, #26
 80051f2:	bf42      	ittt	mi
 80051f4:	6833      	ldrmi	r3, [r6, #0]
 80051f6:	3302      	addmi	r3, #2
 80051f8:	6033      	strmi	r3, [r6, #0]
 80051fa:	6825      	ldr	r5, [r4, #0]
 80051fc:	f015 0506 	ands.w	r5, r5, #6
 8005200:	d106      	bne.n	8005210 <_printf_common+0x48>
 8005202:	f104 0a19 	add.w	sl, r4, #25
 8005206:	68e3      	ldr	r3, [r4, #12]
 8005208:	6832      	ldr	r2, [r6, #0]
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	42ab      	cmp	r3, r5
 800520e:	dc28      	bgt.n	8005262 <_printf_common+0x9a>
 8005210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005214:	1e13      	subs	r3, r2, #0
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	bf18      	it	ne
 800521a:	2301      	movne	r3, #1
 800521c:	0692      	lsls	r2, r2, #26
 800521e:	d42d      	bmi.n	800527c <_printf_common+0xb4>
 8005220:	4649      	mov	r1, r9
 8005222:	4638      	mov	r0, r7
 8005224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005228:	47c0      	blx	r8
 800522a:	3001      	adds	r0, #1
 800522c:	d020      	beq.n	8005270 <_printf_common+0xa8>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	68e5      	ldr	r5, [r4, #12]
 8005232:	f003 0306 	and.w	r3, r3, #6
 8005236:	2b04      	cmp	r3, #4
 8005238:	bf18      	it	ne
 800523a:	2500      	movne	r5, #0
 800523c:	6832      	ldr	r2, [r6, #0]
 800523e:	f04f 0600 	mov.w	r6, #0
 8005242:	68a3      	ldr	r3, [r4, #8]
 8005244:	bf08      	it	eq
 8005246:	1aad      	subeq	r5, r5, r2
 8005248:	6922      	ldr	r2, [r4, #16]
 800524a:	bf08      	it	eq
 800524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005250:	4293      	cmp	r3, r2
 8005252:	bfc4      	itt	gt
 8005254:	1a9b      	subgt	r3, r3, r2
 8005256:	18ed      	addgt	r5, r5, r3
 8005258:	341a      	adds	r4, #26
 800525a:	42b5      	cmp	r5, r6
 800525c:	d11a      	bne.n	8005294 <_printf_common+0xcc>
 800525e:	2000      	movs	r0, #0
 8005260:	e008      	b.n	8005274 <_printf_common+0xac>
 8005262:	2301      	movs	r3, #1
 8005264:	4652      	mov	r2, sl
 8005266:	4649      	mov	r1, r9
 8005268:	4638      	mov	r0, r7
 800526a:	47c0      	blx	r8
 800526c:	3001      	adds	r0, #1
 800526e:	d103      	bne.n	8005278 <_printf_common+0xb0>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	3501      	adds	r5, #1
 800527a:	e7c4      	b.n	8005206 <_printf_common+0x3e>
 800527c:	2030      	movs	r0, #48	; 0x30
 800527e:	18e1      	adds	r1, r4, r3
 8005280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800528a:	4422      	add	r2, r4
 800528c:	3302      	adds	r3, #2
 800528e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005292:	e7c5      	b.n	8005220 <_printf_common+0x58>
 8005294:	2301      	movs	r3, #1
 8005296:	4622      	mov	r2, r4
 8005298:	4649      	mov	r1, r9
 800529a:	4638      	mov	r0, r7
 800529c:	47c0      	blx	r8
 800529e:	3001      	adds	r0, #1
 80052a0:	d0e6      	beq.n	8005270 <_printf_common+0xa8>
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7d9      	b.n	800525a <_printf_common+0x92>
	...

080052a8 <_printf_i>:
 80052a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	460c      	mov	r4, r1
 80052ae:	7e27      	ldrb	r7, [r4, #24]
 80052b0:	4691      	mov	r9, r2
 80052b2:	2f78      	cmp	r7, #120	; 0x78
 80052b4:	4680      	mov	r8, r0
 80052b6:	469a      	mov	sl, r3
 80052b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052be:	d807      	bhi.n	80052d0 <_printf_i+0x28>
 80052c0:	2f62      	cmp	r7, #98	; 0x62
 80052c2:	d80a      	bhi.n	80052da <_printf_i+0x32>
 80052c4:	2f00      	cmp	r7, #0
 80052c6:	f000 80d9 	beq.w	800547c <_printf_i+0x1d4>
 80052ca:	2f58      	cmp	r7, #88	; 0x58
 80052cc:	f000 80a4 	beq.w	8005418 <_printf_i+0x170>
 80052d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052d8:	e03a      	b.n	8005350 <_printf_i+0xa8>
 80052da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052de:	2b15      	cmp	r3, #21
 80052e0:	d8f6      	bhi.n	80052d0 <_printf_i+0x28>
 80052e2:	a001      	add	r0, pc, #4	; (adr r0, 80052e8 <_printf_i+0x40>)
 80052e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005355 	.word	0x08005355
 80052f0:	080052d1 	.word	0x080052d1
 80052f4:	080052d1 	.word	0x080052d1
 80052f8:	080052d1 	.word	0x080052d1
 80052fc:	080052d1 	.word	0x080052d1
 8005300:	08005355 	.word	0x08005355
 8005304:	080052d1 	.word	0x080052d1
 8005308:	080052d1 	.word	0x080052d1
 800530c:	080052d1 	.word	0x080052d1
 8005310:	080052d1 	.word	0x080052d1
 8005314:	08005463 	.word	0x08005463
 8005318:	08005385 	.word	0x08005385
 800531c:	08005445 	.word	0x08005445
 8005320:	080052d1 	.word	0x080052d1
 8005324:	080052d1 	.word	0x080052d1
 8005328:	08005485 	.word	0x08005485
 800532c:	080052d1 	.word	0x080052d1
 8005330:	08005385 	.word	0x08005385
 8005334:	080052d1 	.word	0x080052d1
 8005338:	080052d1 	.word	0x080052d1
 800533c:	0800544d 	.word	0x0800544d
 8005340:	680b      	ldr	r3, [r1, #0]
 8005342:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005346:	1d1a      	adds	r2, r3, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	600a      	str	r2, [r1, #0]
 800534c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005350:	2301      	movs	r3, #1
 8005352:	e0a4      	b.n	800549e <_printf_i+0x1f6>
 8005354:	6825      	ldr	r5, [r4, #0]
 8005356:	6808      	ldr	r0, [r1, #0]
 8005358:	062e      	lsls	r6, r5, #24
 800535a:	f100 0304 	add.w	r3, r0, #4
 800535e:	d50a      	bpl.n	8005376 <_printf_i+0xce>
 8005360:	6805      	ldr	r5, [r0, #0]
 8005362:	600b      	str	r3, [r1, #0]
 8005364:	2d00      	cmp	r5, #0
 8005366:	da03      	bge.n	8005370 <_printf_i+0xc8>
 8005368:	232d      	movs	r3, #45	; 0x2d
 800536a:	426d      	negs	r5, r5
 800536c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005370:	230a      	movs	r3, #10
 8005372:	485e      	ldr	r0, [pc, #376]	; (80054ec <_printf_i+0x244>)
 8005374:	e019      	b.n	80053aa <_printf_i+0x102>
 8005376:	f015 0f40 	tst.w	r5, #64	; 0x40
 800537a:	6805      	ldr	r5, [r0, #0]
 800537c:	600b      	str	r3, [r1, #0]
 800537e:	bf18      	it	ne
 8005380:	b22d      	sxthne	r5, r5
 8005382:	e7ef      	b.n	8005364 <_printf_i+0xbc>
 8005384:	680b      	ldr	r3, [r1, #0]
 8005386:	6825      	ldr	r5, [r4, #0]
 8005388:	1d18      	adds	r0, r3, #4
 800538a:	6008      	str	r0, [r1, #0]
 800538c:	0628      	lsls	r0, r5, #24
 800538e:	d501      	bpl.n	8005394 <_printf_i+0xec>
 8005390:	681d      	ldr	r5, [r3, #0]
 8005392:	e002      	b.n	800539a <_printf_i+0xf2>
 8005394:	0669      	lsls	r1, r5, #25
 8005396:	d5fb      	bpl.n	8005390 <_printf_i+0xe8>
 8005398:	881d      	ldrh	r5, [r3, #0]
 800539a:	2f6f      	cmp	r7, #111	; 0x6f
 800539c:	bf0c      	ite	eq
 800539e:	2308      	moveq	r3, #8
 80053a0:	230a      	movne	r3, #10
 80053a2:	4852      	ldr	r0, [pc, #328]	; (80054ec <_printf_i+0x244>)
 80053a4:	2100      	movs	r1, #0
 80053a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053aa:	6866      	ldr	r6, [r4, #4]
 80053ac:	2e00      	cmp	r6, #0
 80053ae:	bfa8      	it	ge
 80053b0:	6821      	ldrge	r1, [r4, #0]
 80053b2:	60a6      	str	r6, [r4, #8]
 80053b4:	bfa4      	itt	ge
 80053b6:	f021 0104 	bicge.w	r1, r1, #4
 80053ba:	6021      	strge	r1, [r4, #0]
 80053bc:	b90d      	cbnz	r5, 80053c2 <_printf_i+0x11a>
 80053be:	2e00      	cmp	r6, #0
 80053c0:	d04d      	beq.n	800545e <_printf_i+0x1b6>
 80053c2:	4616      	mov	r6, r2
 80053c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80053c8:	fb03 5711 	mls	r7, r3, r1, r5
 80053cc:	5dc7      	ldrb	r7, [r0, r7]
 80053ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053d2:	462f      	mov	r7, r5
 80053d4:	42bb      	cmp	r3, r7
 80053d6:	460d      	mov	r5, r1
 80053d8:	d9f4      	bls.n	80053c4 <_printf_i+0x11c>
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d10b      	bne.n	80053f6 <_printf_i+0x14e>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	07df      	lsls	r7, r3, #31
 80053e2:	d508      	bpl.n	80053f6 <_printf_i+0x14e>
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	6861      	ldr	r1, [r4, #4]
 80053e8:	4299      	cmp	r1, r3
 80053ea:	bfde      	ittt	le
 80053ec:	2330      	movle	r3, #48	; 0x30
 80053ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053f6:	1b92      	subs	r2, r2, r6
 80053f8:	6122      	str	r2, [r4, #16]
 80053fa:	464b      	mov	r3, r9
 80053fc:	4621      	mov	r1, r4
 80053fe:	4640      	mov	r0, r8
 8005400:	f8cd a000 	str.w	sl, [sp]
 8005404:	aa03      	add	r2, sp, #12
 8005406:	f7ff fedf 	bl	80051c8 <_printf_common>
 800540a:	3001      	adds	r0, #1
 800540c:	d14c      	bne.n	80054a8 <_printf_i+0x200>
 800540e:	f04f 30ff 	mov.w	r0, #4294967295
 8005412:	b004      	add	sp, #16
 8005414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005418:	4834      	ldr	r0, [pc, #208]	; (80054ec <_printf_i+0x244>)
 800541a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800541e:	680e      	ldr	r6, [r1, #0]
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	f856 5b04 	ldr.w	r5, [r6], #4
 8005426:	061f      	lsls	r7, r3, #24
 8005428:	600e      	str	r6, [r1, #0]
 800542a:	d514      	bpl.n	8005456 <_printf_i+0x1ae>
 800542c:	07d9      	lsls	r1, r3, #31
 800542e:	bf44      	itt	mi
 8005430:	f043 0320 	orrmi.w	r3, r3, #32
 8005434:	6023      	strmi	r3, [r4, #0]
 8005436:	b91d      	cbnz	r5, 8005440 <_printf_i+0x198>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	f023 0320 	bic.w	r3, r3, #32
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	2310      	movs	r3, #16
 8005442:	e7af      	b.n	80053a4 <_printf_i+0xfc>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f043 0320 	orr.w	r3, r3, #32
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	2378      	movs	r3, #120	; 0x78
 800544e:	4828      	ldr	r0, [pc, #160]	; (80054f0 <_printf_i+0x248>)
 8005450:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005454:	e7e3      	b.n	800541e <_printf_i+0x176>
 8005456:	065e      	lsls	r6, r3, #25
 8005458:	bf48      	it	mi
 800545a:	b2ad      	uxthmi	r5, r5
 800545c:	e7e6      	b.n	800542c <_printf_i+0x184>
 800545e:	4616      	mov	r6, r2
 8005460:	e7bb      	b.n	80053da <_printf_i+0x132>
 8005462:	680b      	ldr	r3, [r1, #0]
 8005464:	6826      	ldr	r6, [r4, #0]
 8005466:	1d1d      	adds	r5, r3, #4
 8005468:	6960      	ldr	r0, [r4, #20]
 800546a:	600d      	str	r5, [r1, #0]
 800546c:	0635      	lsls	r5, r6, #24
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	d501      	bpl.n	8005476 <_printf_i+0x1ce>
 8005472:	6018      	str	r0, [r3, #0]
 8005474:	e002      	b.n	800547c <_printf_i+0x1d4>
 8005476:	0671      	lsls	r1, r6, #25
 8005478:	d5fb      	bpl.n	8005472 <_printf_i+0x1ca>
 800547a:	8018      	strh	r0, [r3, #0]
 800547c:	2300      	movs	r3, #0
 800547e:	4616      	mov	r6, r2
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	e7ba      	b.n	80053fa <_printf_i+0x152>
 8005484:	680b      	ldr	r3, [r1, #0]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	600a      	str	r2, [r1, #0]
 800548a:	681e      	ldr	r6, [r3, #0]
 800548c:	2100      	movs	r1, #0
 800548e:	4630      	mov	r0, r6
 8005490:	6862      	ldr	r2, [r4, #4]
 8005492:	f000 f82f 	bl	80054f4 <memchr>
 8005496:	b108      	cbz	r0, 800549c <_printf_i+0x1f4>
 8005498:	1b80      	subs	r0, r0, r6
 800549a:	6060      	str	r0, [r4, #4]
 800549c:	6863      	ldr	r3, [r4, #4]
 800549e:	6123      	str	r3, [r4, #16]
 80054a0:	2300      	movs	r3, #0
 80054a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a6:	e7a8      	b.n	80053fa <_printf_i+0x152>
 80054a8:	4632      	mov	r2, r6
 80054aa:	4649      	mov	r1, r9
 80054ac:	4640      	mov	r0, r8
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	47d0      	blx	sl
 80054b2:	3001      	adds	r0, #1
 80054b4:	d0ab      	beq.n	800540e <_printf_i+0x166>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	079b      	lsls	r3, r3, #30
 80054ba:	d413      	bmi.n	80054e4 <_printf_i+0x23c>
 80054bc:	68e0      	ldr	r0, [r4, #12]
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	4298      	cmp	r0, r3
 80054c2:	bfb8      	it	lt
 80054c4:	4618      	movlt	r0, r3
 80054c6:	e7a4      	b.n	8005412 <_printf_i+0x16a>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4632      	mov	r2, r6
 80054cc:	4649      	mov	r1, r9
 80054ce:	4640      	mov	r0, r8
 80054d0:	47d0      	blx	sl
 80054d2:	3001      	adds	r0, #1
 80054d4:	d09b      	beq.n	800540e <_printf_i+0x166>
 80054d6:	3501      	adds	r5, #1
 80054d8:	68e3      	ldr	r3, [r4, #12]
 80054da:	9903      	ldr	r1, [sp, #12]
 80054dc:	1a5b      	subs	r3, r3, r1
 80054de:	42ab      	cmp	r3, r5
 80054e0:	dcf2      	bgt.n	80054c8 <_printf_i+0x220>
 80054e2:	e7eb      	b.n	80054bc <_printf_i+0x214>
 80054e4:	2500      	movs	r5, #0
 80054e6:	f104 0619 	add.w	r6, r4, #25
 80054ea:	e7f5      	b.n	80054d8 <_printf_i+0x230>
 80054ec:	080057a1 	.word	0x080057a1
 80054f0:	080057b2 	.word	0x080057b2

080054f4 <memchr>:
 80054f4:	4603      	mov	r3, r0
 80054f6:	b510      	push	{r4, lr}
 80054f8:	b2c9      	uxtb	r1, r1
 80054fa:	4402      	add	r2, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	d101      	bne.n	8005506 <memchr+0x12>
 8005502:	2000      	movs	r0, #0
 8005504:	e003      	b.n	800550e <memchr+0x1a>
 8005506:	7804      	ldrb	r4, [r0, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	428c      	cmp	r4, r1
 800550c:	d1f6      	bne.n	80054fc <memchr+0x8>
 800550e:	bd10      	pop	{r4, pc}

08005510 <memcpy>:
 8005510:	440a      	add	r2, r1
 8005512:	4291      	cmp	r1, r2
 8005514:	f100 33ff 	add.w	r3, r0, #4294967295
 8005518:	d100      	bne.n	800551c <memcpy+0xc>
 800551a:	4770      	bx	lr
 800551c:	b510      	push	{r4, lr}
 800551e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005522:	4291      	cmp	r1, r2
 8005524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005528:	d1f9      	bne.n	800551e <memcpy+0xe>
 800552a:	bd10      	pop	{r4, pc}

0800552c <memmove>:
 800552c:	4288      	cmp	r0, r1
 800552e:	b510      	push	{r4, lr}
 8005530:	eb01 0402 	add.w	r4, r1, r2
 8005534:	d902      	bls.n	800553c <memmove+0x10>
 8005536:	4284      	cmp	r4, r0
 8005538:	4623      	mov	r3, r4
 800553a:	d807      	bhi.n	800554c <memmove+0x20>
 800553c:	1e43      	subs	r3, r0, #1
 800553e:	42a1      	cmp	r1, r4
 8005540:	d008      	beq.n	8005554 <memmove+0x28>
 8005542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800554a:	e7f8      	b.n	800553e <memmove+0x12>
 800554c:	4601      	mov	r1, r0
 800554e:	4402      	add	r2, r0
 8005550:	428a      	cmp	r2, r1
 8005552:	d100      	bne.n	8005556 <memmove+0x2a>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800555a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800555e:	e7f7      	b.n	8005550 <memmove+0x24>

08005560 <_free_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4605      	mov	r5, r0
 8005564:	2900      	cmp	r1, #0
 8005566:	d043      	beq.n	80055f0 <_free_r+0x90>
 8005568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556c:	1f0c      	subs	r4, r1, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	bfb8      	it	lt
 8005572:	18e4      	addlt	r4, r4, r3
 8005574:	f000 f8d0 	bl	8005718 <__malloc_lock>
 8005578:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <_free_r+0x94>)
 800557a:	6813      	ldr	r3, [r2, #0]
 800557c:	4610      	mov	r0, r2
 800557e:	b933      	cbnz	r3, 800558e <_free_r+0x2e>
 8005580:	6063      	str	r3, [r4, #4]
 8005582:	6014      	str	r4, [r2, #0]
 8005584:	4628      	mov	r0, r5
 8005586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800558a:	f000 b8cb 	b.w	8005724 <__malloc_unlock>
 800558e:	42a3      	cmp	r3, r4
 8005590:	d90a      	bls.n	80055a8 <_free_r+0x48>
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	1862      	adds	r2, r4, r1
 8005596:	4293      	cmp	r3, r2
 8005598:	bf01      	itttt	eq
 800559a:	681a      	ldreq	r2, [r3, #0]
 800559c:	685b      	ldreq	r3, [r3, #4]
 800559e:	1852      	addeq	r2, r2, r1
 80055a0:	6022      	streq	r2, [r4, #0]
 80055a2:	6063      	str	r3, [r4, #4]
 80055a4:	6004      	str	r4, [r0, #0]
 80055a6:	e7ed      	b.n	8005584 <_free_r+0x24>
 80055a8:	461a      	mov	r2, r3
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	b10b      	cbz	r3, 80055b2 <_free_r+0x52>
 80055ae:	42a3      	cmp	r3, r4
 80055b0:	d9fa      	bls.n	80055a8 <_free_r+0x48>
 80055b2:	6811      	ldr	r1, [r2, #0]
 80055b4:	1850      	adds	r0, r2, r1
 80055b6:	42a0      	cmp	r0, r4
 80055b8:	d10b      	bne.n	80055d2 <_free_r+0x72>
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	4401      	add	r1, r0
 80055be:	1850      	adds	r0, r2, r1
 80055c0:	4283      	cmp	r3, r0
 80055c2:	6011      	str	r1, [r2, #0]
 80055c4:	d1de      	bne.n	8005584 <_free_r+0x24>
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4401      	add	r1, r0
 80055cc:	6011      	str	r1, [r2, #0]
 80055ce:	6053      	str	r3, [r2, #4]
 80055d0:	e7d8      	b.n	8005584 <_free_r+0x24>
 80055d2:	d902      	bls.n	80055da <_free_r+0x7a>
 80055d4:	230c      	movs	r3, #12
 80055d6:	602b      	str	r3, [r5, #0]
 80055d8:	e7d4      	b.n	8005584 <_free_r+0x24>
 80055da:	6820      	ldr	r0, [r4, #0]
 80055dc:	1821      	adds	r1, r4, r0
 80055de:	428b      	cmp	r3, r1
 80055e0:	bf01      	itttt	eq
 80055e2:	6819      	ldreq	r1, [r3, #0]
 80055e4:	685b      	ldreq	r3, [r3, #4]
 80055e6:	1809      	addeq	r1, r1, r0
 80055e8:	6021      	streq	r1, [r4, #0]
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6054      	str	r4, [r2, #4]
 80055ee:	e7c9      	b.n	8005584 <_free_r+0x24>
 80055f0:	bd38      	pop	{r3, r4, r5, pc}
 80055f2:	bf00      	nop
 80055f4:	20000154 	.word	0x20000154

080055f8 <_malloc_r>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	1ccd      	adds	r5, r1, #3
 80055fc:	f025 0503 	bic.w	r5, r5, #3
 8005600:	3508      	adds	r5, #8
 8005602:	2d0c      	cmp	r5, #12
 8005604:	bf38      	it	cc
 8005606:	250c      	movcc	r5, #12
 8005608:	2d00      	cmp	r5, #0
 800560a:	4606      	mov	r6, r0
 800560c:	db01      	blt.n	8005612 <_malloc_r+0x1a>
 800560e:	42a9      	cmp	r1, r5
 8005610:	d903      	bls.n	800561a <_malloc_r+0x22>
 8005612:	230c      	movs	r3, #12
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	2000      	movs	r0, #0
 8005618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800561a:	f000 f87d 	bl	8005718 <__malloc_lock>
 800561e:	4921      	ldr	r1, [pc, #132]	; (80056a4 <_malloc_r+0xac>)
 8005620:	680a      	ldr	r2, [r1, #0]
 8005622:	4614      	mov	r4, r2
 8005624:	b99c      	cbnz	r4, 800564e <_malloc_r+0x56>
 8005626:	4f20      	ldr	r7, [pc, #128]	; (80056a8 <_malloc_r+0xb0>)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	b923      	cbnz	r3, 8005636 <_malloc_r+0x3e>
 800562c:	4621      	mov	r1, r4
 800562e:	4630      	mov	r0, r6
 8005630:	f000 f862 	bl	80056f8 <_sbrk_r>
 8005634:	6038      	str	r0, [r7, #0]
 8005636:	4629      	mov	r1, r5
 8005638:	4630      	mov	r0, r6
 800563a:	f000 f85d 	bl	80056f8 <_sbrk_r>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d123      	bne.n	800568a <_malloc_r+0x92>
 8005642:	230c      	movs	r3, #12
 8005644:	4630      	mov	r0, r6
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	f000 f86c 	bl	8005724 <__malloc_unlock>
 800564c:	e7e3      	b.n	8005616 <_malloc_r+0x1e>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	1b5b      	subs	r3, r3, r5
 8005652:	d417      	bmi.n	8005684 <_malloc_r+0x8c>
 8005654:	2b0b      	cmp	r3, #11
 8005656:	d903      	bls.n	8005660 <_malloc_r+0x68>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	441c      	add	r4, r3
 800565c:	6025      	str	r5, [r4, #0]
 800565e:	e004      	b.n	800566a <_malloc_r+0x72>
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	42a2      	cmp	r2, r4
 8005664:	bf0c      	ite	eq
 8005666:	600b      	streq	r3, [r1, #0]
 8005668:	6053      	strne	r3, [r2, #4]
 800566a:	4630      	mov	r0, r6
 800566c:	f000 f85a 	bl	8005724 <__malloc_unlock>
 8005670:	f104 000b 	add.w	r0, r4, #11
 8005674:	1d23      	adds	r3, r4, #4
 8005676:	f020 0007 	bic.w	r0, r0, #7
 800567a:	1ac2      	subs	r2, r0, r3
 800567c:	d0cc      	beq.n	8005618 <_malloc_r+0x20>
 800567e:	1a1b      	subs	r3, r3, r0
 8005680:	50a3      	str	r3, [r4, r2]
 8005682:	e7c9      	b.n	8005618 <_malloc_r+0x20>
 8005684:	4622      	mov	r2, r4
 8005686:	6864      	ldr	r4, [r4, #4]
 8005688:	e7cc      	b.n	8005624 <_malloc_r+0x2c>
 800568a:	1cc4      	adds	r4, r0, #3
 800568c:	f024 0403 	bic.w	r4, r4, #3
 8005690:	42a0      	cmp	r0, r4
 8005692:	d0e3      	beq.n	800565c <_malloc_r+0x64>
 8005694:	1a21      	subs	r1, r4, r0
 8005696:	4630      	mov	r0, r6
 8005698:	f000 f82e 	bl	80056f8 <_sbrk_r>
 800569c:	3001      	adds	r0, #1
 800569e:	d1dd      	bne.n	800565c <_malloc_r+0x64>
 80056a0:	e7cf      	b.n	8005642 <_malloc_r+0x4a>
 80056a2:	bf00      	nop
 80056a4:	20000154 	.word	0x20000154
 80056a8:	20000158 	.word	0x20000158

080056ac <_realloc_r>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	4607      	mov	r7, r0
 80056b0:	4614      	mov	r4, r2
 80056b2:	460e      	mov	r6, r1
 80056b4:	b921      	cbnz	r1, 80056c0 <_realloc_r+0x14>
 80056b6:	4611      	mov	r1, r2
 80056b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056bc:	f7ff bf9c 	b.w	80055f8 <_malloc_r>
 80056c0:	b922      	cbnz	r2, 80056cc <_realloc_r+0x20>
 80056c2:	f7ff ff4d 	bl	8005560 <_free_r>
 80056c6:	4625      	mov	r5, r4
 80056c8:	4628      	mov	r0, r5
 80056ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056cc:	f000 f830 	bl	8005730 <_malloc_usable_size_r>
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d20f      	bcs.n	80056f4 <_realloc_r+0x48>
 80056d4:	4621      	mov	r1, r4
 80056d6:	4638      	mov	r0, r7
 80056d8:	f7ff ff8e 	bl	80055f8 <_malloc_r>
 80056dc:	4605      	mov	r5, r0
 80056de:	2800      	cmp	r0, #0
 80056e0:	d0f2      	beq.n	80056c8 <_realloc_r+0x1c>
 80056e2:	4631      	mov	r1, r6
 80056e4:	4622      	mov	r2, r4
 80056e6:	f7ff ff13 	bl	8005510 <memcpy>
 80056ea:	4631      	mov	r1, r6
 80056ec:	4638      	mov	r0, r7
 80056ee:	f7ff ff37 	bl	8005560 <_free_r>
 80056f2:	e7e9      	b.n	80056c8 <_realloc_r+0x1c>
 80056f4:	4635      	mov	r5, r6
 80056f6:	e7e7      	b.n	80056c8 <_realloc_r+0x1c>

080056f8 <_sbrk_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	2300      	movs	r3, #0
 80056fc:	4d05      	ldr	r5, [pc, #20]	; (8005714 <_sbrk_r+0x1c>)
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fc fd1c 	bl	8002140 <_sbrk>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_sbrk_r+0x1a>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_sbrk_r+0x1a>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	20000414 	.word	0x20000414

08005718 <__malloc_lock>:
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <__malloc_lock+0x8>)
 800571a:	f000 b811 	b.w	8005740 <__retarget_lock_acquire_recursive>
 800571e:	bf00      	nop
 8005720:	2000041c 	.word	0x2000041c

08005724 <__malloc_unlock>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__malloc_unlock+0x8>)
 8005726:	f000 b80c 	b.w	8005742 <__retarget_lock_release_recursive>
 800572a:	bf00      	nop
 800572c:	2000041c 	.word	0x2000041c

08005730 <_malloc_usable_size_r>:
 8005730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005734:	1f18      	subs	r0, r3, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	bfbc      	itt	lt
 800573a:	580b      	ldrlt	r3, [r1, r0]
 800573c:	18c0      	addlt	r0, r0, r3
 800573e:	4770      	bx	lr

08005740 <__retarget_lock_acquire_recursive>:
 8005740:	4770      	bx	lr

08005742 <__retarget_lock_release_recursive>:
 8005742:	4770      	bx	lr

08005744 <_init>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr

08005750 <_fini>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr
