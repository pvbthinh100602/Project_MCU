
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca4  08004ca4  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004ca4  08004ca4  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ca4  08004ca4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000098  08004d44  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08004d44  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e55  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c4  00000000  00000000  00037f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0003afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d6c  00000000  00000000  0003cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133ca  00000000  00000000  0005686c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b39d  00000000  00000000  00069c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4fd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bcc  00000000  00000000  000f5028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c24 	.word	0x08004c24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004c24 	.word	0x08004c24

0800014c <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000104 	.word	0x20000104

08000180 <button_process>:

void button_process(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2b00      	cmp	r3, #0
 800018c:	db07      	blt.n	800019e <button_process+0x1e>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2b03      	cmp	r3, #3
 8000192:	dc04      	bgt.n	800019e <button_process+0x1e>
		button_flag[index] = 1;
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <button_process+0x28>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2101      	movs	r1, #1
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000104 	.word	0x20000104

080001ac <button_reading>:

void button_reading(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 80001b2:	2300      	movs	r3, #0
 80001b4:	71fb      	strb	r3, [r7, #7]
 80001b6:	e0e5      	b.n	8000384 <button_reading+0x1d8>
        //debouncing button
		debounce_buffer3[i] = debounce_buffer2[i];
 80001b8:	79fa      	ldrb	r2, [r7, #7]
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	4976      	ldr	r1, [pc, #472]	; (8000398 <button_reading+0x1ec>)
 80001be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001c2:	4976      	ldr	r1, [pc, #472]	; (800039c <button_reading+0x1f0>)
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 80001c8:	79fa      	ldrb	r2, [r7, #7]
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	4974      	ldr	r1, [pc, #464]	; (80003a0 <button_reading+0x1f4>)
 80001ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001d2:	4971      	ldr	r1, [pc, #452]	; (8000398 <button_reading+0x1ec>)
 80001d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// readpin
		//...

		if(i == 0) debounce_buffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d10b      	bne.n	80001f6 <button_reading+0x4a>
 80001de:	2101      	movs	r1, #1
 80001e0:	4870      	ldr	r0, [pc, #448]	; (80003a4 <button_reading+0x1f8>)
 80001e2:	f002 f8b3 	bl	800234c <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4611      	mov	r1, r2
 80001ee:	4a6c      	ldr	r2, [pc, #432]	; (80003a0 <button_reading+0x1f4>)
 80001f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001f4:	e02b      	b.n	800024e <button_reading+0xa2>
		else if(i == 1) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d10b      	bne.n	8000214 <button_reading+0x68>
 80001fc:	2102      	movs	r1, #2
 80001fe:	4869      	ldr	r0, [pc, #420]	; (80003a4 <button_reading+0x1f8>)
 8000200:	f002 f8a4 	bl	800234c <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4611      	mov	r1, r2
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <button_reading+0x1f4>)
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000212:	e01c      	b.n	800024e <button_reading+0xa2>
		else if(i == 2) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b02      	cmp	r3, #2
 8000218:	d10b      	bne.n	8000232 <button_reading+0x86>
 800021a:	2110      	movs	r1, #16
 800021c:	4861      	ldr	r0, [pc, #388]	; (80003a4 <button_reading+0x1f8>)
 800021e:	f002 f895 	bl	800234c <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	461a      	mov	r2, r3
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4611      	mov	r1, r2
 800022a:	4a5d      	ldr	r2, [pc, #372]	; (80003a0 <button_reading+0x1f4>)
 800022c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000230:	e00d      	b.n	800024e <button_reading+0xa2>
		else if(i == 3) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b03      	cmp	r3, #3
 8000236:	d10a      	bne.n	800024e <button_reading+0xa2>
 8000238:	2101      	movs	r1, #1
 800023a:	485b      	ldr	r0, [pc, #364]	; (80003a8 <button_reading+0x1fc>)
 800023c:	f002 f886 	bl	800234c <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	461a      	mov	r2, r3
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	4611      	mov	r1, r2
 8000248:	4a55      	ldr	r2, [pc, #340]	; (80003a0 <button_reading+0x1f4>)
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


        //process after debouncing
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4a52      	ldr	r2, [pc, #328]	; (800039c <button_reading+0x1f0>)
 8000252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	494f      	ldr	r1, [pc, #316]	; (8000398 <button_reading+0x1ec>)
 800025a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025e:	429a      	cmp	r2, r3
 8000260:	f040 8084 	bne.w	800036c <button_reading+0x1c0>
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	4a4c      	ldr	r2, [pc, #304]	; (8000398 <button_reading+0x1ec>)
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	494c      	ldr	r1, [pc, #304]	; (80003a0 <button_reading+0x1f4>)
 8000270:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000274:	429a      	cmp	r2, r3
 8000276:	d179      	bne.n	800036c <button_reading+0x1c0>
			button_buffer[i] = debounce_buffer3[i];
 8000278:	79fa      	ldrb	r2, [r7, #7]
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4947      	ldr	r1, [pc, #284]	; (800039c <button_reading+0x1f0>)
 800027e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000282:	494a      	ldr	r1, [pc, #296]	; (80003ac <button_reading+0x200>)
 8000284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// fsm for processing button
			switch(button_state[i]){
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4a49      	ldr	r2, [pc, #292]	; (80003b0 <button_reading+0x204>)
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b0d      	cmp	r3, #13
 8000292:	d043      	beq.n	800031c <button_reading+0x170>
 8000294:	2b0d      	cmp	r3, #13
 8000296:	dc6b      	bgt.n	8000370 <button_reading+0x1c4>
 8000298:	2b0b      	cmp	r3, #11
 800029a:	d002      	beq.n	80002a2 <button_reading+0xf6>
 800029c:	2b0c      	cmp	r3, #12
 800029e:	d02d      	beq.n	80002fc <button_reading+0x150>
					button_state[i] = BUTTON_IS_RELEASED;
					counter_for_button_pressed[i] = 0;
				}
				break;
			default:
				break;
 80002a0:	e066      	b.n	8000370 <button_reading+0x1c4>
				counter_for_button_pressed[i]++;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	4a43      	ldr	r2, [pc, #268]	; (80003b4 <button_reading+0x208>)
 80002a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002aa:	3201      	adds	r2, #1
 80002ac:	4941      	ldr	r1, [pc, #260]	; (80003b4 <button_reading+0x208>)
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == WAITING_TIME/TIMER_CYCLE){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4a3f      	ldr	r2, [pc, #252]	; (80003b4 <button_reading+0x208>)
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	2b64      	cmp	r3, #100	; 0x64
 80002bc:	d10d      	bne.n	80002da <button_reading+0x12e>
					button_state[i] = BUTTON_IS_LONG_PRESSED;
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <button_reading+0x204>)
 80002c2:	210d      	movs	r1, #13
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	4a3a      	ldr	r2, [pc, #232]	; (80003b4 <button_reading+0x208>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff53 	bl	8000180 <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a33      	ldr	r2, [pc, #204]	; (80003ac <button_reading+0x200>)
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d146      	bne.n	8000374 <button_reading+0x1c8>
					button_state[i] = BUTTON_IS_RELEASED;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4a31      	ldr	r2, [pc, #196]	; (80003b0 <button_reading+0x204>)
 80002ea:	210c      	movs	r1, #12
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a30      	ldr	r2, [pc, #192]	; (80003b4 <button_reading+0x208>)
 80002f4:	2100      	movs	r1, #0
 80002f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80002fa:	e03b      	b.n	8000374 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <button_reading+0x200>)
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d137      	bne.n	8000378 <button_reading+0x1cc>
					button_state[i] = BUTTON_IS_PRESSED;
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <button_reading+0x204>)
 800030c:	210b      	movs	r1, #11
 800030e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff33 	bl	8000180 <button_process>
				break;
 800031a:	e02d      	b.n	8000378 <button_reading+0x1cc>
				counter_for_button_pressed[i]++;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <button_reading+0x208>)
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	3201      	adds	r2, #1
 8000326:	4923      	ldr	r1, [pc, #140]	; (80003b4 <button_reading+0x208>)
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	4a21      	ldr	r2, [pc, #132]	; (80003b4 <button_reading+0x208>)
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b14      	cmp	r3, #20
 8000336:	d108      	bne.n	800034a <button_reading+0x19e>
					button_process(i);
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff20 	bl	8000180 <button_process>
					counter_for_button_pressed[i] = 0;
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a1c      	ldr	r2, [pc, #112]	; (80003b4 <button_reading+0x208>)
 8000344:	2100      	movs	r1, #0
 8000346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4a17      	ldr	r2, [pc, #92]	; (80003ac <button_reading+0x200>)
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d112      	bne.n	800037c <button_reading+0x1d0>
					button_state[i] = BUTTON_IS_RELEASED;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	4a15      	ldr	r2, [pc, #84]	; (80003b0 <button_reading+0x204>)
 800035a:	210c      	movs	r1, #12
 800035c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <button_reading+0x208>)
 8000364:	2100      	movs	r1, #0
 8000366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800036a:	e007      	b.n	800037c <button_reading+0x1d0>
			}
		}
 800036c:	bf00      	nop
 800036e:	e006      	b.n	800037e <button_reading+0x1d2>
				break;
 8000370:	bf00      	nop
 8000372:	e004      	b.n	800037e <button_reading+0x1d2>
				break;
 8000374:	bf00      	nop
 8000376:	e002      	b.n	800037e <button_reading+0x1d2>
				break;
 8000378:	bf00      	nop
 800037a:	e000      	b.n	800037e <button_reading+0x1d2>
				break;
 800037c:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	3301      	adds	r3, #1
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b03      	cmp	r3, #3
 8000388:	f67f af16 	bls.w	80001b8 <button_reading+0xc>
	}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000d4 	.word	0x200000d4
 800039c:	200000e4 	.word	0x200000e4
 80003a0:	200000c4 	.word	0x200000c4
 80003a4:	40010800 	.word	0x40010800
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	200000b4 	.word	0x200000b4
 80003b0:	20000000 	.word	0x20000000
 80003b4:	200000f4 	.word	0x200000f4

080003b8 <fsm_auto_run>:
 *      Author: phamv
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	switch (status)
 80003bc:	4b8b      	ldr	r3, [pc, #556]	; (80005ec <fsm_auto_run+0x234>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	f200 810f 	bhi.w	80005e6 <fsm_auto_run+0x22e>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <fsm_auto_run+0x18>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080003e5 	.word	0x080003e5
 80003d4:	08000409 	.word	0x08000409
 80003d8:	08000479 	.word	0x08000479
 80003dc:	080004f1 	.word	0x080004f1
 80003e0:	08000563 	.word	0x08000563
	{
	case INIT:
		status=AUTO_RED_GREEN;
 80003e4:	4b81      	ldr	r3, [pc, #516]	; (80005ec <fsm_auto_run+0x234>)
 80003e6:	2202      	movs	r2, #2
 80003e8:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 80003ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ee:	f001 f951 	bl	8001694 <setTimer1>
		counter = max_red1;
 80003f2:	4b7f      	ldr	r3, [pc, #508]	; (80005f0 <fsm_auto_run+0x238>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a7f      	ldr	r2, [pc, #508]	; (80005f4 <fsm_auto_run+0x23c>)
 80003f8:	6013      	str	r3, [r2, #0]
		displayCounter();
 80003fa:	f001 fbaf 	bl	8001b5c <displayCounter>
		setTraffic1Red();
 80003fe:	f001 f9eb 	bl	80017d8 <setTraffic1Red>
		setTraffic2Green();
 8000402:	f001 fa35 	bl	8001870 <setTraffic2Green>
		break;
 8000406:	e0ee      	b.n	80005e6 <fsm_auto_run+0x22e>
	case AUTO_RED_GREEN:
		if(timer1_flag == 1){
 8000408:	4b7b      	ldr	r3, [pc, #492]	; (80005f8 <fsm_auto_run+0x240>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d115      	bne.n	800043c <fsm_auto_run+0x84>
			counter--;
 8000410:	4b78      	ldr	r3, [pc, #480]	; (80005f4 <fsm_auto_run+0x23c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3b01      	subs	r3, #1
 8000416:	4a77      	ldr	r2, [pc, #476]	; (80005f4 <fsm_auto_run+0x23c>)
 8000418:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 800041a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800041e:	f001 f939 	bl	8001694 <setTimer1>
			if(counter == max_yellow2){
 8000422:	4b74      	ldr	r3, [pc, #464]	; (80005f4 <fsm_auto_run+0x23c>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b75      	ldr	r3, [pc, #468]	; (80005fc <fsm_auto_run+0x244>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	429a      	cmp	r2, r3
 800042c:	d104      	bne.n	8000438 <fsm_auto_run+0x80>
				setTraffic2Yellow();
 800042e:	f001 fa43 	bl	80018b8 <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 8000432:	4b6e      	ldr	r3, [pc, #440]	; (80005ec <fsm_auto_run+0x234>)
 8000434:	2203      	movs	r2, #3
 8000436:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000438:	f001 fb90 	bl	8001b5c <displayCounter>
		}

		if(isButtonPressed(1)){
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff fe85 	bl	800014c <isButtonPressed>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	f000 80c7 	beq.w	80005d8 <fsm_auto_run+0x220>
			isButtonPressed(2);
 800044a:	2002      	movs	r0, #2
 800044c:	f7ff fe7e 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000450:	2003      	movs	r0, #3
 8000452:	f7ff fe7b 	bl	800014c <isButtonPressed>
			status=MAN_RED_GREEN;
 8000456:	4b65      	ldr	r3, [pc, #404]	; (80005ec <fsm_auto_run+0x234>)
 8000458:	220b      	movs	r2, #11
 800045a:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 800045c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000460:	f001 f918 	bl	8001694 <setTimer1>
			setTraffic1Red();
 8000464:	f001 f9b8 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 8000468:	f001 fa02 	bl	8001870 <setTraffic2Green>
			counter = 99;
 800046c:	4b61      	ldr	r3, [pc, #388]	; (80005f4 <fsm_auto_run+0x23c>)
 800046e:	2263      	movs	r2, #99	; 0x63
 8000470:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000472:	f001 fb73 	bl	8001b5c <displayCounter>
			break;
 8000476:	e0b6      	b.n	80005e6 <fsm_auto_run+0x22e>
		}
		break;
	case AUTO_RED_YELLOW:
		if(timer1_flag == 1){
 8000478:	4b5f      	ldr	r3, [pc, #380]	; (80005f8 <fsm_auto_run+0x240>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d119      	bne.n	80004b4 <fsm_auto_run+0xfc>
			counter--;
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <fsm_auto_run+0x23c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3b01      	subs	r3, #1
 8000486:	4a5b      	ldr	r2, [pc, #364]	; (80005f4 <fsm_auto_run+0x23c>)
 8000488:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 800048a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800048e:	f001 f901 	bl	8001694 <setTimer1>
			if(counter == 0){
 8000492:	4b58      	ldr	r3, [pc, #352]	; (80005f4 <fsm_auto_run+0x23c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d10a      	bne.n	80004b0 <fsm_auto_run+0xf8>
				counter = max_green1;
 800049a:	4b59      	ldr	r3, [pc, #356]	; (8000600 <fsm_auto_run+0x248>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a55      	ldr	r2, [pc, #340]	; (80005f4 <fsm_auto_run+0x23c>)
 80004a0:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 80004a2:	f001 f9bd 	bl	8001820 <setTraffic1Green>
				setTraffic2Red();
 80004a6:	f001 f9ab 	bl	8001800 <setTraffic2Red>
				status=AUTO_GREEN_RED;
 80004aa:	4b50      	ldr	r3, [pc, #320]	; (80005ec <fsm_auto_run+0x234>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80004b0:	f001 fb54 	bl	8001b5c <displayCounter>
		}

		if(isButtonPressed(1)){
 80004b4:	2001      	movs	r0, #1
 80004b6:	f7ff fe49 	bl	800014c <isButtonPressed>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	f000 808d 	beq.w	80005dc <fsm_auto_run+0x224>
			isButtonPressed(2);
 80004c2:	2002      	movs	r0, #2
 80004c4:	f7ff fe42 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 80004c8:	2003      	movs	r0, #3
 80004ca:	f7ff fe3f 	bl	800014c <isButtonPressed>
			status=MAN_RED_GREEN;
 80004ce:	4b47      	ldr	r3, [pc, #284]	; (80005ec <fsm_auto_run+0x234>)
 80004d0:	220b      	movs	r2, #11
 80004d2:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 80004d4:	f64e 2060 	movw	r0, #60000	; 0xea60
 80004d8:	f001 f8dc 	bl	8001694 <setTimer1>
			setTraffic1Red();
 80004dc:	f001 f97c 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 80004e0:	f001 f9c6 	bl	8001870 <setTraffic2Green>
			counter = 99;
 80004e4:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <fsm_auto_run+0x23c>)
 80004e6:	2263      	movs	r2, #99	; 0x63
 80004e8:	601a      	str	r2, [r3, #0]
			displayCounter();
 80004ea:	f001 fb37 	bl	8001b5c <displayCounter>
			break;
 80004ee:	e07a      	b.n	80005e6 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_GREEN_RED:
		if(timer1_flag == 1){
 80004f0:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <fsm_auto_run+0x240>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d117      	bne.n	8000528 <fsm_auto_run+0x170>
			counter--;
 80004f8:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <fsm_auto_run+0x23c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	4a3d      	ldr	r2, [pc, #244]	; (80005f4 <fsm_auto_run+0x23c>)
 8000500:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000506:	f001 f8c5 	bl	8001694 <setTimer1>
			if(counter == 0){
 800050a:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <fsm_auto_run+0x23c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d108      	bne.n	8000524 <fsm_auto_run+0x16c>
				counter = max_yellow1;
 8000512:	4b3c      	ldr	r3, [pc, #240]	; (8000604 <fsm_auto_run+0x24c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a37      	ldr	r2, [pc, #220]	; (80005f4 <fsm_auto_run+0x23c>)
 8000518:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 800051a:	f001 f9b9 	bl	8001890 <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <fsm_auto_run+0x234>)
 8000520:	2205      	movs	r2, #5
 8000522:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000524:	f001 fb1a 	bl	8001b5c <displayCounter>
		}

		if(isButtonPressed(1)){
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe0f 	bl	800014c <isButtonPressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d055      	beq.n	80005e0 <fsm_auto_run+0x228>
			isButtonPressed(2);
 8000534:	2002      	movs	r0, #2
 8000536:	f7ff fe09 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 800053a:	2003      	movs	r0, #3
 800053c:	f7ff fe06 	bl	800014c <isButtonPressed>
			status=MAN_RED_GREEN;
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <fsm_auto_run+0x234>)
 8000542:	220b      	movs	r2, #11
 8000544:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000546:	f64e 2060 	movw	r0, #60000	; 0xea60
 800054a:	f001 f8a3 	bl	8001694 <setTimer1>
			setTraffic1Red();
 800054e:	f001 f943 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 8000552:	f001 f98d 	bl	8001870 <setTraffic2Green>
			counter = 99;
 8000556:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <fsm_auto_run+0x23c>)
 8000558:	2263      	movs	r2, #99	; 0x63
 800055a:	601a      	str	r2, [r3, #0]
			displayCounter();
 800055c:	f001 fafe 	bl	8001b5c <displayCounter>
			break;
 8000560:	e041      	b.n	80005e6 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_YELLOW_RED:

		if(timer1_flag == 1){
 8000562:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <fsm_auto_run+0x240>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d119      	bne.n	800059e <fsm_auto_run+0x1e6>
			counter--;
 800056a:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <fsm_auto_run+0x23c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <fsm_auto_run+0x23c>)
 8000572:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f001 f88c 	bl	8001694 <setTimer1>
			if(counter == 0){
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <fsm_auto_run+0x23c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10a      	bne.n	800059a <fsm_auto_run+0x1e2>
				counter = max_red1;
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <fsm_auto_run+0x238>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <fsm_auto_run+0x23c>)
 800058a:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 800058c:	f001 f924 	bl	80017d8 <setTraffic1Red>
				setTraffic2Green();
 8000590:	f001 f96e 	bl	8001870 <setTraffic2Green>
				status=AUTO_RED_GREEN;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <fsm_auto_run+0x234>)
 8000596:	2202      	movs	r2, #2
 8000598:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800059a:	f001 fadf 	bl	8001b5c <displayCounter>
		}

		if(isButtonPressed(1)==1){
 800059e:	2001      	movs	r0, #1
 80005a0:	f7ff fdd4 	bl	800014c <isButtonPressed>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d11c      	bne.n	80005e4 <fsm_auto_run+0x22c>
			isButtonPressed(2);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f7ff fdce 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f7ff fdcb 	bl	800014c <isButtonPressed>
			status=MAN_RED_GREEN;
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <fsm_auto_run+0x234>)
 80005b8:	220b      	movs	r2, #11
 80005ba:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 80005bc:	f64e 2060 	movw	r0, #60000	; 0xea60
 80005c0:	f001 f868 	bl	8001694 <setTimer1>
			setTraffic1Red();
 80005c4:	f001 f908 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 80005c8:	f001 f952 	bl	8001870 <setTraffic2Green>
			counter = 99;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <fsm_auto_run+0x23c>)
 80005ce:	2263      	movs	r2, #99	; 0x63
 80005d0:	601a      	str	r2, [r3, #0]
			displayCounter();
 80005d2:	f001 fac3 	bl	8001b5c <displayCounter>
			break;
 80005d6:	e006      	b.n	80005e6 <fsm_auto_run+0x22e>
		break;
 80005d8:	bf00      	nop
 80005da:	e004      	b.n	80005e6 <fsm_auto_run+0x22e>
		break;
 80005dc:	bf00      	nop
 80005de:	e002      	b.n	80005e6 <fsm_auto_run+0x22e>
		break;
 80005e0:	bf00      	nop
 80005e2:	e000      	b.n	80005e6 <fsm_auto_run+0x22e>
		}
		break;
 80005e4:	bf00      	nop
	}

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000118 	.word	0x20000118
 80005f0:	20000010 	.word	0x20000010
 80005f4:	20000120 	.word	0x20000120
 80005f8:	20000134 	.word	0x20000134
 80005fc:	20000024 	.word	0x20000024
 8000600:	20000014 	.word	0x20000014
 8000604:	20000018 	.word	0x20000018

08000608 <fsm_manual_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	switch (status) {
 800060c:	4b9b      	ldr	r3, [pc, #620]	; (800087c <fsm_manual_run+0x274>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b0b      	subs	r3, #11
 8000612:	2b03      	cmp	r3, #3
 8000614:	f200 8126 	bhi.w	8000864 <fsm_manual_run+0x25c>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <fsm_manual_run+0x18>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000631 	.word	0x08000631
 8000624:	080006bd 	.word	0x080006bd
 8000628:	0800074d 	.word	0x0800074d
 800062c:	080007db 	.word	0x080007db
		case MAN_RED_GREEN:
			isButtonPressed(3);
 8000630:	2003      	movs	r0, #3
 8000632:	f7ff fd8b 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 8000636:	4b92      	ldr	r3, [pc, #584]	; (8000880 <fsm_manual_run+0x278>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d010      	beq.n	8000660 <fsm_manual_run+0x58>
				status = AUTO_RED_YELLOW;
 800063e:	4b8f      	ldr	r3, [pc, #572]	; (800087c <fsm_manual_run+0x274>)
 8000640:	2203      	movs	r2, #3
 8000642:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f001 f824 	bl	8001694 <setTimer1>
				counter = max_yellow2;
 800064c:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <fsm_manual_run+0x27c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a8d      	ldr	r2, [pc, #564]	; (8000888 <fsm_manual_run+0x280>)
 8000652:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000654:	f001 fa82 	bl	8001b5c <displayCounter>
				setTraffic1Red();
 8000658:	f001 f8be 	bl	80017d8 <setTraffic1Red>
				setTraffic2Yellow();
 800065c:	f001 f92c 	bl	80018b8 <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fd73 	bl	800014c <isButtonPressed>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d014      	beq.n	8000696 <fsm_manual_run+0x8e>
				isButtonPressed(2);
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff fd6d 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 8000672:	4b82      	ldr	r3, [pc, #520]	; (800087c <fsm_manual_run+0x274>)
 8000674:	2215      	movs	r2, #21
 8000676:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f001 f80a 	bl	8001694 <setTimer1>
				counter = max_red1;
 8000680:	4b82      	ldr	r3, [pc, #520]	; (800088c <fsm_manual_run+0x284>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a80      	ldr	r2, [pc, #512]	; (8000888 <fsm_manual_run+0x280>)
 8000686:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000688:	f001 fa68 	bl	8001b5c <displayCounter>
				clearTraffic1();
 800068c:	f001 f8dc 	bl	8001848 <clearTraffic1>
				clearTraffic2();
 8000690:	f001 f922 	bl	80018d8 <clearTraffic2>
				break;
 8000694:	e0ef      	b.n	8000876 <fsm_manual_run+0x26e>
			}

			if (isButtonPressed(2)) {
 8000696:	2002      	movs	r0, #2
 8000698:	f7ff fd58 	bl	800014c <isButtonPressed>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f000 80e2 	beq.w	8000868 <fsm_manual_run+0x260>
				status = MAN_RED_YELLOW;
 80006a4:	4b75      	ldr	r3, [pc, #468]	; (800087c <fsm_manual_run+0x274>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 80006aa:	f001 f895 	bl	80017d8 <setTraffic1Red>
				setTraffic2Yellow();
 80006ae:	f001 f903 	bl	80018b8 <setTraffic2Yellow>
				setTimer1(60000);
 80006b2:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006b6:	f000 ffed 	bl	8001694 <setTimer1>
			}
			break;
 80006ba:	e0d5      	b.n	8000868 <fsm_manual_run+0x260>

		case MAN_RED_YELLOW:
			isButtonPressed(3);
 80006bc:	2003      	movs	r0, #3
 80006be:	f7ff fd45 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 80006c2:	4b6f      	ldr	r3, [pc, #444]	; (8000880 <fsm_manual_run+0x278>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d010      	beq.n	80006ec <fsm_manual_run+0xe4>
				status = AUTO_GREEN_RED;
 80006ca:	4b6c      	ldr	r3, [pc, #432]	; (800087c <fsm_manual_run+0x274>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80006d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d4:	f000 ffde 	bl	8001694 <setTimer1>
				counter = max_green1;
 80006d8:	4b6d      	ldr	r3, [pc, #436]	; (8000890 <fsm_manual_run+0x288>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a6a      	ldr	r2, [pc, #424]	; (8000888 <fsm_manual_run+0x280>)
 80006de:	6013      	str	r3, [r2, #0]
				displayCounter();
 80006e0:	f001 fa3c 	bl	8001b5c <displayCounter>
				setTraffic1Green();
 80006e4:	f001 f89c 	bl	8001820 <setTraffic1Green>
				setTraffic2Red();
 80006e8:	f001 f88a 	bl	8001800 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fd2d 	bl	800014c <isButtonPressed>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d016      	beq.n	8000726 <fsm_manual_run+0x11e>
				isButtonPressed(2);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff fd27 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 80006fe:	4b5f      	ldr	r3, [pc, #380]	; (800087c <fsm_manual_run+0x274>)
 8000700:	2215      	movs	r2, #21
 8000702:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000708:	f000 ffc4 	bl	8001694 <setTimer1>
				counter = max_red1;
 800070c:	4b5f      	ldr	r3, [pc, #380]	; (800088c <fsm_manual_run+0x284>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a5d      	ldr	r2, [pc, #372]	; (8000888 <fsm_manual_run+0x280>)
 8000712:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000714:	f001 fa22 	bl	8001b5c <displayCounter>
				clearTraffic1();
 8000718:	f001 f896 	bl	8001848 <clearTraffic1>
				clearTraffic2();
 800071c:	f001 f8dc 	bl	80018d8 <clearTraffic2>
				isButtonPressed(2);
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff fd13 	bl	800014c <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff fd10 	bl	800014c <isButtonPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	f000 809c 	beq.w	800086c <fsm_manual_run+0x264>
				status = MAN_GREEN_RED;
 8000734:	4b51      	ldr	r3, [pc, #324]	; (800087c <fsm_manual_run+0x274>)
 8000736:	220d      	movs	r2, #13
 8000738:	601a      	str	r2, [r3, #0]
				setTraffic1Green();
 800073a:	f001 f871 	bl	8001820 <setTraffic1Green>
				setTraffic2Red();
 800073e:	f001 f85f 	bl	8001800 <setTraffic2Red>
				setTimer1(60000);
 8000742:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000746:	f000 ffa5 	bl	8001694 <setTimer1>
			}


			break;
 800074a:	e08f      	b.n	800086c <fsm_manual_run+0x264>

		case MAN_GREEN_RED:
			isButtonPressed(3);
 800074c:	2003      	movs	r0, #3
 800074e:	f7ff fcfd 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 8000752:	4b4b      	ldr	r3, [pc, #300]	; (8000880 <fsm_manual_run+0x278>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d010      	beq.n	800077c <fsm_manual_run+0x174>
				status = AUTO_YELLOW_RED;
 800075a:	4b48      	ldr	r3, [pc, #288]	; (800087c <fsm_manual_run+0x274>)
 800075c:	2205      	movs	r2, #5
 800075e:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f000 ff96 	bl	8001694 <setTimer1>
				counter = max_yellow1;
 8000768:	4b4a      	ldr	r3, [pc, #296]	; (8000894 <fsm_manual_run+0x28c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a46      	ldr	r2, [pc, #280]	; (8000888 <fsm_manual_run+0x280>)
 800076e:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000770:	f001 f9f4 	bl	8001b5c <displayCounter>
				setTraffic1Yellow();
 8000774:	f001 f88c 	bl	8001890 <setTraffic1Yellow>
				setTraffic2Red();
 8000778:	f001 f842 	bl	8001800 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fce5 	bl	800014c <isButtonPressed>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d016      	beq.n	80007b6 <fsm_manual_run+0x1ae>
				isButtonPressed(2);
 8000788:	2002      	movs	r0, #2
 800078a:	f7ff fcdf 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <fsm_manual_run+0x274>)
 8000790:	2215      	movs	r2, #21
 8000792:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000798:	f000 ff7c 	bl	8001694 <setTimer1>
				counter = max_red1;
 800079c:	4b3b      	ldr	r3, [pc, #236]	; (800088c <fsm_manual_run+0x284>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a39      	ldr	r2, [pc, #228]	; (8000888 <fsm_manual_run+0x280>)
 80007a2:	6013      	str	r3, [r2, #0]
				displayCounter();
 80007a4:	f001 f9da 	bl	8001b5c <displayCounter>
				clearTraffic1();
 80007a8:	f001 f84e 	bl	8001848 <clearTraffic1>
				clearTraffic2();
 80007ac:	f001 f894 	bl	80018d8 <clearTraffic2>
				isButtonPressed(2);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f7ff fccb 	bl	800014c <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 80007b6:	2002      	movs	r0, #2
 80007b8:	f7ff fcc8 	bl	800014c <isButtonPressed>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d056      	beq.n	8000870 <fsm_manual_run+0x268>
				status = MAN_YELLOW_RED;
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <fsm_manual_run+0x274>)
 80007c4:	220e      	movs	r2, #14
 80007c6:	601a      	str	r2, [r3, #0]
				setTraffic1Yellow();
 80007c8:	f001 f862 	bl	8001890 <setTraffic1Yellow>
				setTraffic2Red();
 80007cc:	f001 f818 	bl	8001800 <setTraffic2Red>
				setTimer1(60000);
 80007d0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80007d4:	f000 ff5e 	bl	8001694 <setTimer1>
			}

			break;
 80007d8:	e04a      	b.n	8000870 <fsm_manual_run+0x268>

		case MAN_YELLOW_RED:
			isButtonPressed(3);
 80007da:	2003      	movs	r0, #3
 80007dc:	f7ff fcb6 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <fsm_manual_run+0x278>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d010      	beq.n	800080a <fsm_manual_run+0x202>
				status = AUTO_RED_GREEN;
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <fsm_manual_run+0x274>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80007ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f2:	f000 ff4f 	bl	8001694 <setTimer1>
				counter = max_red1;
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <fsm_manual_run+0x284>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <fsm_manual_run+0x280>)
 80007fc:	6013      	str	r3, [r2, #0]
				displayCounter();
 80007fe:	f001 f9ad 	bl	8001b5c <displayCounter>
				setTraffic1Red();
 8000802:	f000 ffe9 	bl	80017d8 <setTraffic1Red>
				setTraffic2Green();
 8000806:	f001 f833 	bl	8001870 <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fc9e 	bl	800014c <isButtonPressed>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d014      	beq.n	8000840 <fsm_manual_run+0x238>
				isButtonPressed(2);
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fc98 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <fsm_manual_run+0x274>)
 800081e:	2215      	movs	r2, #21
 8000820:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 ff35 	bl	8001694 <setTimer1>
				counter = max_red1;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <fsm_manual_run+0x284>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <fsm_manual_run+0x280>)
 8000830:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000832:	f001 f993 	bl	8001b5c <displayCounter>
				clearTraffic1();
 8000836:	f001 f807 	bl	8001848 <clearTraffic1>
				clearTraffic2();
 800083a:	f001 f84d 	bl	80018d8 <clearTraffic2>
				break;
 800083e:	e01a      	b.n	8000876 <fsm_manual_run+0x26e>
			}

			if (isButtonPressed(2)) {
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fc83 	bl	800014c <isButtonPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d013      	beq.n	8000874 <fsm_manual_run+0x26c>
				status = MAN_RED_GREEN;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <fsm_manual_run+0x274>)
 800084e:	220b      	movs	r2, #11
 8000850:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000852:	f000 ffc1 	bl	80017d8 <setTraffic1Red>
				setTraffic2Green();
 8000856:	f001 f80b 	bl	8001870 <setTraffic2Green>
				setTimer1(60000);
 800085a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800085e:	f000 ff19 	bl	8001694 <setTimer1>
			}


			break;
 8000862:	e007      	b.n	8000874 <fsm_manual_run+0x26c>
		default:
			break;
 8000864:	bf00      	nop
 8000866:	e006      	b.n	8000876 <fsm_manual_run+0x26e>
			break;
 8000868:	bf00      	nop
 800086a:	e004      	b.n	8000876 <fsm_manual_run+0x26e>
			break;
 800086c:	bf00      	nop
 800086e:	e002      	b.n	8000876 <fsm_manual_run+0x26e>
			break;
 8000870:	bf00      	nop
 8000872:	e000      	b.n	8000876 <fsm_manual_run+0x26e>
			break;
 8000874:	bf00      	nop
	}
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000118 	.word	0x20000118
 8000880:	20000134 	.word	0x20000134
 8000884:	20000024 	.word	0x20000024
 8000888:	20000120 	.word	0x20000120
 800088c:	20000010 	.word	0x20000010
 8000890:	20000014 	.word	0x20000014
 8000894:	20000018 	.word	0x20000018

08000898 <fsm_pedestrian_run>:

#include "fsm_pedestrian.h"

int PWM = 0;

void fsm_pedestrian_run(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 800089c:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <fsm_pedestrian_run+0x190>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	f200 80b7 	bhi.w	8000a16 <fsm_pedestrian_run+0x17e>
 80008a8:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <fsm_pedestrian_run+0x18>)
 80008aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ae:	bf00      	nop
 80008b0:	080008c1 	.word	0x080008c1
 80008b4:	080008cd 	.word	0x080008cd
 80008b8:	08000947 	.word	0x08000947
 80008bc:	0800098f 	.word	0x0800098f
		case INIT:
			clearPedestrian();
 80008c0:	f001 f842 	bl	8001948 <clearPedestrian>
			pedestrianStatus = PED_NONE;
 80008c4:	4b58      	ldr	r3, [pc, #352]	; (8000a28 <fsm_pedestrian_run+0x190>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
			break;
 80008ca:	e0ab      	b.n	8000a24 <fsm_pedestrian_run+0x18c>
		case PED_NONE:
			if(isButtonPressed(0)){
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fc3d 	bl	800014c <isButtonPressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f000 80a0 	beq.w	8000a1a <fsm_pedestrian_run+0x182>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW){
 80008da:	4b54      	ldr	r3, [pc, #336]	; (8000a2c <fsm_pedestrian_run+0x194>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d003      	beq.n	80008ea <fsm_pedestrian_run+0x52>
 80008e2:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <fsm_pedestrian_run+0x194>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d108      	bne.n	80008fc <fsm_pedestrian_run+0x64>
					pedestrianStatus = PED_GREEN;
 80008ea:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <fsm_pedestrian_run+0x190>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 80008f0:	f001 f816 	bl	8001920 <setPedestrianGreen>
					setTimer2(250);
 80008f4:	20fa      	movs	r0, #250	; 0xfa
 80008f6:	f000 fee9 	bl	80016cc <setTimer2>
 80008fa:	e023      	b.n	8000944 <fsm_pedestrian_run+0xac>
				}else if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW ){
 80008fc:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <fsm_pedestrian_run+0x194>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b0b      	cmp	r3, #11
 8000902:	d003      	beq.n	800090c <fsm_pedestrian_run+0x74>
 8000904:	4b49      	ldr	r3, [pc, #292]	; (8000a2c <fsm_pedestrian_run+0x194>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b0c      	cmp	r3, #12
 800090a:	d105      	bne.n	8000918 <fsm_pedestrian_run+0x80>
					pedestrianStatus = PED_GREEN;
 800090c:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <fsm_pedestrian_run+0x190>)
 800090e:	2204      	movs	r2, #4
 8000910:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 8000912:	f001 f805 	bl	8001920 <setPedestrianGreen>
 8000916:	e015      	b.n	8000944 <fsm_pedestrian_run+0xac>
				}
				else if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 8000918:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <fsm_pedestrian_run+0x194>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b04      	cmp	r3, #4
 800091e:	d00b      	beq.n	8000938 <fsm_pedestrian_run+0xa0>
 8000920:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <fsm_pedestrian_run+0x194>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b0d      	cmp	r3, #13
 8000926:	d007      	beq.n	8000938 <fsm_pedestrian_run+0xa0>
 8000928:	4b40      	ldr	r3, [pc, #256]	; (8000a2c <fsm_pedestrian_run+0x194>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b05      	cmp	r3, #5
 800092e:	d003      	beq.n	8000938 <fsm_pedestrian_run+0xa0>
 8000930:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <fsm_pedestrian_run+0x194>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b0e      	cmp	r3, #14
 8000936:	d170      	bne.n	8000a1a <fsm_pedestrian_run+0x182>
					pedestrianStatus = PED_RED;
 8000938:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <fsm_pedestrian_run+0x190>)
 800093a:	2203      	movs	r2, #3
 800093c:	601a      	str	r2, [r3, #0]
					setPedestrianRed();
 800093e:	f000 ffdb 	bl	80018f8 <setPedestrianRed>
				}
			}
			break;
 8000942:	e06a      	b.n	8000a1a <fsm_pedestrian_run+0x182>
 8000944:	e069      	b.n	8000a1a <fsm_pedestrian_run+0x182>
		case PED_RED:
			if(timer3_flag){
 8000946:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <fsm_pedestrian_run+0x198>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d008      	beq.n	8000960 <fsm_pedestrian_run+0xc8>
				timer3_flag = 0;
 800094e:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <fsm_pedestrian_run+0x198>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 8000954:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <fsm_pedestrian_run+0x190>)
 8000956:	2202      	movs	r2, #2
 8000958:	601a      	str	r2, [r3, #0]
				clearPedestrian();
 800095a:	f000 fff5 	bl	8001948 <clearPedestrian>
				break;
 800095e:	e061      	b.n	8000a24 <fsm_pedestrian_run+0x18c>
			}
			else if(status == AUTO_RED_GREEN){
 8000960:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <fsm_pedestrian_run+0x194>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d108      	bne.n	800097a <fsm_pedestrian_run+0xe2>
				pedestrianStatus = PED_GREEN;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <fsm_pedestrian_run+0x190>)
 800096a:	2204      	movs	r2, #4
 800096c:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 800096e:	f000 ffd7 	bl	8001920 <setPedestrianGreen>
				setTimer2(250);
 8000972:	20fa      	movs	r0, #250	; 0xfa
 8000974:	f000 feaa 	bl	80016cc <setTimer2>
			}
			else if (status == MAN_RED_GREEN){
				pedestrianStatus = PED_GREEN;
				setPedestrianGreen();
			}
			break;
 8000978:	e051      	b.n	8000a1e <fsm_pedestrian_run+0x186>
			else if (status == MAN_RED_GREEN){
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <fsm_pedestrian_run+0x194>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b0b      	cmp	r3, #11
 8000980:	d14d      	bne.n	8000a1e <fsm_pedestrian_run+0x186>
				pedestrianStatus = PED_GREEN;
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <fsm_pedestrian_run+0x190>)
 8000984:	2204      	movs	r2, #4
 8000986:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 8000988:	f000 ffca 	bl	8001920 <setPedestrianGreen>
			break;
 800098c:	e047      	b.n	8000a1e <fsm_pedestrian_run+0x186>
		case PED_GREEN:
			if(timer2_flag){
 800098e:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <fsm_pedestrian_run+0x19c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d021      	beq.n	80009da <fsm_pedestrian_run+0x142>
				if(PWM == 0){
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <fsm_pedestrian_run+0x1a0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d112      	bne.n	80009c4 <fsm_pedestrian_run+0x12c>
					PWM = 63-63*counter/max_red1;
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <fsm_pedestrian_run+0x1a4>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4613      	mov	r3, r2
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	1a9a      	subs	r2, r3, r2
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <fsm_pedestrian_run+0x1a8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80009b0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <fsm_pedestrian_run+0x1a0>)
 80009b6:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <fsm_pedestrian_run+0x1a0>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <fsm_pedestrian_run+0x1ac>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
 80009c2:	e007      	b.n	80009d4 <fsm_pedestrian_run+0x13c>
				} else {
					PWM = 0;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <fsm_pedestrian_run+0x1a0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <fsm_pedestrian_run+0x1a0>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <fsm_pedestrian_run+0x1ac>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 80009d4:	20fa      	movs	r0, #250	; 0xfa
 80009d6:	f000 fe79 	bl	80016cc <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <fsm_pedestrian_run+0x194>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d00b      	beq.n	80009fa <fsm_pedestrian_run+0x162>
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <fsm_pedestrian_run+0x194>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b0d      	cmp	r3, #13
 80009e8:	d007      	beq.n	80009fa <fsm_pedestrian_run+0x162>
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <fsm_pedestrian_run+0x194>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b05      	cmp	r3, #5
 80009f0:	d003      	beq.n	80009fa <fsm_pedestrian_run+0x162>
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <fsm_pedestrian_run+0x194>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b0e      	cmp	r3, #14
 80009f8:	d113      	bne.n	8000a22 <fsm_pedestrian_run+0x18a>
				pedestrianStatus = PED_RED;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <fsm_pedestrian_run+0x190>)
 80009fc:	2203      	movs	r2, #3
 80009fe:	601a      	str	r2, [r3, #0]
				setTimer3(2000);
 8000a00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a04:	f000 fe7e 	bl	8001704 <setTimer3>
				setPedestrianRed();
 8000a08:	f000 ff76 	bl	80018f8 <setPedestrianRed>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <fsm_pedestrian_run+0x1ac>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8000a14:	e005      	b.n	8000a22 <fsm_pedestrian_run+0x18a>
		default:
			break;
 8000a16:	bf00      	nop
 8000a18:	e004      	b.n	8000a24 <fsm_pedestrian_run+0x18c>
			break;
 8000a1a:	bf00      	nop
 8000a1c:	e002      	b.n	8000a24 <fsm_pedestrian_run+0x18c>
			break;
 8000a1e:	bf00      	nop
 8000a20:	e000      	b.n	8000a24 <fsm_pedestrian_run+0x18c>
			break;
 8000a22:	bf00      	nop
	}
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000011c 	.word	0x2000011c
 8000a2c:	20000118 	.word	0x20000118
 8000a30:	2000013c 	.word	0x2000013c
 8000a34:	20000138 	.word	0x20000138
 8000a38:	20000114 	.word	0x20000114
 8000a3c:	20000120 	.word	0x20000120
 8000a40:	20000010 	.word	0x20000010
 8000a44:	20000154 	.word	0x20000154

08000a48 <fsm_tuning_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_tuning.h"

void fsm_tuning_run(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	switch(status){
 8000a4c:	4bb6      	ldr	r3, [pc, #728]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b15      	subs	r3, #21
 8000a52:	2b05      	cmp	r3, #5
 8000a54:	f200 8276 	bhi.w	8000f44 <fsm_tuning_run+0x4fc>
 8000a58:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <fsm_tuning_run+0x18>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000a79 	.word	0x08000a79
 8000a64:	08000b3f 	.word	0x08000b3f
 8000a68:	08000c05 	.word	0x08000c05
 8000a6c:	08000ccf 	.word	0x08000ccf
 8000a70:	08000db5 	.word	0x08000db5
 8000a74:	08000e7d 	.word	0x08000e7d
	case TUNING_RED1:

		if(timer1_flag){
 8000a78:	4bac      	ldr	r3, [pc, #688]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d008      	beq.n	8000a92 <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 8000a80:	4baa      	ldr	r3, [pc, #680]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f000 fe03 	bl	8001694 <setTimer1>
			toggleTraffic1Red();
 8000a8e:	f000 ff6f 	bl	8001970 <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fb5a 	bl	800014c <isButtonPressed>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d019      	beq.n	8000ad2 <fsm_tuning_run+0x8a>
			isButtonPressed(2);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff fb54 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f7ff fb51 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000aaa:	4b9f      	ldr	r3, [pc, #636]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 8000ab0:	f000 ffa8 	bl	8001a04 <acceptTraffic1Red>
			setTimer1(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f000 fdec 	bl	8001694 <setTimer1>
			counter = max_red1;
 8000abc:	4b9c      	ldr	r3, [pc, #624]	; (8000d30 <fsm_tuning_run+0x2e8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a9c      	ldr	r2, [pc, #624]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000ac2:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000ac4:	f001 f84a 	bl	8001b5c <displayCounter>
			setTraffic1Red();
 8000ac8:	f000 fe86 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 8000acc:	f000 fed0 	bl	8001870 <setTraffic2Green>
			break;
 8000ad0:	e245      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fb3a 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fb37 	bl	800014c <isButtonPressed>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d016      	beq.n	8000b12 <fsm_tuning_run+0xca>
			isButtonPressed(3);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f7ff fb31 	bl	800014c <isButtonPressed>
			status = TUNING_RED2;
 8000aea:	4b8f      	ldr	r3, [pc, #572]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000aec:	2216      	movs	r2, #22
 8000aee:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af4:	f000 fdce 	bl	8001694 <setTimer1>
			acceptTraffic1Red();
 8000af8:	f000 ff84 	bl	8001a04 <acceptTraffic1Red>
			counter = max_red2;
 8000afc:	4b8e      	ldr	r3, [pc, #568]	; (8000d38 <fsm_tuning_run+0x2f0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a8c      	ldr	r2, [pc, #560]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000b02:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000b04:	f001 f82a 	bl	8001b5c <displayCounter>
			clearTraffic1();
 8000b08:	f000 fe9e 	bl	8001848 <clearTraffic1>
			clearTraffic2();
 8000b0c:	f000 fee4 	bl	80018d8 <clearTraffic2>
			break;
 8000b10:	e225      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000b12:	2003      	movs	r0, #3
 8000b14:	f7ff fb1a 	bl	800014c <isButtonPressed>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 8214 	beq.w	8000f48 <fsm_tuning_run+0x500>
			counter++;
 8000b20:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a83      	ldr	r2, [pc, #524]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000b28:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8000b2a:	4b82      	ldr	r3, [pc, #520]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b63      	cmp	r3, #99	; 0x63
 8000b30:	dd02      	ble.n	8000b38 <fsm_tuning_run+0xf0>
				counter = 2;
 8000b32:	4b80      	ldr	r3, [pc, #512]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000b38:	f001 f810 	bl	8001b5c <displayCounter>
		}

		break;
 8000b3c:	e204      	b.n	8000f48 <fsm_tuning_run+0x500>
	case TUNING_RED2:
		if(timer1_flag){
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <fsm_tuning_run+0x110>
			timer1_flag = 0;
 8000b46:	4b79      	ldr	r3, [pc, #484]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b50:	f000 fda0 	bl	8001694 <setTimer1>
			toggleTraffic2Red();
 8000b54:	f000 ff18 	bl	8001988 <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff faf7 	bl	800014c <isButtonPressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d019      	beq.n	8000b98 <fsm_tuning_run+0x150>
			isButtonPressed(2);
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff faf1 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f7ff faee 	bl	800014c <isButtonPressed>
			acceptTraffic2Red();
 8000b70:	f000 ff6a 	bl	8001a48 <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 8000b74:	4b6c      	ldr	r3, [pc, #432]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b7e:	f000 fd89 	bl	8001694 <setTimer1>
			counter = max_red1;
 8000b82:	4b6b      	ldr	r3, [pc, #428]	; (8000d30 <fsm_tuning_run+0x2e8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a6b      	ldr	r2, [pc, #428]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000b88:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000b8a:	f000 ffe7 	bl	8001b5c <displayCounter>
			setTraffic2Red();
 8000b8e:	f000 fe37 	bl	8001800 <setTraffic2Red>
			setTraffic2Green();
 8000b92:	f000 fe6d 	bl	8001870 <setTraffic2Green>
			break;
 8000b96:	e1e2      	b.n	8000f5e <fsm_tuning_run+0x516>
		}
		if(isButtonPressed(0)){
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fad7 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	f7ff fad4 	bl	800014c <isButtonPressed>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d016      	beq.n	8000bd8 <fsm_tuning_run+0x190>
			isButtonPressed(3);
 8000baa:	2003      	movs	r0, #3
 8000bac:	f7ff face 	bl	800014c <isButtonPressed>
			status = TUNING_GREEN1;
 8000bb0:	4b5d      	ldr	r3, [pc, #372]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000bb2:	2217      	movs	r2, #23
 8000bb4:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bba:	f000 fd6b 	bl	8001694 <setTimer1>
			acceptTraffic2Red();
 8000bbe:	f000 ff43 	bl	8001a48 <acceptTraffic2Red>
			counter = max_green1;
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <fsm_tuning_run+0x2f4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a5b      	ldr	r2, [pc, #364]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000bc8:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000bca:	f000 ffc7 	bl	8001b5c <displayCounter>
			clearTraffic1();
 8000bce:	f000 fe3b 	bl	8001848 <clearTraffic1>
			clearTraffic2();
 8000bd2:	f000 fe81 	bl	80018d8 <clearTraffic2>
			break;
 8000bd6:	e1c2      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f7ff fab7 	bl	800014c <isButtonPressed>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 81b3 	beq.w	8000f4c <fsm_tuning_run+0x504>
			counter++;
 8000be6:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000bee:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8000bf0:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b63      	cmp	r3, #99	; 0x63
 8000bf6:	dd02      	ble.n	8000bfe <fsm_tuning_run+0x1b6>
				counter = 2;
 8000bf8:	4b4e      	ldr	r3, [pc, #312]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000bfe:	f000 ffad 	bl	8001b5c <displayCounter>
		}
		break;
 8000c02:	e1a3      	b.n	8000f4c <fsm_tuning_run+0x504>
	case TUNING_GREEN1:

		if(timer1_flag){
 8000c04:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d008      	beq.n	8000c1e <fsm_tuning_run+0x1d6>
			timer1_flag = 0;
 8000c0c:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c16:	f000 fd3d 	bl	8001694 <setTimer1>
			toggleTraffic1Green();
 8000c1a:	f000 febf 	bl	800199c <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fa94 	bl	800014c <isButtonPressed>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d019      	beq.n	8000c5e <fsm_tuning_run+0x216>
			isButtonPressed(2);
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff fa8e 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f7ff fa8b 	bl	800014c <isButtonPressed>
			acceptTraffic1Green();
 8000c36:	f000 ff29 	bl	8001a8c <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 fd26 	bl	8001694 <setTimer1>
			counter = max_red1;
 8000c48:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <fsm_tuning_run+0x2e8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a39      	ldr	r2, [pc, #228]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000c4e:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000c50:	f000 ff84 	bl	8001b5c <displayCounter>
			setTraffic1Red();
 8000c54:	f000 fdc0 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 8000c58:	f000 fe0a 	bl	8001870 <setTraffic2Green>
			break;
 8000c5c:	e17f      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fa74 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff fa71 	bl	800014c <isButtonPressed>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d016      	beq.n	8000c9e <fsm_tuning_run+0x256>
			isButtonPressed(3);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff fa6b 	bl	800014c <isButtonPressed>
			status = TUNING_GREEN2;
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000c78:	2218      	movs	r2, #24
 8000c7a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c80:	f000 fd08 	bl	8001694 <setTimer1>
			acceptTraffic1Green();
 8000c84:	f000 ff02 	bl	8001a8c <acceptTraffic1Green>
			counter = max_green2;
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <fsm_tuning_run+0x2f8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000c8e:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000c90:	f000 ff64 	bl	8001b5c <displayCounter>
			clearTraffic1();
 8000c94:	f000 fdd8 	bl	8001848 <clearTraffic1>
			clearTraffic2();
 8000c98:	f000 fe1e 	bl	80018d8 <clearTraffic2>
			break;
 8000c9c:	e15f      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f7ff fa54 	bl	800014c <isButtonPressed>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 8152 	beq.w	8000f50 <fsm_tuning_run+0x508>
			counter++;
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000cb4:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <fsm_tuning_run+0x2f0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dc02      	bgt.n	8000cc8 <fsm_tuning_run+0x280>
				counter = 1;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000cc8:	f000 ff48 	bl	8001b5c <displayCounter>
		}
		break;
 8000ccc:	e140      	b.n	8000f50 <fsm_tuning_run+0x508>
	case TUNING_GREEN2:

		if(timer1_flag){
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d008      	beq.n	8000ce8 <fsm_tuning_run+0x2a0>
			timer1_flag = 0;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <fsm_tuning_run+0x2e4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce0:	f000 fcd8 	bl	8001694 <setTimer1>
			toggleTraffic2Green();
 8000ce4:	f000 fe64 	bl	80019b0 <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fa2f 	bl	800014c <isButtonPressed>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d027      	beq.n	8000d44 <fsm_tuning_run+0x2fc>
			isButtonPressed(2);
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f7ff fa29 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f7ff fa26 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <fsm_tuning_run+0x2e0>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 8000d06:	f000 fedb 	bl	8001ac0 <acceptTraffic2Green>
			setTimer1(1000);
 8000d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0e:	f000 fcc1 	bl	8001694 <setTimer1>
			counter = max_red1;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <fsm_tuning_run+0x2e8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <fsm_tuning_run+0x2ec>)
 8000d18:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000d1a:	f000 ff1f 	bl	8001b5c <displayCounter>
			setTraffic1Red();
 8000d1e:	f000 fd5b 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 8000d22:	f000 fda5 	bl	8001870 <setTraffic2Green>
			break;
 8000d26:	e11a      	b.n	8000f5e <fsm_tuning_run+0x516>
 8000d28:	20000118 	.word	0x20000118
 8000d2c:	20000134 	.word	0x20000134
 8000d30:	20000010 	.word	0x20000010
 8000d34:	20000120 	.word	0x20000120
 8000d38:	2000001c 	.word	0x2000001c
 8000d3c:	20000014 	.word	0x20000014
 8000d40:	20000020 	.word	0x20000020
		}

		if(isButtonPressed(0)){
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fa01 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f7ff f9fe 	bl	800014c <isButtonPressed>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d016      	beq.n	8000d84 <fsm_tuning_run+0x33c>
			isButtonPressed(3);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f7ff f9f8 	bl	800014c <isButtonPressed>
			status = TUNING_YELLOW1;
 8000d5c:	4b81      	ldr	r3, [pc, #516]	; (8000f64 <fsm_tuning_run+0x51c>)
 8000d5e:	2219      	movs	r2, #25
 8000d60:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000d62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d66:	f000 fc95 	bl	8001694 <setTimer1>
			acceptTraffic2Green();
 8000d6a:	f000 fea9 	bl	8001ac0 <acceptTraffic2Green>
			counter = max_yellow1;
 8000d6e:	4b7e      	ldr	r3, [pc, #504]	; (8000f68 <fsm_tuning_run+0x520>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a7e      	ldr	r2, [pc, #504]	; (8000f6c <fsm_tuning_run+0x524>)
 8000d74:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000d76:	f000 fef1 	bl	8001b5c <displayCounter>
			clearTraffic1();
 8000d7a:	f000 fd65 	bl	8001848 <clearTraffic1>
			clearTraffic2();
 8000d7e:	f000 fdab 	bl	80018d8 <clearTraffic2>
			break;
 8000d82:	e0ec      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000d84:	2003      	movs	r0, #3
 8000d86:	f7ff f9e1 	bl	800014c <isButtonPressed>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80e1 	beq.w	8000f54 <fsm_tuning_run+0x50c>
			counter++;
 8000d92:	4b76      	ldr	r3, [pc, #472]	; (8000f6c <fsm_tuning_run+0x524>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a74      	ldr	r2, [pc, #464]	; (8000f6c <fsm_tuning_run+0x524>)
 8000d9a:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8000d9c:	4b74      	ldr	r3, [pc, #464]	; (8000f70 <fsm_tuning_run+0x528>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b72      	ldr	r3, [pc, #456]	; (8000f6c <fsm_tuning_run+0x524>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dc02      	bgt.n	8000dae <fsm_tuning_run+0x366>
				counter = 1;
 8000da8:	4b70      	ldr	r3, [pc, #448]	; (8000f6c <fsm_tuning_run+0x524>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000dae:	f000 fed5 	bl	8001b5c <displayCounter>
		}
		break;
 8000db2:	e0cf      	b.n	8000f54 <fsm_tuning_run+0x50c>
	case TUNING_YELLOW1:
		if(timer1_flag){
 8000db4:	4b6f      	ldr	r3, [pc, #444]	; (8000f74 <fsm_tuning_run+0x52c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d008      	beq.n	8000dce <fsm_tuning_run+0x386>
			timer1_flag = 0;
 8000dbc:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <fsm_tuning_run+0x52c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc6:	f000 fc65 	bl	8001694 <setTimer1>
			toggleTraffic1Yellow();
 8000dca:	f000 fdfb 	bl	80019c4 <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff f9bc 	bl	800014c <isButtonPressed>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <fsm_tuning_run+0x3c6>
			isButtonPressed(2);
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f7ff f9b6 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f7ff f9b3 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000de6:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <fsm_tuning_run+0x51c>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 8000dec:	f000 fe82 	bl	8001af4 <acceptTraffic1Yellow>
			setTimer1(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df4:	f000 fc4e 	bl	8001694 <setTimer1>
			counter = max_red1;
 8000df8:	4b5d      	ldr	r3, [pc, #372]	; (8000f70 <fsm_tuning_run+0x528>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a5b      	ldr	r2, [pc, #364]	; (8000f6c <fsm_tuning_run+0x524>)
 8000dfe:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000e00:	f000 feac 	bl	8001b5c <displayCounter>
			setTraffic1Red();
 8000e04:	f000 fce8 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 8000e08:	f000 fd32 	bl	8001870 <setTraffic2Green>
			break;
 8000e0c:	e0a7      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff f99c 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff f999 	bl	800014c <isButtonPressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d016      	beq.n	8000e4e <fsm_tuning_run+0x406>
			isButtonPressed(3);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f7ff f993 	bl	800014c <isButtonPressed>
			status = TUNING_YELLOW2;
 8000e26:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <fsm_tuning_run+0x51c>)
 8000e28:	221a      	movs	r2, #26
 8000e2a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e30:	f000 fc30 	bl	8001694 <setTimer1>
			acceptTraffic1Yellow();
 8000e34:	f000 fe5e 	bl	8001af4 <acceptTraffic1Yellow>
			counter = max_yellow2;
 8000e38:	4b4f      	ldr	r3, [pc, #316]	; (8000f78 <fsm_tuning_run+0x530>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <fsm_tuning_run+0x524>)
 8000e3e:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000e40:	f000 fe8c 	bl	8001b5c <displayCounter>
			clearTraffic1();
 8000e44:	f000 fd00 	bl	8001848 <clearTraffic1>
			clearTraffic2();
 8000e48:	f000 fd46 	bl	80018d8 <clearTraffic2>
			break;
 8000e4c:	e087      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f7ff f97c 	bl	800014c <isButtonPressed>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d07e      	beq.n	8000f58 <fsm_tuning_run+0x510>
			counter++;
 8000e5a:	4b44      	ldr	r3, [pc, #272]	; (8000f6c <fsm_tuning_run+0x524>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <fsm_tuning_run+0x524>)
 8000e62:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 8000e64:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <fsm_tuning_run+0x534>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <fsm_tuning_run+0x524>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dc02      	bgt.n	8000e76 <fsm_tuning_run+0x42e>
				counter = 1;
 8000e70:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <fsm_tuning_run+0x524>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000e76:	f000 fe71 	bl	8001b5c <displayCounter>
		}
		break;
 8000e7a:	e06d      	b.n	8000f58 <fsm_tuning_run+0x510>
	case TUNING_YELLOW2:
		if(timer1_flag){
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <fsm_tuning_run+0x52c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d008      	beq.n	8000e96 <fsm_tuning_run+0x44e>
			timer1_flag = 0;
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <fsm_tuning_run+0x52c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8e:	f000 fc01 	bl	8001694 <setTimer1>
			toggleTraffic2Yellow();
 8000e92:	f000 fda9 	bl	80019e8 <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff f958 	bl	800014c <isButtonPressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d019      	beq.n	8000ed6 <fsm_tuning_run+0x48e>
			isButtonPressed(2);
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f7ff f952 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff f94f 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <fsm_tuning_run+0x51c>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 8000eb4:	f000 fe38 	bl	8001b28 <acceptTraffic2Yellow>
			setTimer1(1000);
 8000eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ebc:	f000 fbea 	bl	8001694 <setTimer1>
			counter = max_red1;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <fsm_tuning_run+0x528>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <fsm_tuning_run+0x524>)
 8000ec6:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000ec8:	f000 fe48 	bl	8001b5c <displayCounter>
			setTraffic1Red();
 8000ecc:	f000 fc84 	bl	80017d8 <setTraffic1Red>
			setTraffic2Green();
 8000ed0:	f000 fcce 	bl	8001870 <setTraffic2Green>
			break;
 8000ed4:	e043      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff f938 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000edc:	2002      	movs	r0, #2
 8000ede:	f7ff f935 	bl	800014c <isButtonPressed>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d016      	beq.n	8000f16 <fsm_tuning_run+0x4ce>
			isButtonPressed(3);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f7ff f92f 	bl	800014c <isButtonPressed>
			status = TUNING_RED1;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <fsm_tuning_run+0x51c>)
 8000ef0:	2215      	movs	r2, #21
 8000ef2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f000 fbcc 	bl	8001694 <setTimer1>
			acceptTraffic2Yellow();
 8000efc:	f000 fe14 	bl	8001b28 <acceptTraffic2Yellow>
			counter = max_red1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <fsm_tuning_run+0x528>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <fsm_tuning_run+0x524>)
 8000f06:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000f08:	f000 fe28 	bl	8001b5c <displayCounter>
			clearTraffic1();
 8000f0c:	f000 fc9c 	bl	8001848 <clearTraffic1>
			clearTraffic2();
 8000f10:	f000 fce2 	bl	80018d8 <clearTraffic2>
			break;
 8000f14:	e023      	b.n	8000f5e <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000f16:	2003      	movs	r0, #3
 8000f18:	f7ff f918 	bl	800014c <isButtonPressed>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d01c      	beq.n	8000f5c <fsm_tuning_run+0x514>
			counter++;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <fsm_tuning_run+0x524>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <fsm_tuning_run+0x524>)
 8000f2a:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <fsm_tuning_run+0x528>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <fsm_tuning_run+0x524>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dc02      	bgt.n	8000f3e <fsm_tuning_run+0x4f6>
				counter = 1;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <fsm_tuning_run+0x524>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000f3e:	f000 fe0d 	bl	8001b5c <displayCounter>
		}
		break;
 8000f42:	e00b      	b.n	8000f5c <fsm_tuning_run+0x514>
	default:
		break;
 8000f44:	bf00      	nop
 8000f46:	e00a      	b.n	8000f5e <fsm_tuning_run+0x516>
		break;
 8000f48:	bf00      	nop
 8000f4a:	e008      	b.n	8000f5e <fsm_tuning_run+0x516>
		break;
 8000f4c:	bf00      	nop
 8000f4e:	e006      	b.n	8000f5e <fsm_tuning_run+0x516>
		break;
 8000f50:	bf00      	nop
 8000f52:	e004      	b.n	8000f5e <fsm_tuning_run+0x516>
		break;
 8000f54:	bf00      	nop
 8000f56:	e002      	b.n	8000f5e <fsm_tuning_run+0x516>
		break;
 8000f58:	bf00      	nop
 8000f5a:	e000      	b.n	8000f5e <fsm_tuning_run+0x516>
		break;
 8000f5c:	bf00      	nop
	}
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000118 	.word	0x20000118
 8000f68:	20000018 	.word	0x20000018
 8000f6c:	20000120 	.word	0x20000120
 8000f70:	20000010 	.word	0x20000010
 8000f74:	20000134 	.word	0x20000134
 8000f78:	20000024 	.word	0x20000024
 8000f7c:	2000001c 	.word	0x2000001c

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f84:	f000 fe3e 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f88:	f000 f828 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8c:	f000 f954 	bl	8001238 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f90:	f000 f866 	bl	8001060 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f94:	f000 f926 	bl	80011e4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f98:	f000 f8ae 	bl	80010f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8000f9c:	f000 f9bf 	bl	800131e <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 8000fa0:	480a      	ldr	r0, [pc, #40]	; (8000fcc <main+0x4c>)
 8000fa2:	f001 fe85 	bl	8002cb0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <main+0x50>)
 8000faa:	f001 ff2b 	bl	8002e04 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <main+0x54>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <main+0x58>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_auto_run();
 8000fba:	f7ff f9fd 	bl	80003b8 <fsm_auto_run>
	  fsm_manual_run();
 8000fbe:	f7ff fb23 	bl	8000608 <fsm_manual_run>
	  fsm_tuning_run();
 8000fc2:	f7ff fd41 	bl	8000a48 <fsm_tuning_run>
	  fsm_pedestrian_run();
 8000fc6:	f7ff fc67 	bl	8000898 <fsm_pedestrian_run>
	  fsm_auto_run();
 8000fca:	e7f6      	b.n	8000fba <main+0x3a>
 8000fcc:	2000019c 	.word	0x2000019c
 8000fd0:	20000154 	.word	0x20000154
 8000fd4:	20000118 	.word	0x20000118
 8000fd8:	2000011c 	.word	0x2000011c

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b090      	sub	sp, #64	; 0x40
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2228      	movs	r2, #40	; 0x28
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 f9d8 	bl	80043a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001006:	2310      	movs	r3, #16
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800100e:	2300      	movs	r3, #0
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001012:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	4618      	mov	r0, r3
 800101e:	f001 f9dd 	bl	80023dc <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001028:	f000 f974 	bl	8001314 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2102      	movs	r1, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fc48 	bl	80028dc <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001052:	f000 f95f 	bl	8001314 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3740      	adds	r7, #64	; 0x40
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM2_Init+0x94>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001086:	f242 720f 	movw	r2, #9999	; 0x270f
 800108a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001094:	223f      	movs	r2, #63	; 0x3f
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a6:	f001 fdb3 	bl	8002c10 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b0:	f000 f930 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010c2:	f002 f907 	bl	80032d4 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f922 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010de:	f002 fc85 	bl	80039ec <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 f914 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000019c 	.word	0x2000019c

080010f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001128:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <MX_TIM3_Init+0xe4>)
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <MX_TIM3_Init+0xe8>)
 800112c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001130:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001134:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_TIM3_Init+0xe4>)
 800113e:	223f      	movs	r2, #63	; 0x3f
 8001140:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_TIM3_Init+0xe4>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114e:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001150:	f001 fd5e 	bl	8002c10 <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800115a:	f000 f8db 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001168:	4619      	mov	r1, r3
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_TIM3_Init+0xe4>)
 800116c:	f002 f8b2 	bl	80032d4 <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001176:	f000 f8cd 	bl	8001314 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_TIM3_Init+0xe4>)
 800117c:	f001 fdea 	bl	8002d54 <HAL_TIM_PWM_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001186:	f000 f8c5 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_TIM3_Init+0xe4>)
 800119a:	f002 fc27 	bl	80039ec <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011a4:	f000 f8b6 	bl	8001314 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a8:	2360      	movs	r3, #96	; 0x60
 80011aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <MX_TIM3_Init+0xe4>)
 80011c0:	f001 ffca 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ca:	f000 f8a3 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM3_Init+0xe4>)
 80011d0:	f000 f964 	bl	800149c <HAL_TIM_MspPostInit>

}
 80011d4:	bf00      	nop
 80011d6:	3738      	adds	r7, #56	; 0x38
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000154 	.word	0x20000154
 80011e0:	40000400 	.word	0x40000400

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f002 fc56 	bl	8003acc <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f875 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001e4 	.word	0x200001e4
 8001234:	40004400 	.word	0x40004400

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <MX_GPIO_Init+0xd0>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <MX_GPIO_Init+0xd0>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <MX_GPIO_Init+0xd0>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <MX_GPIO_Init+0xd0>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <MX_GPIO_Init+0xd0>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <MX_GPIO_Init+0xd0>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001282:	4822      	ldr	r0, [pc, #136]	; (800130c <MX_GPIO_Init+0xd4>)
 8001284:	f001 f879 	bl	800237a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800128e:	4820      	ldr	r0, [pc, #128]	; (8001310 <MX_GPIO_Init+0xd8>)
 8001290:	f001 f873 	bl	800237a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8001294:	2313      	movs	r3, #19
 8001296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4619      	mov	r1, r3
 80012a6:	481a      	ldr	r0, [pc, #104]	; (8001310 <MX_GPIO_Init+0xd8>)
 80012a8:	f000 fecc 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 80012ac:	2301      	movs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4619      	mov	r1, r3
 80012be:	4813      	ldr	r0, [pc, #76]	; (800130c <MX_GPIO_Init+0xd4>)
 80012c0:	f000 fec0 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 80012c4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80012c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2302      	movs	r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <MX_GPIO_Init+0xd4>)
 80012de:	f000 feb1 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 80012e2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_GPIO_Init+0xd8>)
 80012fc:	f000 fea2 	bl	8002044 <HAL_GPIO_Init>

}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40010800 	.word	0x40010800

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>

0800131e <SCH_Init>:
 */
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001324:	2300      	movs	r3, #0
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	e006      	b.n	8001338 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f80b 	bl	8001348 <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3301      	adds	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b27      	cmp	r3, #39	; 0x27
 800133c:	d9f5      	bls.n	800132a <SCH_Init+0xc>
	}
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <SCH_Delete_Task>:
		}
	}
	SCH_Go_To_Sleep();
}

uint8_t SCH_Delete_Task(uint32_t index){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 8001350:	491c      	ldr	r1, [pc, #112]	; (80013c4 <SCH_Delete_Task+0x7c>)
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <SCH_Delete_Task+0x20>
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e027      	b.n	80013b8 <SCH_Delete_Task+0x70>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8001368:	4916      	ldr	r1, [pc, #88]	; (80013c4 <SCH_Delete_Task+0x7c>)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <SCH_Delete_Task+0x7c>)
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	3304      	adds	r3, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 800138e:	490d      	ldr	r1, [pc, #52]	; (80013c4 <SCH_Delete_Task+0x7c>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3308      	adds	r3, #8
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <SCH_Delete_Task+0x7c>)
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	330c      	adds	r3, #12
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		return 1;
 80013b6:	2301      	movs	r3, #1
	}
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000228 	.word	0x20000228

080013c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_MspInit+0x5c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MspInit+0x5c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_MspInit+0x60>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_MspInit+0x60>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000

0800142c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800143c:	d114      	bne.n	8001468 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_TIM_Base_MspInit+0x68>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_TIM_Base_MspInit+0x68>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_TIM_Base_MspInit+0x68>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	201c      	movs	r0, #28
 800145c:	f000 fd0b 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001460:	201c      	movs	r0, #28
 8001462:	f000 fd24 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001466:	e010      	b.n	800148a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_TIM_Base_MspInit+0x6c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10b      	bne.n	800148a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_TIM_Base_MspInit+0x68>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_TIM_Base_MspInit+0x68>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_TIM_Base_MspInit+0x68>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	40000400 	.word	0x40000400

0800149c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <HAL_TIM_MspPostInit+0x58>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d117      	bne.n	80014ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_TIM_MspPostInit+0x5c>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <HAL_TIM_MspPostInit+0x5c>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_TIM_MspPostInit+0x5c>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_TIM_MspPostInit+0x60>)
 80014e8:	f000 fdac 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40000400 	.word	0x40000400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010800 	.word	0x40010800

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <HAL_UART_MspInit+0x98>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d137      	bne.n	8001590 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_UART_MspInit+0x9c>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_UART_MspInit+0x9c>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152a:	61d3      	str	r3, [r2, #28]
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_UART_MspInit+0x9c>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_UART_MspInit+0x9c>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_UART_MspInit+0x9c>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_UART_MspInit+0x9c>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001550:	2304      	movs	r3, #4
 8001552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	480f      	ldr	r0, [pc, #60]	; (80015a0 <HAL_UART_MspInit+0xa0>)
 8001564:	f000 fd6e 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001568:	2308      	movs	r3, #8
 800156a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4619      	mov	r1, r3
 800157a:	4809      	ldr	r0, [pc, #36]	; (80015a0 <HAL_UART_MspInit+0xa0>)
 800157c:	f000 fd62 	bl	8002044 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2026      	movs	r0, #38	; 0x26
 8001586:	f000 fc76 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800158a:	2026      	movs	r0, #38	; 0x26
 800158c:	f000 fc8f 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40004400 	.word	0x40004400
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010800 	.word	0x40010800

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 fb51 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM2_IRQHandler+0x10>)
 80015fa:	f001 fca5 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000019c 	.word	0x2000019c

08001608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART2_IRQHandler+0x10>)
 800160e:	f002 faef 	bl	8003bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001e4 	.word	0x200001e4

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f002 fe7e 	bl	800434c <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20005000 	.word	0x20005000
 800167c:	00000400 	.word	0x00000400
 8001680:	20000130 	.word	0x20000130
 8001684:	20000560 	.word	0x20000560

08001688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <setTimer1+0x2c>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1092      	asrs	r2, r2, #2
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <setTimer1+0x30>)
 80016ac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <setTimer1+0x34>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	66666667 	.word	0x66666667
 80016c4:	20000140 	.word	0x20000140
 80016c8:	20000134 	.word	0x20000134

080016cc <setTimer2>:

void setTimer2(int duration){
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <setTimer2+0x2c>)
 80016d8:	fb82 1203 	smull	r1, r2, r2, r3
 80016dc:	1092      	asrs	r2, r2, #2
 80016de:	17db      	asrs	r3, r3, #31
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	4a06      	ldr	r2, [pc, #24]	; (80016fc <setTimer2+0x30>)
 80016e4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <setTimer2+0x34>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	66666667 	.word	0x66666667
 80016fc:	20000144 	.word	0x20000144
 8001700:	20000138 	.word	0x20000138

08001704 <setTimer3>:

void setTimer3(int duration){
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <setTimer3+0x2c>)
 8001710:	fb82 1203 	smull	r1, r2, r2, r3
 8001714:	1092      	asrs	r2, r2, #2
 8001716:	17db      	asrs	r3, r3, #31
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <setTimer3+0x30>)
 800171c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <setTimer3+0x34>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	66666667 	.word	0x66666667
 8001734:	20000148 	.word	0x20000148
 8001738:	2000013c 	.word	0x2000013c

0800173c <timer_run>:

void timer_run(){
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <timer_run+0x6c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	dd0b      	ble.n	8001760 <timer_run+0x24>
		timer1_counter--;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <timer_run+0x6c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <timer_run+0x6c>)
 8001750:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <timer_run+0x6c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <timer_run+0x24>
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <timer_run+0x70>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <timer_run+0x74>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	dd0b      	ble.n	8001780 <timer_run+0x44>
		timer2_counter--;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <timer_run+0x74>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <timer_run+0x74>)
 8001770:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <timer_run+0x74>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <timer_run+0x44>
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <timer_run+0x78>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <timer_run+0x7c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dd0b      	ble.n	80017a0 <timer_run+0x64>
		timer3_counter--;
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <timer_run+0x7c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3b01      	subs	r3, #1
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <timer_run+0x7c>)
 8001790:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <timer_run+0x7c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <timer_run+0x64>
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <timer_run+0x80>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
	}
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000140 	.word	0x20000140
 80017ac:	20000134 	.word	0x20000134
 80017b0:	20000144 	.word	0x20000144
 80017b4:	20000138 	.word	0x20000138
 80017b8:	20000148 	.word	0x20000148
 80017bc:	2000013c 	.word	0x2000013c

080017c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	timer_run();
 80017c8:	f7ff ffb8 	bl	800173c <timer_run>
	button_reading();
 80017cc:	f7fe fcee 	bl	80001ac <button_reading>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <setTraffic1Red>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "traffic.h"

void setTraffic1Red(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <setTraffic1Red+0x20>)
 80017e4:	f000 fdc9 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2108      	movs	r1, #8
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <setTraffic1Red+0x24>)
 80017ee:	f000 fdc4 	bl	800237a <HAL_GPIO_WritePin>

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00

08001800 <setTraffic2Red>:

void setTraffic2Red(){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2120      	movs	r1, #32
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <setTraffic2Red+0x1c>)
 800180a:	f000 fdb6 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2110      	movs	r1, #16
 8001812:	4802      	ldr	r0, [pc, #8]	; (800181c <setTraffic2Red+0x1c>)
 8001814:	f000 fdb1 	bl	800237a <HAL_GPIO_WritePin>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40010c00 	.word	0x40010c00

08001820 <setTraffic1Green>:

void setTraffic1Green(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <setTraffic1Green+0x20>)
 800182c:	f000 fda5 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2108      	movs	r1, #8
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <setTraffic1Green+0x24>)
 8001836:	f000 fda0 	bl	800237a <HAL_GPIO_WritePin>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010800 	.word	0x40010800
 8001844:	40010c00 	.word	0x40010c00

08001848 <clearTraffic1>:

void clearTraffic1(){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <clearTraffic1+0x20>)
 8001854:	f000 fd91 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2108      	movs	r1, #8
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <clearTraffic1+0x24>)
 800185e:	f000 fd8c 	bl	800237a <HAL_GPIO_WritePin>
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00

08001870 <setTraffic2Green>:


void setTraffic2Green(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2120      	movs	r1, #32
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <setTraffic2Green+0x1c>)
 800187a:	f000 fd7e 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2110      	movs	r1, #16
 8001882:	4802      	ldr	r0, [pc, #8]	; (800188c <setTraffic2Green+0x1c>)
 8001884:	f000 fd79 	bl	800237a <HAL_GPIO_WritePin>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40010c00 	.word	0x40010c00

08001890 <setTraffic1Yellow>:

void setTraffic1Yellow(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <setTraffic1Yellow+0x20>)
 800189c:	f000 fd6d 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2108      	movs	r1, #8
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <setTraffic1Yellow+0x24>)
 80018a6:	f000 fd68 	bl	800237a <HAL_GPIO_WritePin>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40010c00 	.word	0x40010c00

080018b8 <setTraffic2Yellow>:

void setTraffic2Yellow(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2120      	movs	r1, #32
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <setTraffic2Yellow+0x1c>)
 80018c2:	f000 fd5a 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2110      	movs	r1, #16
 80018ca:	4802      	ldr	r0, [pc, #8]	; (80018d4 <setTraffic2Yellow+0x1c>)
 80018cc:	f000 fd55 	bl	800237a <HAL_GPIO_WritePin>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010c00 	.word	0x40010c00

080018d8 <clearTraffic2>:

void clearTraffic2(){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	2120      	movs	r1, #32
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <clearTraffic2+0x1c>)
 80018e2:	f000 fd4a 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2110      	movs	r1, #16
 80018ea:	4802      	ldr	r0, [pc, #8]	; (80018f4 <clearTraffic2+0x1c>)
 80018ec:	f000 fd45 	bl	800237a <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40010c00 	.word	0x40010c00

080018f8 <setPedestrianRed>:

void setPedestrianRed(){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <setPedestrianRed+0x20>)
 8001904:	f000 fd39 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190e:	4803      	ldr	r0, [pc, #12]	; (800191c <setPedestrianRed+0x24>)
 8001910:	f000 fd33 	bl	800237a <HAL_GPIO_WritePin>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40010800 	.word	0x40010800

08001920 <setPedestrianGreen>:

void setPedestrianGreen(){
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <setPedestrianGreen+0x20>)
 800192c:	f000 fd25 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <setPedestrianGreen+0x24>)
 8001938:	f000 fd1f 	bl	800237a <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40010c00 	.word	0x40010c00
 8001944:	40010800 	.word	0x40010800

08001948 <clearPedestrian>:
void setPedestrianYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void clearPedestrian(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <clearPedestrian+0x20>)
 8001954:	f000 fd11 	bl	800237a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <clearPedestrian+0x24>)
 8001960:	f000 fd0b 	bl	800237a <HAL_GPIO_WritePin>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40010800 	.word	0x40010800

08001970 <toggleTraffic1Red>:

void toggleTraffic1Red(){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8001974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <toggleTraffic1Red+0x14>)
 800197a:	f000 fd16 	bl	80023aa <HAL_GPIO_TogglePin>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40010800 	.word	0x40010800

08001988 <toggleTraffic2Red>:

void toggleTraffic2Red(){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 800198c:	2120      	movs	r1, #32
 800198e:	4802      	ldr	r0, [pc, #8]	; (8001998 <toggleTraffic2Red+0x10>)
 8001990:	f000 fd0b 	bl	80023aa <HAL_GPIO_TogglePin>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40010c00 	.word	0x40010c00

0800199c <toggleTraffic1Green>:

void toggleTraffic1Green(){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 80019a0:	2108      	movs	r1, #8
 80019a2:	4802      	ldr	r0, [pc, #8]	; (80019ac <toggleTraffic1Green+0x10>)
 80019a4:	f000 fd01 	bl	80023aa <HAL_GPIO_TogglePin>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40010c00 	.word	0x40010c00

080019b0 <toggleTraffic2Green>:

void toggleTraffic2Green(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 80019b4:	2110      	movs	r1, #16
 80019b6:	4802      	ldr	r0, [pc, #8]	; (80019c0 <toggleTraffic2Green+0x10>)
 80019b8:	f000 fcf7 	bl	80023aa <HAL_GPIO_TogglePin>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010c00 	.word	0x40010c00

080019c4 <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 80019c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <toggleTraffic1Yellow+0x1c>)
 80019ce:	f000 fcec 	bl	80023aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 80019d2:	2108      	movs	r1, #8
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <toggleTraffic1Yellow+0x20>)
 80019d6:	f000 fce8 	bl	80023aa <HAL_GPIO_TogglePin>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40010800 	.word	0x40010800
 80019e4:	40010c00 	.word	0x40010c00

080019e8 <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 80019ec:	2120      	movs	r1, #32
 80019ee:	4804      	ldr	r0, [pc, #16]	; (8001a00 <toggleTraffic2Yellow+0x18>)
 80019f0:	f000 fcdb 	bl	80023aa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 80019f4:	2110      	movs	r1, #16
 80019f6:	4802      	ldr	r0, [pc, #8]	; (8001a00 <toggleTraffic2Yellow+0x18>)
 80019f8:	f000 fcd7 	bl	80023aa <HAL_GPIO_TogglePin>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010c00 	.word	0x40010c00

08001a04 <acceptTraffic1Red>:

void acceptTraffic1Red(){
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	max_red1 = counter;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <acceptTraffic1Red+0x34>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <acceptTraffic1Red+0x38>)
 8001a0e:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <acceptTraffic1Red+0x38>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <acceptTraffic1Red+0x3c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dc02      	bgt.n	8001a22 <acceptTraffic1Red+0x1e>
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <acceptTraffic1Red+0x3c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <acceptTraffic1Red+0x38>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <acceptTraffic1Red+0x3c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <acceptTraffic1Red+0x40>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000120 	.word	0x20000120
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	20000024 	.word	0x20000024
 8001a44:	20000020 	.word	0x20000020

08001a48 <acceptTraffic2Red>:

void acceptTraffic2Red(){
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	max_red2 = counter;
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <acceptTraffic2Red+0x34>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <acceptTraffic2Red+0x38>)
 8001a52:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <acceptTraffic2Red+0x38>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <acceptTraffic2Red+0x3c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dc02      	bgt.n	8001a66 <acceptTraffic2Red+0x1e>
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <acceptTraffic2Red+0x3c>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <acceptTraffic2Red+0x38>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <acceptTraffic2Red+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <acceptTraffic2Red+0x40>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000120 	.word	0x20000120
 8001a80:	2000001c 	.word	0x2000001c
 8001a84:	20000018 	.word	0x20000018
 8001a88:	20000014 	.word	0x20000014

08001a8c <acceptTraffic1Green>:

void acceptTraffic1Green(){
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
	max_green1 = counter;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <acceptTraffic1Green+0x24>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <acceptTraffic1Green+0x28>)
 8001a96:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <acceptTraffic1Green+0x2c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <acceptTraffic1Green+0x28>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <acceptTraffic1Green+0x30>)
 8001aa4:	6013      	str	r3, [r2, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000120 	.word	0x20000120
 8001ab4:	20000014 	.word	0x20000014
 8001ab8:	2000001c 	.word	0x2000001c
 8001abc:	20000018 	.word	0x20000018

08001ac0 <acceptTraffic2Green>:

void acceptTraffic2Green(){
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	max_green2 = counter;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <acceptTraffic2Green+0x24>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <acceptTraffic2Green+0x28>)
 8001aca:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <acceptTraffic2Green+0x2c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <acceptTraffic2Green+0x28>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <acceptTraffic2Green+0x30>)
 8001ad8:	6013      	str	r3, [r2, #0]
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000120 	.word	0x20000120
 8001ae8:	20000020 	.word	0x20000020
 8001aec:	20000010 	.word	0x20000010
 8001af0:	20000024 	.word	0x20000024

08001af4 <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <acceptTraffic1Yellow+0x24>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <acceptTraffic1Yellow+0x28>)
 8001afe:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <acceptTraffic1Yellow+0x2c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <acceptTraffic1Yellow+0x28>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <acceptTraffic1Yellow+0x30>)
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000120 	.word	0x20000120
 8001b1c:	20000018 	.word	0x20000018
 8001b20:	2000001c 	.word	0x2000001c
 8001b24:	20000014 	.word	0x20000014

08001b28 <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <acceptTraffic2Yellow+0x24>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <acceptTraffic2Yellow+0x28>)
 8001b32:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <acceptTraffic2Yellow+0x2c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <acceptTraffic2Yellow+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <acceptTraffic2Yellow+0x30>)
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000120 	.word	0x20000120
 8001b50:	20000024 	.word	0x20000024
 8001b54:	20000010 	.word	0x20000010
 8001b58:	20000020 	.word	0x20000020

08001b5c <displayCounter>:

void displayCounter(){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#", counter/10, counter%10);
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <displayCounter+0x48>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <displayCounter+0x4c>)
 8001b66:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6a:	1092      	asrs	r2, r2, #2
 8001b6c:	17db      	asrs	r3, r3, #31
 8001b6e:	1ad0      	subs	r0, r2, r3
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <displayCounter+0x48>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <displayCounter+0x4c>)
 8001b76:	fb83 1302 	smull	r1, r3, r3, r2
 8001b7a:	1099      	asrs	r1, r3, #2
 8001b7c:	17d3      	asrs	r3, r2, #31
 8001b7e:	1ac9      	subs	r1, r1, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	1ad1      	subs	r1, r2, r3
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4907      	ldr	r1, [pc, #28]	; (8001bac <displayCounter+0x50>)
 8001b90:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <displayCounter+0x54>)
 8001b92:	f002 fc0d 	bl	80043b0 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 9);
 8001b96:	2209      	movs	r2, #9
 8001b98:	4905      	ldr	r1, [pc, #20]	; (8001bb0 <displayCounter+0x54>)
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <displayCounter+0x58>)
 8001b9c:	f001 ffe3 	bl	8003b66 <HAL_UART_Transmit_IT>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000120 	.word	0x20000120
 8001ba8:	66666667 	.word	0x66666667
 8001bac:	08004c3c 	.word	0x08004c3c
 8001bb0:	20000124 	.word	0x20000124
 8001bb4:	200001e4 	.word	0x200001e4

08001bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	; (8001bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bde:	f7ff fd53 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f002 fbb9 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be6:	f7ff f9cb 	bl	8000f80 <main>
  bx lr
 8001bea:	4770      	bx	lr
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001bf4:	08004cac 	.word	0x08004cac
  ldr r2, =_sbss
 8001bf8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001bfc:	2000055c 	.word	0x2000055c

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_Init+0x28>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_Init+0x28>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f923 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fbd2 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f93b 	bl	8001eca <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 f903 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000028 	.word	0x20000028
 8001c88:	20000030 	.word	0x20000030
 8001c8c:	2000002c 	.word	0x2000002c

08001c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x1c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_IncTick+0x20>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000030 	.word	0x20000030
 8001cb0:	20000548 	.word	0x20000548

08001cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_GetTick+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000548 	.word	0x20000548

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff90 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff2d 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff42 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff90 	bl	8001db8 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5f 	bl	8001d64 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff35 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d008      	beq.n	8001f0a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e020      	b.n	8001f4c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 020e 	bic.w	r2, r2, #14
 8001f18:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d005      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e051      	b.n	800201e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 020e 	bic.w	r2, r2, #14
 8001f88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	; (8002028 <HAL_DMA_Abort_IT+0xd0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d029      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0xa0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_DMA_Abort_IT+0xd4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x9c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_DMA_Abort_IT+0xd8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d01a      	beq.n	8001fee <HAL_DMA_Abort_IT+0x96>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_DMA_Abort_IT+0xdc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d012      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x90>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_DMA_Abort_IT+0xe0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00a      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x8a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_DMA_Abort_IT+0xe4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d102      	bne.n	8001fdc <HAL_DMA_Abort_IT+0x84>
 8001fd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fda:	e00e      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe0:	e00b      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe6:	e008      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	e005      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff2:	e002      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_DMA_Abort_IT+0xe8>)
 8001ffc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
    } 
  }
  return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020008 	.word	0x40020008
 800202c:	4002001c 	.word	0x4002001c
 8002030:	40020030 	.word	0x40020030
 8002034:	40020044 	.word	0x40020044
 8002038:	40020058 	.word	0x40020058
 800203c:	4002006c 	.word	0x4002006c
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	; 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e169      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002058:	2201      	movs	r2, #1
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8158 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a9a      	ldr	r2, [pc, #616]	; (80022e4 <HAL_GPIO_Init+0x2a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002080:	4a98      	ldr	r2, [pc, #608]	; (80022e4 <HAL_GPIO_Init+0x2a0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d875      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002086:	4a98      	ldr	r2, [pc, #608]	; (80022e8 <HAL_GPIO_Init+0x2a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d058      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 800208c:	4a96      	ldr	r2, [pc, #600]	; (80022e8 <HAL_GPIO_Init+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d86f      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002092:	4a96      	ldr	r2, [pc, #600]	; (80022ec <HAL_GPIO_Init+0x2a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d052      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002098:	4a94      	ldr	r2, [pc, #592]	; (80022ec <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d869      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 800209e:	4a94      	ldr	r2, [pc, #592]	; (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04c      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020a4:	4a92      	ldr	r2, [pc, #584]	; (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d863      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020aa:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d046      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020b0:	4a90      	ldr	r2, [pc, #576]	; (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d85d      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d82a      	bhi.n	8002110 <HAL_GPIO_Init+0xcc>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d859      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_GPIO_Init+0x80>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	08002119 	.word	0x08002119
 80020cc:	0800212b 	.word	0x0800212b
 80020d0:	0800216d 	.word	0x0800216d
 80020d4:	08002173 	.word	0x08002173
 80020d8:	08002173 	.word	0x08002173
 80020dc:	08002173 	.word	0x08002173
 80020e0:	08002173 	.word	0x08002173
 80020e4:	08002173 	.word	0x08002173
 80020e8:	08002173 	.word	0x08002173
 80020ec:	08002173 	.word	0x08002173
 80020f0:	08002173 	.word	0x08002173
 80020f4:	08002173 	.word	0x08002173
 80020f8:	08002173 	.word	0x08002173
 80020fc:	08002173 	.word	0x08002173
 8002100:	08002173 	.word	0x08002173
 8002104:	08002173 	.word	0x08002173
 8002108:	08002121 	.word	0x08002121
 800210c:	08002135 	.word	0x08002135
 8002110:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <HAL_GPIO_Init+0x2b4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002116:	e02c      	b.n	8002172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e029      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e024      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	3308      	adds	r3, #8
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e01f      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	330c      	adds	r3, #12
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e01a      	b.n	8002174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002146:	2304      	movs	r3, #4
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e013      	b.n	8002174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	611a      	str	r2, [r3, #16]
          break;
 800215e:	e009      	b.n	8002174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	615a      	str	r2, [r3, #20]
          break;
 800216a:	e003      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x130>
          break;
 8002172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	; 0xff
 8002178:	d801      	bhi.n	800217e <HAL_GPIO_Init+0x13a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_Init+0x13e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d802      	bhi.n	8002190 <HAL_GPIO_Init+0x14c>
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x152>
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	3b08      	subs	r3, #8
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	210f      	movs	r1, #15
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	6a39      	ldr	r1, [r7, #32]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80b1 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021dc:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_GPIO_Init+0x2bc>)
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	; (8002304 <HAL_GPIO_Init+0x2c0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3f      	ldr	r2, [pc, #252]	; (8002308 <HAL_GPIO_Init+0x2c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3e      	ldr	r2, [pc, #248]	; (800230c <HAL_GPIO_Init+0x2c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1e4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <HAL_GPIO_Init+0x2cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1e0>
 8002220:	2303      	movs	r3, #3
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002224:	2304      	movs	r3, #4
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002230:	2300      	movs	r3, #0
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002242:	492f      	ldr	r1, [pc, #188]	; (8002300 <HAL_GPIO_Init+0x2bc>)
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	492c      	ldr	r1, [pc, #176]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	4928      	ldr	r1, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4922      	ldr	r1, [pc, #136]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	491e      	ldr	r1, [pc, #120]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4918      	ldr	r1, [pc, #96]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4914      	ldr	r1, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e021      	b.n	8002326 <HAL_GPIO_Init+0x2e2>
 80022e2:	bf00      	nop
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10310000 	.word	0x10310000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	10210000 	.word	0x10210000
 80022f4:	10120000 	.word	0x10120000
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	40010800 	.word	0x40010800
 8002308:	40010c00 	.word	0x40010c00
 800230c:	40011000 	.word	0x40011000
 8002310:	40011400 	.word	0x40011400
 8002314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_GPIO_Init+0x304>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	43db      	mvns	r3, r3
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_GPIO_Init+0x304>)
 8002322:	4013      	ands	r3, r2
 8002324:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	3301      	adds	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	f47f ae8e 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	372c      	adds	r7, #44	; 0x2c
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	807b      	strh	r3, [r7, #2]
 8002386:	4613      	mov	r3, r2
 8002388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800238a:	787b      	ldrb	r3, [r7, #1]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	041a      	lsls	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023bc:	887a      	ldrh	r2, [r7, #2]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	041a      	lsls	r2, r3, #16
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	400b      	ands	r3, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	611a      	str	r2, [r3, #16]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e26c      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8087 	beq.w	800250a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023fc:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b04      	cmp	r3, #4
 8002406:	d00c      	beq.n	8002422 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002408:	4b8f      	ldr	r3, [pc, #572]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d112      	bne.n	800243a <HAL_RCC_OscConfig+0x5e>
 8002414:	4b8c      	ldr	r3, [pc, #560]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d10b      	bne.n	800243a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002422:	4b89      	ldr	r3, [pc, #548]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06c      	beq.n	8002508 <HAL_RCC_OscConfig+0x12c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d168      	bne.n	8002508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e246      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x76>
 8002444:	4b80      	ldr	r3, [pc, #512]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7f      	ldr	r2, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800244a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e02e      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x98>
 800245a:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7a      	ldr	r2, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b78      	ldr	r3, [pc, #480]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a77      	ldr	r2, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0xbc>
 800247e:	4b72      	ldr	r3, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a71      	ldr	r2, [pc, #452]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xd4>
 8002498:	4b6b      	ldr	r3, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a67      	ldr	r2, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fbfc 	bl	8001cb4 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff fbf8 	bl	8001cb4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e1fa      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b5d      	ldr	r3, [pc, #372]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe4>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fbe8 	bl	8001cb4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff fbe4 	bl	8001cb4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1e6      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x10c>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002516:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x18c>
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x176>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1ba      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4939      	ldr	r1, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff fb9d 	bl	8001cb4 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257e:	f7ff fb99 	bl	8001cb4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e19b      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fb7c 	bl	8001cb4 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7ff fb78 	bl	8001cb4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e17a      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d03a      	beq.n	8002660 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d019      	beq.n	8002626 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_RCC_OscConfig+0x274>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7ff fb5c 	bl	8001cb4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff fb58 	bl	8001cb4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e15a      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_RCC_OscConfig+0x26c>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f000 fad8 	bl	8002bd4 <RCC_Delay>
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_RCC_OscConfig+0x274>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fb42 	bl	8001cb4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002632:	e00f      	b.n	8002654 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fb3e 	bl	8001cb4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d908      	bls.n	8002654 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e140      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	42420000 	.word	0x42420000
 8002650:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b9e      	ldr	r3, [pc, #632]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e9      	bne.n	8002634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a6 	beq.w	80027ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b97      	ldr	r3, [pc, #604]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b94      	ldr	r3, [pc, #592]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a93      	ldr	r2, [pc, #588]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]
 800268a:	4b91      	ldr	r3, [pc, #580]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a6:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a8a      	ldr	r2, [pc, #552]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7ff faff 	bl	8001cb4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7ff fafb 	bl	8001cb4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b64      	cmp	r3, #100	; 0x64
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0fd      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x312>
 80026e0:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a7a      	ldr	r2, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	e02d      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x334>
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	4b73      	ldr	r3, [pc, #460]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a72      	ldr	r2, [pc, #456]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	e01c      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_OscConfig+0x356>
 8002718:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a6c      	ldr	r2, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6213      	str	r3, [r2, #32]
 8002730:	e00b      	b.n	800274a <HAL_RCC_OscConfig+0x36e>
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6213      	str	r3, [r2, #32]
 800273e:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a63      	ldr	r2, [pc, #396]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d015      	beq.n	800277e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7ff faaf 	bl	8001cb4 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7ff faab 	bl	8001cb4 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0ab      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ee      	beq.n	800275a <HAL_RCC_OscConfig+0x37e>
 800277c:	e014      	b.n	80027a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7ff fa99 	bl	8001cb4 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fa95 	bl	8001cb4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e095      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8081 	beq.w	80028c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d061      	beq.n	8002894 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d146      	bne.n	8002866 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d8:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_OscConfig+0x4fc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7ff fa69 	bl	8001cb4 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7ff fa65 	bl	8001cb4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e067      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	492d      	ldr	r1, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a19      	ldr	r1, [r3, #32]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	430b      	orrs	r3, r1
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x4fc>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7ff fa39 	bl	8001cb4 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff fa35 	bl	8001cb4 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e037      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x46a>
 8002864:	e02f      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_RCC_OscConfig+0x4fc>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff fa22 	bl	8001cb4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7ff fa1e 	bl	8001cb4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e020      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x498>
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e013      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42420060 	.word	0x42420060

080028dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d0      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d910      	bls.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4965      	ldr	r1, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800295a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d040      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d115      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e073      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06b      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4936      	ldr	r1, [pc, #216]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7ff f972 	bl	8001cb4 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7ff f96e 	bl	8001cb4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e053      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d210      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4922      	ldr	r1, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1d0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff f8d0 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08004c58 	.word	0x08004c58
 8002aa8:	20000028 	.word	0x20000028
 8002aac:	2000002c 	.word	0x2000002c

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b490      	push	{r4, r7}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ab8:	1d3c      	adds	r4, r7, #4
 8002aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ac0:	f240 2301 	movw	r3, #513	; 0x201
 8002ac4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x46>
 8002aee:	e02d      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af2:	623b      	str	r3, [r7, #32]
      break;
 8002af4:	e02d      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	0c9b      	lsrs	r3, r3, #18
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b02:	4413      	add	r3, r2
 8002b04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0c5b      	lsrs	r3, r3, #17
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b22:	4413      	add	r3, r2
 8002b24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2e:	fb02 f203 	mul.w	r2, r2, r3
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e004      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	623b      	str	r3, [r7, #32]
      break;
 8002b4a:	e002      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4e:	623b      	str	r3, [r7, #32]
      break;
 8002b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b52:	6a3b      	ldr	r3, [r7, #32]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc90      	pop	{r4, r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	08004c48 	.word	0x08004c48
 8002b64:	40021000 	.word	0x40021000
 8002b68:	007a1200 	.word	0x007a1200
 8002b6c:	003d0900 	.word	0x003d0900

08002b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	20000028 	.word	0x20000028

08002b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b88:	f7ff fff2 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08004c68 	.word	0x08004c68

08002bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0adb      	lsrs	r3, r3, #11
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08004c68 	.word	0x08004c68

08002bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <RCC_Delay+0x34>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <RCC_Delay+0x38>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0a5b      	lsrs	r3, r3, #9
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf0:	bf00      	nop
  }
  while (Delay --);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	60fa      	str	r2, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f9      	bne.n	8002bf0 <RCC_Delay+0x1c>
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	20000028 	.word	0x20000028
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e041      	b.n	8002ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fbf8 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f000 fc28 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e03a      	b.n	8002d3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_Base_Start_IT+0x98>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_TIM_Base_Start_IT+0x9c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x58>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d111      	bne.n	8002d2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d010      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	e007      	b.n	8002d3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e041      	b.n	8002dea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f839 	bl	8002df2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f000 fb86 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_TIM_PWM_Start+0x24>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e022      	b.n	8002e6e <HAL_TIM_PWM_Start+0x6a>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d109      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x3e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e015      	b.n	8002e6e <HAL_TIM_PWM_Start+0x6a>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x58>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e008      	b.n	8002e6e <HAL_TIM_PWM_Start+0x6a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e05e      	b.n	8002f34 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start+0x82>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e84:	e013      	b.n	8002eae <HAL_TIM_PWM_Start+0xaa>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start+0x92>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	e00b      	b.n	8002eae <HAL_TIM_PWM_Start+0xaa>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0xa2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	e003      	b.n	8002eae <HAL_TIM_PWM_Start+0xaa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	6839      	ldr	r1, [r7, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fd74 	bl	80039a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <HAL_TIM_PWM_Start+0x138>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d107      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_TIM_PWM_Start+0x138>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_TIM_PWM_Start+0xfa>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_PWM_Start+0xfa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_TIM_PWM_Start+0x13c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_PWM_Start+0xfa>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_TIM_PWM_Start+0x140>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d111      	bne.n	8002f22 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d010      	beq.n	8002f32 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	e007      	b.n	8002f32 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800

08002f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0202 	mvn.w	r2, #2
 8002f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa6f 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa62 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fa71 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d122      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0204 	mvn.w	r2, #4
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa45 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa38 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa47 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b08      	cmp	r3, #8
 8003004:	d122      	bne.n	800304c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0208 	mvn.w	r2, #8
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa1b 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa0e 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa1d 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b10      	cmp	r3, #16
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0210 	mvn.w	r2, #16
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2208      	movs	r2, #8
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9f1 	bl	800346e <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9e4 	bl	800345c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f9f3 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10e      	bne.n	80030cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0201 	mvn.w	r2, #1
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fb7a 	bl	80017c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d107      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fce1 	bl	8003aba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d10e      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	d107      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9b7 	bl	8003492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b20      	cmp	r3, #32
 8003130:	d10e      	bne.n	8003150 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b20      	cmp	r3, #32
 800313e:	d107      	bne.n	8003150 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0220 	mvn.w	r2, #32
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fcac 	bl	8003aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800316e:	2302      	movs	r3, #2
 8003170:	e0ac      	b.n	80032cc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	f200 809f 	bhi.w	80032c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080032c1 	.word	0x080032c1
 8003190:	080032c1 	.word	0x080032c1
 8003194:	080032c1 	.word	0x080032c1
 8003198:	080031fd 	.word	0x080031fd
 800319c:	080032c1 	.word	0x080032c1
 80031a0:	080032c1 	.word	0x080032c1
 80031a4:	080032c1 	.word	0x080032c1
 80031a8:	0800323f 	.word	0x0800323f
 80031ac:	080032c1 	.word	0x080032c1
 80031b0:	080032c1 	.word	0x080032c1
 80031b4:	080032c1 	.word	0x080032c1
 80031b8:	0800327f 	.word	0x0800327f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f9d0 	bl	8003568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0204 	bic.w	r2, r2, #4
 80031e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6999      	ldr	r1, [r3, #24]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	619a      	str	r2, [r3, #24]
      break;
 80031fa:	e062      	b.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fa16 	bl	8003634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6999      	ldr	r1, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	021a      	lsls	r2, r3, #8
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	619a      	str	r2, [r3, #24]
      break;
 800323c:	e041      	b.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fa5f 	bl	8003708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0208 	orr.w	r2, r2, #8
 8003258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0204 	bic.w	r2, r2, #4
 8003268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	61da      	str	r2, [r3, #28]
      break;
 800327c:	e021      	b.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 faa9 	bl	80037dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69d9      	ldr	r1, [r3, #28]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	61da      	str	r2, [r3, #28]
      break;
 80032be:	e000      	b.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_TIM_ConfigClockSource+0x18>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e0b3      	b.n	8003454 <HAL_TIM_ConfigClockSource+0x180>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800330a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003312:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003324:	d03e      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0xd0>
 8003326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332a:	f200 8087 	bhi.w	800343c <HAL_TIM_ConfigClockSource+0x168>
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	f000 8085 	beq.w	8003440 <HAL_TIM_ConfigClockSource+0x16c>
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	d87f      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x168>
 800333c:	2b70      	cmp	r3, #112	; 0x70
 800333e:	d01a      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0xa2>
 8003340:	2b70      	cmp	r3, #112	; 0x70
 8003342:	d87b      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x168>
 8003344:	2b60      	cmp	r3, #96	; 0x60
 8003346:	d050      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x116>
 8003348:	2b60      	cmp	r3, #96	; 0x60
 800334a:	d877      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x168>
 800334c:	2b50      	cmp	r3, #80	; 0x50
 800334e:	d03c      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0xf6>
 8003350:	2b50      	cmp	r3, #80	; 0x50
 8003352:	d873      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x168>
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d058      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x136>
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d86f      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x168>
 800335c:	2b30      	cmp	r3, #48	; 0x30
 800335e:	d064      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x156>
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d86b      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x168>
 8003364:	2b20      	cmp	r3, #32
 8003366:	d060      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x156>
 8003368:	2b20      	cmp	r3, #32
 800336a:	d867      	bhi.n	800343c <HAL_TIM_ConfigClockSource+0x168>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05c      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x156>
 8003370:	2b10      	cmp	r3, #16
 8003372:	d05a      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003374:	e062      	b.n	800343c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6899      	ldr	r1, [r3, #8]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f000 faee 	bl	8003966 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003398:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	609a      	str	r2, [r3, #8]
      break;
 80033a2:	e04e      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f000 fad7 	bl	8003966 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c6:	609a      	str	r2, [r3, #8]
      break;
 80033c8:	e03b      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 fa4e 	bl	8003878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2150      	movs	r1, #80	; 0x50
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 faa5 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e02b      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 fa6c 	bl	80038d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2160      	movs	r1, #96	; 0x60
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fa95 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 8003408:	e01b      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	461a      	mov	r2, r3
 8003418:	f000 fa2e 	bl	8003878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fa85 	bl	8003932 <TIM_ITRx_SetConfig>
      break;
 8003428:	e00b      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	4610      	mov	r0, r2
 8003436:	f000 fa7c 	bl	8003932 <TIM_ITRx_SetConfig>
        break;
 800343a:	e002      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800343c:	bf00      	nop
 800343e:	e000      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003440:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a29      	ldr	r2, [pc, #164]	; (800355c <TIM_Base_SetConfig+0xb8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x30>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x30>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a26      	ldr	r2, [pc, #152]	; (8003560 <TIM_Base_SetConfig+0xbc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x30>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <TIM_Base_SetConfig+0xc0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a1c      	ldr	r2, [pc, #112]	; (800355c <TIM_Base_SetConfig+0xb8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00b      	beq.n	8003506 <TIM_Base_SetConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d007      	beq.n	8003506 <TIM_Base_SetConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <TIM_Base_SetConfig+0xbc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a18      	ldr	r2, [pc, #96]	; (8003564 <TIM_Base_SetConfig+0xc0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d108      	bne.n	8003518 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <TIM_Base_SetConfig+0xb8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d103      	bne.n	800354c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	615a      	str	r2, [r3, #20]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800

08003568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0201 	bic.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0302 	bic.w	r3, r3, #2
 80035b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <TIM_OC1_SetConfig+0xc8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10c      	bne.n	80035de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0308 	bic.w	r3, r3, #8
 80035ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <TIM_OC1_SetConfig+0xc8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d111      	bne.n	800360a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40012c00 	.word	0x40012c00

08003634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0210 	bic.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0320 	bic.w	r3, r3, #32
 800367e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <TIM_OC2_SetConfig+0xd0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10d      	bne.n	80036b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <TIM_OC2_SetConfig+0xd0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d113      	bne.n	80036e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	40012c00 	.word	0x40012c00

08003708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <TIM_OC3_SetConfig+0xd0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10d      	bne.n	8003782 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800376c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <TIM_OC3_SetConfig+0xd0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d113      	bne.n	80037b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40012c00 	.word	0x40012c00

080037dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	031b      	lsls	r3, r3, #12
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <TIM_OC4_SetConfig+0x98>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d109      	bne.n	8003850 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	40012c00 	.word	0x40012c00

08003878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0201 	bic.w	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 030a 	bic.w	r3, r3, #10
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	621a      	str	r2, [r3, #32]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f023 0210 	bic.w	r2, r3, #16
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	031b      	lsls	r3, r3, #12
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	621a      	str	r2, [r3, #32]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	f043 0307 	orr.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003966:	b480      	push	{r7}
 8003968:	b087      	sub	sp, #28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003980:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	021a      	lsls	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	431a      	orrs	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	609a      	str	r2, [r3, #8]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2201      	movs	r2, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1a      	ldr	r2, [r3, #32]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e046      	b.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d009      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10c      	bne.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800

08003aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03f      	b.n	8003b5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fd04 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fb8d 	bl	8004230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	4613      	mov	r3, r2
 8003b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d130      	bne.n	8003be2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Transmit_IT+0x26>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e029      	b.n	8003be4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit_IT+0x38>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e022      	b.n	8003be4 <HAL_UART_Transmit_IT+0x7e>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2221      	movs	r2, #33	; 0x21
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bdc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_UART_IRQHandler+0x52>
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fa4f 	bl	80040de <UART_Receive_IT>
      return;
 8003c40:	e17b      	b.n	8003f3a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80b1 	beq.w	8003dac <HAL_UART_IRQHandler+0x1bc>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_UART_IRQHandler+0x70>
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80a6 	beq.w	8003dac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_UART_IRQHandler+0x90>
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f043 0201 	orr.w	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xb0>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0202 	orr.w	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xd0>
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00f      	beq.n	8003cea <HAL_UART_IRQHandler+0xfa>
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_UART_IRQHandler+0xee>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0208 	orr.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 811e 	beq.w	8003f30 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_UART_IRQHandler+0x11e>
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f9e8 	bl	80040de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <HAL_UART_IRQHandler+0x146>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d031      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f92a 	bl	8003f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d023      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d58:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d013      	beq.n	8003d8a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	4a76      	ldr	r2, [pc, #472]	; (8003f40 <HAL_UART_IRQHandler+0x350>)
 8003d68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe f8f2 	bl	8001f58 <HAL_DMA_Abort_IT>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d84:	4610      	mov	r0, r2
 8003d86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	e00e      	b.n	8003da8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8ec 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	e00a      	b.n	8003da8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8e8 	bl	8003f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	e006      	b.n	8003da8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8e4 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003da6:	e0c3      	b.n	8003f30 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	bf00      	nop
    return;
 8003daa:	e0c1      	b.n	8003f30 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	f040 80a1 	bne.w	8003ef8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 809b 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8095 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d04e      	beq.n	8003e90 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003dfc:	8a3b      	ldrh	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8098 	beq.w	8003f34 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e08:	8a3a      	ldrh	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f080 8092 	bcs.w	8003f34 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8a3a      	ldrh	r2, [r7, #16]
 8003e14:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d02b      	beq.n	8003e78 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e2e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0210 	bic.w	r2, r2, #16
 8003e6c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe f835 	bl	8001ee2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f876 	bl	8003f7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e8e:	e051      	b.n	8003f34 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d047      	beq.n	8003f38 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ea8:	8a7b      	ldrh	r3, [r7, #18]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d044      	beq.n	8003f38 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ebc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0210 	bic.w	r2, r2, #16
 8003eea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eec:	8a7b      	ldrh	r3, [r7, #18]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f842 	bl	8003f7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ef6:	e01f      	b.n	8003f38 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_UART_IRQHandler+0x324>
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f87f 	bl	8004010 <UART_Transmit_IT>
    return;
 8003f12:	e012      	b.n	8003f3a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <HAL_UART_IRQHandler+0x34a>
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8c0 	bl	80040ae <UART_EndTransmit_IT>
    return;
 8003f2e:	e004      	b.n	8003f3a <HAL_UART_IRQHandler+0x34a>
    return;
 8003f30:	bf00      	nop
 8003f32:	e002      	b.n	8003f3a <HAL_UART_IRQHandler+0x34a>
      return;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <HAL_UART_IRQHandler+0x34a>
      return;
 8003f38:	bf00      	nop
  }
}
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	08003fe9 	.word	0x08003fe9

08003f44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0210 	bic.w	r2, r2, #16
 8003fce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff ffb0 	bl	8003f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b21      	cmp	r3, #33	; 0x21
 8004022:	d13e      	bne.n	80040a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402c:	d114      	bne.n	8004058 <UART_Transmit_IT+0x48>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d110      	bne.n	8004058 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]
 8004056:	e008      	b.n	800406a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	1c59      	adds	r1, r3, #1
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6211      	str	r1, [r2, #32]
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4619      	mov	r1, r3
 8004078:	84d1      	strh	r1, [r2, #38]	; 0x26
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800408c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ff38 	bl	8003f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b22      	cmp	r3, #34	; 0x22
 80040f0:	f040 8099 	bne.w	8004226 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d117      	bne.n	800412e <UART_Receive_IT+0x50>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d113      	bne.n	800412e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411c:	b29a      	uxth	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	1c9a      	adds	r2, r3, #2
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
 800412c:	e026      	b.n	800417c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004140:	d007      	beq.n	8004152 <UART_Receive_IT+0x74>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <UART_Receive_IT+0x82>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e008      	b.n	8004172 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800416c:	b2da      	uxtb	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	4619      	mov	r1, r3
 800418a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800418c:	2b00      	cmp	r3, #0
 800418e:	d148      	bne.n	8004222 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0220 	bic.w	r2, r2, #32
 800419e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d123      	bne.n	8004218 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0210 	bic.w	r2, r2, #16
 80041e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d10a      	bne.n	800420a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff feb2 	bl	8003f7a <HAL_UARTEx_RxEventCallback>
 8004216:	e002      	b.n	800421e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fe9c 	bl	8003f56 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e002      	b.n	8004228 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800426a:	f023 030c 	bic.w	r3, r3, #12
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	430b      	orrs	r3, r1
 8004276:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <UART_SetConfig+0x114>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d103      	bne.n	80042a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004298:	f7fe fc88 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	e002      	b.n	80042a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042a0:	f7fe fc70 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 80042a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <UART_SetConfig+0x118>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	0119      	lsls	r1, r3, #4
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009a      	lsls	r2, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <UART_SetConfig+0x118>)
 80042de:	fba3 0302 	umull	r0, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2064      	movs	r0, #100	; 0x64
 80042e6:	fb00 f303 	mul.w	r3, r0, r3
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	3332      	adds	r3, #50	; 0x32
 80042f0:	4a15      	ldr	r2, [pc, #84]	; (8004348 <UART_SetConfig+0x118>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fc:	4419      	add	r1, r3
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f2f3 	udiv	r2, r2, r3
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <UART_SetConfig+0x118>)
 8004316:	fba3 0302 	umull	r0, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2064      	movs	r0, #100	; 0x64
 800431e:	fb00 f303 	mul.w	r3, r0, r3
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	3332      	adds	r3, #50	; 0x32
 8004328:	4a07      	ldr	r2, [pc, #28]	; (8004348 <UART_SetConfig+0x118>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	f003 020f 	and.w	r2, r3, #15
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	440a      	add	r2, r1
 800433a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40013800 	.word	0x40013800
 8004348:	51eb851f 	.word	0x51eb851f

0800434c <__errno>:
 800434c:	4b01      	ldr	r3, [pc, #4]	; (8004354 <__errno+0x8>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000034 	.word	0x20000034

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	2600      	movs	r6, #0
 800435c:	4d0c      	ldr	r5, [pc, #48]	; (8004390 <__libc_init_array+0x38>)
 800435e:	4c0d      	ldr	r4, [pc, #52]	; (8004394 <__libc_init_array+0x3c>)
 8004360:	1b64      	subs	r4, r4, r5
 8004362:	10a4      	asrs	r4, r4, #2
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	f000 fc5c 	bl	8004c24 <_init>
 800436c:	2600      	movs	r6, #0
 800436e:	4d0a      	ldr	r5, [pc, #40]	; (8004398 <__libc_init_array+0x40>)
 8004370:	4c0a      	ldr	r4, [pc, #40]	; (800439c <__libc_init_array+0x44>)
 8004372:	1b64      	subs	r4, r4, r5
 8004374:	10a4      	asrs	r4, r4, #2
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	08004ca4 	.word	0x08004ca4
 8004394:	08004ca4 	.word	0x08004ca4
 8004398:	08004ca4 	.word	0x08004ca4
 800439c:	08004ca8 	.word	0x08004ca8

080043a0 <memset>:
 80043a0:	4603      	mov	r3, r0
 80043a2:	4402      	add	r2, r0
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d100      	bne.n	80043aa <memset+0xa>
 80043a8:	4770      	bx	lr
 80043aa:	f803 1b01 	strb.w	r1, [r3], #1
 80043ae:	e7f9      	b.n	80043a4 <memset+0x4>

080043b0 <siprintf>:
 80043b0:	b40e      	push	{r1, r2, r3}
 80043b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043b6:	b500      	push	{lr}
 80043b8:	b09c      	sub	sp, #112	; 0x70
 80043ba:	ab1d      	add	r3, sp, #116	; 0x74
 80043bc:	9002      	str	r0, [sp, #8]
 80043be:	9006      	str	r0, [sp, #24]
 80043c0:	9107      	str	r1, [sp, #28]
 80043c2:	9104      	str	r1, [sp, #16]
 80043c4:	4808      	ldr	r0, [pc, #32]	; (80043e8 <siprintf+0x38>)
 80043c6:	4909      	ldr	r1, [pc, #36]	; (80043ec <siprintf+0x3c>)
 80043c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043cc:	9105      	str	r1, [sp, #20]
 80043ce:	6800      	ldr	r0, [r0, #0]
 80043d0:	a902      	add	r1, sp, #8
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	f000 f868 	bl	80044a8 <_svfiprintf_r>
 80043d8:	2200      	movs	r2, #0
 80043da:	9b02      	ldr	r3, [sp, #8]
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	b01c      	add	sp, #112	; 0x70
 80043e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e4:	b003      	add	sp, #12
 80043e6:	4770      	bx	lr
 80043e8:	20000034 	.word	0x20000034
 80043ec:	ffff0208 	.word	0xffff0208

080043f0 <__ssputs_r>:
 80043f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f4:	688e      	ldr	r6, [r1, #8]
 80043f6:	4682      	mov	sl, r0
 80043f8:	429e      	cmp	r6, r3
 80043fa:	460c      	mov	r4, r1
 80043fc:	4690      	mov	r8, r2
 80043fe:	461f      	mov	r7, r3
 8004400:	d838      	bhi.n	8004474 <__ssputs_r+0x84>
 8004402:	898a      	ldrh	r2, [r1, #12]
 8004404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004408:	d032      	beq.n	8004470 <__ssputs_r+0x80>
 800440a:	6825      	ldr	r5, [r4, #0]
 800440c:	6909      	ldr	r1, [r1, #16]
 800440e:	3301      	adds	r3, #1
 8004410:	eba5 0901 	sub.w	r9, r5, r1
 8004414:	6965      	ldr	r5, [r4, #20]
 8004416:	444b      	add	r3, r9
 8004418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800441c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004420:	106d      	asrs	r5, r5, #1
 8004422:	429d      	cmp	r5, r3
 8004424:	bf38      	it	cc
 8004426:	461d      	movcc	r5, r3
 8004428:	0553      	lsls	r3, r2, #21
 800442a:	d531      	bpl.n	8004490 <__ssputs_r+0xa0>
 800442c:	4629      	mov	r1, r5
 800442e:	f000 fb53 	bl	8004ad8 <_malloc_r>
 8004432:	4606      	mov	r6, r0
 8004434:	b950      	cbnz	r0, 800444c <__ssputs_r+0x5c>
 8004436:	230c      	movs	r3, #12
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	f8ca 3000 	str.w	r3, [sl]
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004446:	81a3      	strh	r3, [r4, #12]
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	464a      	mov	r2, r9
 800444e:	6921      	ldr	r1, [r4, #16]
 8004450:	f000 face 	bl	80049f0 <memcpy>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800445a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445e:	81a3      	strh	r3, [r4, #12]
 8004460:	6126      	str	r6, [r4, #16]
 8004462:	444e      	add	r6, r9
 8004464:	6026      	str	r6, [r4, #0]
 8004466:	463e      	mov	r6, r7
 8004468:	6165      	str	r5, [r4, #20]
 800446a:	eba5 0509 	sub.w	r5, r5, r9
 800446e:	60a5      	str	r5, [r4, #8]
 8004470:	42be      	cmp	r6, r7
 8004472:	d900      	bls.n	8004476 <__ssputs_r+0x86>
 8004474:	463e      	mov	r6, r7
 8004476:	4632      	mov	r2, r6
 8004478:	4641      	mov	r1, r8
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	f000 fac6 	bl	8004a0c <memmove>
 8004480:	68a3      	ldr	r3, [r4, #8]
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	1b9b      	subs	r3, r3, r6
 8004486:	4432      	add	r2, r6
 8004488:	2000      	movs	r0, #0
 800448a:	60a3      	str	r3, [r4, #8]
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	e7db      	b.n	8004448 <__ssputs_r+0x58>
 8004490:	462a      	mov	r2, r5
 8004492:	f000 fb7b 	bl	8004b8c <_realloc_r>
 8004496:	4606      	mov	r6, r0
 8004498:	2800      	cmp	r0, #0
 800449a:	d1e1      	bne.n	8004460 <__ssputs_r+0x70>
 800449c:	4650      	mov	r0, sl
 800449e:	6921      	ldr	r1, [r4, #16]
 80044a0:	f000 face 	bl	8004a40 <_free_r>
 80044a4:	e7c7      	b.n	8004436 <__ssputs_r+0x46>
	...

080044a8 <_svfiprintf_r>:
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	4698      	mov	r8, r3
 80044ae:	898b      	ldrh	r3, [r1, #12]
 80044b0:	4607      	mov	r7, r0
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	460d      	mov	r5, r1
 80044b6:	4614      	mov	r4, r2
 80044b8:	b09d      	sub	sp, #116	; 0x74
 80044ba:	d50e      	bpl.n	80044da <_svfiprintf_r+0x32>
 80044bc:	690b      	ldr	r3, [r1, #16]
 80044be:	b963      	cbnz	r3, 80044da <_svfiprintf_r+0x32>
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	f000 fb09 	bl	8004ad8 <_malloc_r>
 80044c6:	6028      	str	r0, [r5, #0]
 80044c8:	6128      	str	r0, [r5, #16]
 80044ca:	b920      	cbnz	r0, 80044d6 <_svfiprintf_r+0x2e>
 80044cc:	230c      	movs	r3, #12
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	e0d1      	b.n	800467a <_svfiprintf_r+0x1d2>
 80044d6:	2340      	movs	r3, #64	; 0x40
 80044d8:	616b      	str	r3, [r5, #20]
 80044da:	2300      	movs	r3, #0
 80044dc:	9309      	str	r3, [sp, #36]	; 0x24
 80044de:	2320      	movs	r3, #32
 80044e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044e4:	2330      	movs	r3, #48	; 0x30
 80044e6:	f04f 0901 	mov.w	r9, #1
 80044ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004694 <_svfiprintf_r+0x1ec>
 80044f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044f6:	4623      	mov	r3, r4
 80044f8:	469a      	mov	sl, r3
 80044fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044fe:	b10a      	cbz	r2, 8004504 <_svfiprintf_r+0x5c>
 8004500:	2a25      	cmp	r2, #37	; 0x25
 8004502:	d1f9      	bne.n	80044f8 <_svfiprintf_r+0x50>
 8004504:	ebba 0b04 	subs.w	fp, sl, r4
 8004508:	d00b      	beq.n	8004522 <_svfiprintf_r+0x7a>
 800450a:	465b      	mov	r3, fp
 800450c:	4622      	mov	r2, r4
 800450e:	4629      	mov	r1, r5
 8004510:	4638      	mov	r0, r7
 8004512:	f7ff ff6d 	bl	80043f0 <__ssputs_r>
 8004516:	3001      	adds	r0, #1
 8004518:	f000 80aa 	beq.w	8004670 <_svfiprintf_r+0x1c8>
 800451c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800451e:	445a      	add	r2, fp
 8004520:	9209      	str	r2, [sp, #36]	; 0x24
 8004522:	f89a 3000 	ldrb.w	r3, [sl]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80a2 	beq.w	8004670 <_svfiprintf_r+0x1c8>
 800452c:	2300      	movs	r3, #0
 800452e:	f04f 32ff 	mov.w	r2, #4294967295
 8004532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004536:	f10a 0a01 	add.w	sl, sl, #1
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	9307      	str	r3, [sp, #28]
 800453e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004542:	931a      	str	r3, [sp, #104]	; 0x68
 8004544:	4654      	mov	r4, sl
 8004546:	2205      	movs	r2, #5
 8004548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454c:	4851      	ldr	r0, [pc, #324]	; (8004694 <_svfiprintf_r+0x1ec>)
 800454e:	f000 fa41 	bl	80049d4 <memchr>
 8004552:	9a04      	ldr	r2, [sp, #16]
 8004554:	b9d8      	cbnz	r0, 800458e <_svfiprintf_r+0xe6>
 8004556:	06d0      	lsls	r0, r2, #27
 8004558:	bf44      	itt	mi
 800455a:	2320      	movmi	r3, #32
 800455c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004560:	0711      	lsls	r1, r2, #28
 8004562:	bf44      	itt	mi
 8004564:	232b      	movmi	r3, #43	; 0x2b
 8004566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800456a:	f89a 3000 	ldrb.w	r3, [sl]
 800456e:	2b2a      	cmp	r3, #42	; 0x2a
 8004570:	d015      	beq.n	800459e <_svfiprintf_r+0xf6>
 8004572:	4654      	mov	r4, sl
 8004574:	2000      	movs	r0, #0
 8004576:	f04f 0c0a 	mov.w	ip, #10
 800457a:	9a07      	ldr	r2, [sp, #28]
 800457c:	4621      	mov	r1, r4
 800457e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004582:	3b30      	subs	r3, #48	; 0x30
 8004584:	2b09      	cmp	r3, #9
 8004586:	d94e      	bls.n	8004626 <_svfiprintf_r+0x17e>
 8004588:	b1b0      	cbz	r0, 80045b8 <_svfiprintf_r+0x110>
 800458a:	9207      	str	r2, [sp, #28]
 800458c:	e014      	b.n	80045b8 <_svfiprintf_r+0x110>
 800458e:	eba0 0308 	sub.w	r3, r0, r8
 8004592:	fa09 f303 	lsl.w	r3, r9, r3
 8004596:	4313      	orrs	r3, r2
 8004598:	46a2      	mov	sl, r4
 800459a:	9304      	str	r3, [sp, #16]
 800459c:	e7d2      	b.n	8004544 <_svfiprintf_r+0x9c>
 800459e:	9b03      	ldr	r3, [sp, #12]
 80045a0:	1d19      	adds	r1, r3, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	9103      	str	r1, [sp, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bfbb      	ittet	lt
 80045aa:	425b      	neglt	r3, r3
 80045ac:	f042 0202 	orrlt.w	r2, r2, #2
 80045b0:	9307      	strge	r3, [sp, #28]
 80045b2:	9307      	strlt	r3, [sp, #28]
 80045b4:	bfb8      	it	lt
 80045b6:	9204      	strlt	r2, [sp, #16]
 80045b8:	7823      	ldrb	r3, [r4, #0]
 80045ba:	2b2e      	cmp	r3, #46	; 0x2e
 80045bc:	d10c      	bne.n	80045d8 <_svfiprintf_r+0x130>
 80045be:	7863      	ldrb	r3, [r4, #1]
 80045c0:	2b2a      	cmp	r3, #42	; 0x2a
 80045c2:	d135      	bne.n	8004630 <_svfiprintf_r+0x188>
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	3402      	adds	r4, #2
 80045c8:	1d1a      	adds	r2, r3, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	9203      	str	r2, [sp, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bfb8      	it	lt
 80045d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80045d6:	9305      	str	r3, [sp, #20]
 80045d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046a4 <_svfiprintf_r+0x1fc>
 80045dc:	2203      	movs	r2, #3
 80045de:	4650      	mov	r0, sl
 80045e0:	7821      	ldrb	r1, [r4, #0]
 80045e2:	f000 f9f7 	bl	80049d4 <memchr>
 80045e6:	b140      	cbz	r0, 80045fa <_svfiprintf_r+0x152>
 80045e8:	2340      	movs	r3, #64	; 0x40
 80045ea:	eba0 000a 	sub.w	r0, r0, sl
 80045ee:	fa03 f000 	lsl.w	r0, r3, r0
 80045f2:	9b04      	ldr	r3, [sp, #16]
 80045f4:	3401      	adds	r4, #1
 80045f6:	4303      	orrs	r3, r0
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fe:	2206      	movs	r2, #6
 8004600:	4825      	ldr	r0, [pc, #148]	; (8004698 <_svfiprintf_r+0x1f0>)
 8004602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004606:	f000 f9e5 	bl	80049d4 <memchr>
 800460a:	2800      	cmp	r0, #0
 800460c:	d038      	beq.n	8004680 <_svfiprintf_r+0x1d8>
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <_svfiprintf_r+0x1f4>)
 8004610:	bb1b      	cbnz	r3, 800465a <_svfiprintf_r+0x1b2>
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	3307      	adds	r3, #7
 8004616:	f023 0307 	bic.w	r3, r3, #7
 800461a:	3308      	adds	r3, #8
 800461c:	9303      	str	r3, [sp, #12]
 800461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004620:	4433      	add	r3, r6
 8004622:	9309      	str	r3, [sp, #36]	; 0x24
 8004624:	e767      	b.n	80044f6 <_svfiprintf_r+0x4e>
 8004626:	460c      	mov	r4, r1
 8004628:	2001      	movs	r0, #1
 800462a:	fb0c 3202 	mla	r2, ip, r2, r3
 800462e:	e7a5      	b.n	800457c <_svfiprintf_r+0xd4>
 8004630:	2300      	movs	r3, #0
 8004632:	f04f 0c0a 	mov.w	ip, #10
 8004636:	4619      	mov	r1, r3
 8004638:	3401      	adds	r4, #1
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	4620      	mov	r0, r4
 800463e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004642:	3a30      	subs	r2, #48	; 0x30
 8004644:	2a09      	cmp	r2, #9
 8004646:	d903      	bls.n	8004650 <_svfiprintf_r+0x1a8>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0c5      	beq.n	80045d8 <_svfiprintf_r+0x130>
 800464c:	9105      	str	r1, [sp, #20]
 800464e:	e7c3      	b.n	80045d8 <_svfiprintf_r+0x130>
 8004650:	4604      	mov	r4, r0
 8004652:	2301      	movs	r3, #1
 8004654:	fb0c 2101 	mla	r1, ip, r1, r2
 8004658:	e7f0      	b.n	800463c <_svfiprintf_r+0x194>
 800465a:	ab03      	add	r3, sp, #12
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	462a      	mov	r2, r5
 8004660:	4638      	mov	r0, r7
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <_svfiprintf_r+0x1f8>)
 8004664:	a904      	add	r1, sp, #16
 8004666:	f3af 8000 	nop.w
 800466a:	1c42      	adds	r2, r0, #1
 800466c:	4606      	mov	r6, r0
 800466e:	d1d6      	bne.n	800461e <_svfiprintf_r+0x176>
 8004670:	89ab      	ldrh	r3, [r5, #12]
 8004672:	065b      	lsls	r3, r3, #25
 8004674:	f53f af2c 	bmi.w	80044d0 <_svfiprintf_r+0x28>
 8004678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800467a:	b01d      	add	sp, #116	; 0x74
 800467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004680:	ab03      	add	r3, sp, #12
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	462a      	mov	r2, r5
 8004686:	4638      	mov	r0, r7
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <_svfiprintf_r+0x1f8>)
 800468a:	a904      	add	r1, sp, #16
 800468c:	f000 f87c 	bl	8004788 <_printf_i>
 8004690:	e7eb      	b.n	800466a <_svfiprintf_r+0x1c2>
 8004692:	bf00      	nop
 8004694:	08004c70 	.word	0x08004c70
 8004698:	08004c7a 	.word	0x08004c7a
 800469c:	00000000 	.word	0x00000000
 80046a0:	080043f1 	.word	0x080043f1
 80046a4:	08004c76 	.word	0x08004c76

080046a8 <_printf_common>:
 80046a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ac:	4616      	mov	r6, r2
 80046ae:	4699      	mov	r9, r3
 80046b0:	688a      	ldr	r2, [r1, #8]
 80046b2:	690b      	ldr	r3, [r1, #16]
 80046b4:	4607      	mov	r7, r0
 80046b6:	4293      	cmp	r3, r2
 80046b8:	bfb8      	it	lt
 80046ba:	4613      	movlt	r3, r2
 80046bc:	6033      	str	r3, [r6, #0]
 80046be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c2:	460c      	mov	r4, r1
 80046c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046c8:	b10a      	cbz	r2, 80046ce <_printf_common+0x26>
 80046ca:	3301      	adds	r3, #1
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	0699      	lsls	r1, r3, #26
 80046d2:	bf42      	ittt	mi
 80046d4:	6833      	ldrmi	r3, [r6, #0]
 80046d6:	3302      	addmi	r3, #2
 80046d8:	6033      	strmi	r3, [r6, #0]
 80046da:	6825      	ldr	r5, [r4, #0]
 80046dc:	f015 0506 	ands.w	r5, r5, #6
 80046e0:	d106      	bne.n	80046f0 <_printf_common+0x48>
 80046e2:	f104 0a19 	add.w	sl, r4, #25
 80046e6:	68e3      	ldr	r3, [r4, #12]
 80046e8:	6832      	ldr	r2, [r6, #0]
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	42ab      	cmp	r3, r5
 80046ee:	dc28      	bgt.n	8004742 <_printf_common+0x9a>
 80046f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046f4:	1e13      	subs	r3, r2, #0
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	bf18      	it	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	0692      	lsls	r2, r2, #26
 80046fe:	d42d      	bmi.n	800475c <_printf_common+0xb4>
 8004700:	4649      	mov	r1, r9
 8004702:	4638      	mov	r0, r7
 8004704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d020      	beq.n	8004750 <_printf_common+0xa8>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	68e5      	ldr	r5, [r4, #12]
 8004712:	f003 0306 	and.w	r3, r3, #6
 8004716:	2b04      	cmp	r3, #4
 8004718:	bf18      	it	ne
 800471a:	2500      	movne	r5, #0
 800471c:	6832      	ldr	r2, [r6, #0]
 800471e:	f04f 0600 	mov.w	r6, #0
 8004722:	68a3      	ldr	r3, [r4, #8]
 8004724:	bf08      	it	eq
 8004726:	1aad      	subeq	r5, r5, r2
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	bf08      	it	eq
 800472c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004730:	4293      	cmp	r3, r2
 8004732:	bfc4      	itt	gt
 8004734:	1a9b      	subgt	r3, r3, r2
 8004736:	18ed      	addgt	r5, r5, r3
 8004738:	341a      	adds	r4, #26
 800473a:	42b5      	cmp	r5, r6
 800473c:	d11a      	bne.n	8004774 <_printf_common+0xcc>
 800473e:	2000      	movs	r0, #0
 8004740:	e008      	b.n	8004754 <_printf_common+0xac>
 8004742:	2301      	movs	r3, #1
 8004744:	4652      	mov	r2, sl
 8004746:	4649      	mov	r1, r9
 8004748:	4638      	mov	r0, r7
 800474a:	47c0      	blx	r8
 800474c:	3001      	adds	r0, #1
 800474e:	d103      	bne.n	8004758 <_printf_common+0xb0>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004758:	3501      	adds	r5, #1
 800475a:	e7c4      	b.n	80046e6 <_printf_common+0x3e>
 800475c:	2030      	movs	r0, #48	; 0x30
 800475e:	18e1      	adds	r1, r4, r3
 8004760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800476a:	4422      	add	r2, r4
 800476c:	3302      	adds	r3, #2
 800476e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004772:	e7c5      	b.n	8004700 <_printf_common+0x58>
 8004774:	2301      	movs	r3, #1
 8004776:	4622      	mov	r2, r4
 8004778:	4649      	mov	r1, r9
 800477a:	4638      	mov	r0, r7
 800477c:	47c0      	blx	r8
 800477e:	3001      	adds	r0, #1
 8004780:	d0e6      	beq.n	8004750 <_printf_common+0xa8>
 8004782:	3601      	adds	r6, #1
 8004784:	e7d9      	b.n	800473a <_printf_common+0x92>
	...

08004788 <_printf_i>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	460c      	mov	r4, r1
 800478e:	7e27      	ldrb	r7, [r4, #24]
 8004790:	4691      	mov	r9, r2
 8004792:	2f78      	cmp	r7, #120	; 0x78
 8004794:	4680      	mov	r8, r0
 8004796:	469a      	mov	sl, r3
 8004798:	990c      	ldr	r1, [sp, #48]	; 0x30
 800479a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800479e:	d807      	bhi.n	80047b0 <_printf_i+0x28>
 80047a0:	2f62      	cmp	r7, #98	; 0x62
 80047a2:	d80a      	bhi.n	80047ba <_printf_i+0x32>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	f000 80d9 	beq.w	800495c <_printf_i+0x1d4>
 80047aa:	2f58      	cmp	r7, #88	; 0x58
 80047ac:	f000 80a4 	beq.w	80048f8 <_printf_i+0x170>
 80047b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047b8:	e03a      	b.n	8004830 <_printf_i+0xa8>
 80047ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047be:	2b15      	cmp	r3, #21
 80047c0:	d8f6      	bhi.n	80047b0 <_printf_i+0x28>
 80047c2:	a001      	add	r0, pc, #4	; (adr r0, 80047c8 <_printf_i+0x40>)
 80047c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004835 	.word	0x08004835
 80047d0:	080047b1 	.word	0x080047b1
 80047d4:	080047b1 	.word	0x080047b1
 80047d8:	080047b1 	.word	0x080047b1
 80047dc:	080047b1 	.word	0x080047b1
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080047b1 	.word	0x080047b1
 80047e8:	080047b1 	.word	0x080047b1
 80047ec:	080047b1 	.word	0x080047b1
 80047f0:	080047b1 	.word	0x080047b1
 80047f4:	08004943 	.word	0x08004943
 80047f8:	08004865 	.word	0x08004865
 80047fc:	08004925 	.word	0x08004925
 8004800:	080047b1 	.word	0x080047b1
 8004804:	080047b1 	.word	0x080047b1
 8004808:	08004965 	.word	0x08004965
 800480c:	080047b1 	.word	0x080047b1
 8004810:	08004865 	.word	0x08004865
 8004814:	080047b1 	.word	0x080047b1
 8004818:	080047b1 	.word	0x080047b1
 800481c:	0800492d 	.word	0x0800492d
 8004820:	680b      	ldr	r3, [r1, #0]
 8004822:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	600a      	str	r2, [r1, #0]
 800482c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004830:	2301      	movs	r3, #1
 8004832:	e0a4      	b.n	800497e <_printf_i+0x1f6>
 8004834:	6825      	ldr	r5, [r4, #0]
 8004836:	6808      	ldr	r0, [r1, #0]
 8004838:	062e      	lsls	r6, r5, #24
 800483a:	f100 0304 	add.w	r3, r0, #4
 800483e:	d50a      	bpl.n	8004856 <_printf_i+0xce>
 8004840:	6805      	ldr	r5, [r0, #0]
 8004842:	600b      	str	r3, [r1, #0]
 8004844:	2d00      	cmp	r5, #0
 8004846:	da03      	bge.n	8004850 <_printf_i+0xc8>
 8004848:	232d      	movs	r3, #45	; 0x2d
 800484a:	426d      	negs	r5, r5
 800484c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004850:	230a      	movs	r3, #10
 8004852:	485e      	ldr	r0, [pc, #376]	; (80049cc <_printf_i+0x244>)
 8004854:	e019      	b.n	800488a <_printf_i+0x102>
 8004856:	f015 0f40 	tst.w	r5, #64	; 0x40
 800485a:	6805      	ldr	r5, [r0, #0]
 800485c:	600b      	str	r3, [r1, #0]
 800485e:	bf18      	it	ne
 8004860:	b22d      	sxthne	r5, r5
 8004862:	e7ef      	b.n	8004844 <_printf_i+0xbc>
 8004864:	680b      	ldr	r3, [r1, #0]
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	1d18      	adds	r0, r3, #4
 800486a:	6008      	str	r0, [r1, #0]
 800486c:	0628      	lsls	r0, r5, #24
 800486e:	d501      	bpl.n	8004874 <_printf_i+0xec>
 8004870:	681d      	ldr	r5, [r3, #0]
 8004872:	e002      	b.n	800487a <_printf_i+0xf2>
 8004874:	0669      	lsls	r1, r5, #25
 8004876:	d5fb      	bpl.n	8004870 <_printf_i+0xe8>
 8004878:	881d      	ldrh	r5, [r3, #0]
 800487a:	2f6f      	cmp	r7, #111	; 0x6f
 800487c:	bf0c      	ite	eq
 800487e:	2308      	moveq	r3, #8
 8004880:	230a      	movne	r3, #10
 8004882:	4852      	ldr	r0, [pc, #328]	; (80049cc <_printf_i+0x244>)
 8004884:	2100      	movs	r1, #0
 8004886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800488a:	6866      	ldr	r6, [r4, #4]
 800488c:	2e00      	cmp	r6, #0
 800488e:	bfa8      	it	ge
 8004890:	6821      	ldrge	r1, [r4, #0]
 8004892:	60a6      	str	r6, [r4, #8]
 8004894:	bfa4      	itt	ge
 8004896:	f021 0104 	bicge.w	r1, r1, #4
 800489a:	6021      	strge	r1, [r4, #0]
 800489c:	b90d      	cbnz	r5, 80048a2 <_printf_i+0x11a>
 800489e:	2e00      	cmp	r6, #0
 80048a0:	d04d      	beq.n	800493e <_printf_i+0x1b6>
 80048a2:	4616      	mov	r6, r2
 80048a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80048a8:	fb03 5711 	mls	r7, r3, r1, r5
 80048ac:	5dc7      	ldrb	r7, [r0, r7]
 80048ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b2:	462f      	mov	r7, r5
 80048b4:	42bb      	cmp	r3, r7
 80048b6:	460d      	mov	r5, r1
 80048b8:	d9f4      	bls.n	80048a4 <_printf_i+0x11c>
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d10b      	bne.n	80048d6 <_printf_i+0x14e>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	07df      	lsls	r7, r3, #31
 80048c2:	d508      	bpl.n	80048d6 <_printf_i+0x14e>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	6861      	ldr	r1, [r4, #4]
 80048c8:	4299      	cmp	r1, r3
 80048ca:	bfde      	ittt	le
 80048cc:	2330      	movle	r3, #48	; 0x30
 80048ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048d6:	1b92      	subs	r2, r2, r6
 80048d8:	6122      	str	r2, [r4, #16]
 80048da:	464b      	mov	r3, r9
 80048dc:	4621      	mov	r1, r4
 80048de:	4640      	mov	r0, r8
 80048e0:	f8cd a000 	str.w	sl, [sp]
 80048e4:	aa03      	add	r2, sp, #12
 80048e6:	f7ff fedf 	bl	80046a8 <_printf_common>
 80048ea:	3001      	adds	r0, #1
 80048ec:	d14c      	bne.n	8004988 <_printf_i+0x200>
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295
 80048f2:	b004      	add	sp, #16
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	4834      	ldr	r0, [pc, #208]	; (80049cc <_printf_i+0x244>)
 80048fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048fe:	680e      	ldr	r6, [r1, #0]
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	f856 5b04 	ldr.w	r5, [r6], #4
 8004906:	061f      	lsls	r7, r3, #24
 8004908:	600e      	str	r6, [r1, #0]
 800490a:	d514      	bpl.n	8004936 <_printf_i+0x1ae>
 800490c:	07d9      	lsls	r1, r3, #31
 800490e:	bf44      	itt	mi
 8004910:	f043 0320 	orrmi.w	r3, r3, #32
 8004914:	6023      	strmi	r3, [r4, #0]
 8004916:	b91d      	cbnz	r5, 8004920 <_printf_i+0x198>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	f023 0320 	bic.w	r3, r3, #32
 800491e:	6023      	str	r3, [r4, #0]
 8004920:	2310      	movs	r3, #16
 8004922:	e7af      	b.n	8004884 <_printf_i+0xfc>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	f043 0320 	orr.w	r3, r3, #32
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	2378      	movs	r3, #120	; 0x78
 800492e:	4828      	ldr	r0, [pc, #160]	; (80049d0 <_printf_i+0x248>)
 8004930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004934:	e7e3      	b.n	80048fe <_printf_i+0x176>
 8004936:	065e      	lsls	r6, r3, #25
 8004938:	bf48      	it	mi
 800493a:	b2ad      	uxthmi	r5, r5
 800493c:	e7e6      	b.n	800490c <_printf_i+0x184>
 800493e:	4616      	mov	r6, r2
 8004940:	e7bb      	b.n	80048ba <_printf_i+0x132>
 8004942:	680b      	ldr	r3, [r1, #0]
 8004944:	6826      	ldr	r6, [r4, #0]
 8004946:	1d1d      	adds	r5, r3, #4
 8004948:	6960      	ldr	r0, [r4, #20]
 800494a:	600d      	str	r5, [r1, #0]
 800494c:	0635      	lsls	r5, r6, #24
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	d501      	bpl.n	8004956 <_printf_i+0x1ce>
 8004952:	6018      	str	r0, [r3, #0]
 8004954:	e002      	b.n	800495c <_printf_i+0x1d4>
 8004956:	0671      	lsls	r1, r6, #25
 8004958:	d5fb      	bpl.n	8004952 <_printf_i+0x1ca>
 800495a:	8018      	strh	r0, [r3, #0]
 800495c:	2300      	movs	r3, #0
 800495e:	4616      	mov	r6, r2
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	e7ba      	b.n	80048da <_printf_i+0x152>
 8004964:	680b      	ldr	r3, [r1, #0]
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	600a      	str	r2, [r1, #0]
 800496a:	681e      	ldr	r6, [r3, #0]
 800496c:	2100      	movs	r1, #0
 800496e:	4630      	mov	r0, r6
 8004970:	6862      	ldr	r2, [r4, #4]
 8004972:	f000 f82f 	bl	80049d4 <memchr>
 8004976:	b108      	cbz	r0, 800497c <_printf_i+0x1f4>
 8004978:	1b80      	subs	r0, r0, r6
 800497a:	6060      	str	r0, [r4, #4]
 800497c:	6863      	ldr	r3, [r4, #4]
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	2300      	movs	r3, #0
 8004982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004986:	e7a8      	b.n	80048da <_printf_i+0x152>
 8004988:	4632      	mov	r2, r6
 800498a:	4649      	mov	r1, r9
 800498c:	4640      	mov	r0, r8
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	47d0      	blx	sl
 8004992:	3001      	adds	r0, #1
 8004994:	d0ab      	beq.n	80048ee <_printf_i+0x166>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	079b      	lsls	r3, r3, #30
 800499a:	d413      	bmi.n	80049c4 <_printf_i+0x23c>
 800499c:	68e0      	ldr	r0, [r4, #12]
 800499e:	9b03      	ldr	r3, [sp, #12]
 80049a0:	4298      	cmp	r0, r3
 80049a2:	bfb8      	it	lt
 80049a4:	4618      	movlt	r0, r3
 80049a6:	e7a4      	b.n	80048f2 <_printf_i+0x16a>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4632      	mov	r2, r6
 80049ac:	4649      	mov	r1, r9
 80049ae:	4640      	mov	r0, r8
 80049b0:	47d0      	blx	sl
 80049b2:	3001      	adds	r0, #1
 80049b4:	d09b      	beq.n	80048ee <_printf_i+0x166>
 80049b6:	3501      	adds	r5, #1
 80049b8:	68e3      	ldr	r3, [r4, #12]
 80049ba:	9903      	ldr	r1, [sp, #12]
 80049bc:	1a5b      	subs	r3, r3, r1
 80049be:	42ab      	cmp	r3, r5
 80049c0:	dcf2      	bgt.n	80049a8 <_printf_i+0x220>
 80049c2:	e7eb      	b.n	800499c <_printf_i+0x214>
 80049c4:	2500      	movs	r5, #0
 80049c6:	f104 0619 	add.w	r6, r4, #25
 80049ca:	e7f5      	b.n	80049b8 <_printf_i+0x230>
 80049cc:	08004c81 	.word	0x08004c81
 80049d0:	08004c92 	.word	0x08004c92

080049d4 <memchr>:
 80049d4:	4603      	mov	r3, r0
 80049d6:	b510      	push	{r4, lr}
 80049d8:	b2c9      	uxtb	r1, r1
 80049da:	4402      	add	r2, r0
 80049dc:	4293      	cmp	r3, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	d101      	bne.n	80049e6 <memchr+0x12>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e003      	b.n	80049ee <memchr+0x1a>
 80049e6:	7804      	ldrb	r4, [r0, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	428c      	cmp	r4, r1
 80049ec:	d1f6      	bne.n	80049dc <memchr+0x8>
 80049ee:	bd10      	pop	{r4, pc}

080049f0 <memcpy>:
 80049f0:	440a      	add	r2, r1
 80049f2:	4291      	cmp	r1, r2
 80049f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f8:	d100      	bne.n	80049fc <memcpy+0xc>
 80049fa:	4770      	bx	lr
 80049fc:	b510      	push	{r4, lr}
 80049fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a02:	4291      	cmp	r1, r2
 8004a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a08:	d1f9      	bne.n	80049fe <memcpy+0xe>
 8004a0a:	bd10      	pop	{r4, pc}

08004a0c <memmove>:
 8004a0c:	4288      	cmp	r0, r1
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	eb01 0402 	add.w	r4, r1, r2
 8004a14:	d902      	bls.n	8004a1c <memmove+0x10>
 8004a16:	4284      	cmp	r4, r0
 8004a18:	4623      	mov	r3, r4
 8004a1a:	d807      	bhi.n	8004a2c <memmove+0x20>
 8004a1c:	1e43      	subs	r3, r0, #1
 8004a1e:	42a1      	cmp	r1, r4
 8004a20:	d008      	beq.n	8004a34 <memmove+0x28>
 8004a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a2a:	e7f8      	b.n	8004a1e <memmove+0x12>
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	4402      	add	r2, r0
 8004a30:	428a      	cmp	r2, r1
 8004a32:	d100      	bne.n	8004a36 <memmove+0x2a>
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a3e:	e7f7      	b.n	8004a30 <memmove+0x24>

08004a40 <_free_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4605      	mov	r5, r0
 8004a44:	2900      	cmp	r1, #0
 8004a46:	d043      	beq.n	8004ad0 <_free_r+0x90>
 8004a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a4c:	1f0c      	subs	r4, r1, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bfb8      	it	lt
 8004a52:	18e4      	addlt	r4, r4, r3
 8004a54:	f000 f8d0 	bl	8004bf8 <__malloc_lock>
 8004a58:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <_free_r+0x94>)
 8004a5a:	6813      	ldr	r3, [r2, #0]
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	b933      	cbnz	r3, 8004a6e <_free_r+0x2e>
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	6014      	str	r4, [r2, #0]
 8004a64:	4628      	mov	r0, r5
 8004a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a6a:	f000 b8cb 	b.w	8004c04 <__malloc_unlock>
 8004a6e:	42a3      	cmp	r3, r4
 8004a70:	d90a      	bls.n	8004a88 <_free_r+0x48>
 8004a72:	6821      	ldr	r1, [r4, #0]
 8004a74:	1862      	adds	r2, r4, r1
 8004a76:	4293      	cmp	r3, r2
 8004a78:	bf01      	itttt	eq
 8004a7a:	681a      	ldreq	r2, [r3, #0]
 8004a7c:	685b      	ldreq	r3, [r3, #4]
 8004a7e:	1852      	addeq	r2, r2, r1
 8004a80:	6022      	streq	r2, [r4, #0]
 8004a82:	6063      	str	r3, [r4, #4]
 8004a84:	6004      	str	r4, [r0, #0]
 8004a86:	e7ed      	b.n	8004a64 <_free_r+0x24>
 8004a88:	461a      	mov	r2, r3
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	b10b      	cbz	r3, 8004a92 <_free_r+0x52>
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	d9fa      	bls.n	8004a88 <_free_r+0x48>
 8004a92:	6811      	ldr	r1, [r2, #0]
 8004a94:	1850      	adds	r0, r2, r1
 8004a96:	42a0      	cmp	r0, r4
 8004a98:	d10b      	bne.n	8004ab2 <_free_r+0x72>
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	4401      	add	r1, r0
 8004a9e:	1850      	adds	r0, r2, r1
 8004aa0:	4283      	cmp	r3, r0
 8004aa2:	6011      	str	r1, [r2, #0]
 8004aa4:	d1de      	bne.n	8004a64 <_free_r+0x24>
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4401      	add	r1, r0
 8004aac:	6011      	str	r1, [r2, #0]
 8004aae:	6053      	str	r3, [r2, #4]
 8004ab0:	e7d8      	b.n	8004a64 <_free_r+0x24>
 8004ab2:	d902      	bls.n	8004aba <_free_r+0x7a>
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	e7d4      	b.n	8004a64 <_free_r+0x24>
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	1821      	adds	r1, r4, r0
 8004abe:	428b      	cmp	r3, r1
 8004ac0:	bf01      	itttt	eq
 8004ac2:	6819      	ldreq	r1, [r3, #0]
 8004ac4:	685b      	ldreq	r3, [r3, #4]
 8004ac6:	1809      	addeq	r1, r1, r0
 8004ac8:	6021      	streq	r1, [r4, #0]
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	6054      	str	r4, [r2, #4]
 8004ace:	e7c9      	b.n	8004a64 <_free_r+0x24>
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	2000014c 	.word	0x2000014c

08004ad8 <_malloc_r>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	1ccd      	adds	r5, r1, #3
 8004adc:	f025 0503 	bic.w	r5, r5, #3
 8004ae0:	3508      	adds	r5, #8
 8004ae2:	2d0c      	cmp	r5, #12
 8004ae4:	bf38      	it	cc
 8004ae6:	250c      	movcc	r5, #12
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	4606      	mov	r6, r0
 8004aec:	db01      	blt.n	8004af2 <_malloc_r+0x1a>
 8004aee:	42a9      	cmp	r1, r5
 8004af0:	d903      	bls.n	8004afa <_malloc_r+0x22>
 8004af2:	230c      	movs	r3, #12
 8004af4:	6033      	str	r3, [r6, #0]
 8004af6:	2000      	movs	r0, #0
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afa:	f000 f87d 	bl	8004bf8 <__malloc_lock>
 8004afe:	4921      	ldr	r1, [pc, #132]	; (8004b84 <_malloc_r+0xac>)
 8004b00:	680a      	ldr	r2, [r1, #0]
 8004b02:	4614      	mov	r4, r2
 8004b04:	b99c      	cbnz	r4, 8004b2e <_malloc_r+0x56>
 8004b06:	4f20      	ldr	r7, [pc, #128]	; (8004b88 <_malloc_r+0xb0>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	b923      	cbnz	r3, 8004b16 <_malloc_r+0x3e>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f000 f862 	bl	8004bd8 <_sbrk_r>
 8004b14:	6038      	str	r0, [r7, #0]
 8004b16:	4629      	mov	r1, r5
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 f85d 	bl	8004bd8 <_sbrk_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	d123      	bne.n	8004b6a <_malloc_r+0x92>
 8004b22:	230c      	movs	r3, #12
 8004b24:	4630      	mov	r0, r6
 8004b26:	6033      	str	r3, [r6, #0]
 8004b28:	f000 f86c 	bl	8004c04 <__malloc_unlock>
 8004b2c:	e7e3      	b.n	8004af6 <_malloc_r+0x1e>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	1b5b      	subs	r3, r3, r5
 8004b32:	d417      	bmi.n	8004b64 <_malloc_r+0x8c>
 8004b34:	2b0b      	cmp	r3, #11
 8004b36:	d903      	bls.n	8004b40 <_malloc_r+0x68>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	441c      	add	r4, r3
 8004b3c:	6025      	str	r5, [r4, #0]
 8004b3e:	e004      	b.n	8004b4a <_malloc_r+0x72>
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	42a2      	cmp	r2, r4
 8004b44:	bf0c      	ite	eq
 8004b46:	600b      	streq	r3, [r1, #0]
 8004b48:	6053      	strne	r3, [r2, #4]
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f000 f85a 	bl	8004c04 <__malloc_unlock>
 8004b50:	f104 000b 	add.w	r0, r4, #11
 8004b54:	1d23      	adds	r3, r4, #4
 8004b56:	f020 0007 	bic.w	r0, r0, #7
 8004b5a:	1ac2      	subs	r2, r0, r3
 8004b5c:	d0cc      	beq.n	8004af8 <_malloc_r+0x20>
 8004b5e:	1a1b      	subs	r3, r3, r0
 8004b60:	50a3      	str	r3, [r4, r2]
 8004b62:	e7c9      	b.n	8004af8 <_malloc_r+0x20>
 8004b64:	4622      	mov	r2, r4
 8004b66:	6864      	ldr	r4, [r4, #4]
 8004b68:	e7cc      	b.n	8004b04 <_malloc_r+0x2c>
 8004b6a:	1cc4      	adds	r4, r0, #3
 8004b6c:	f024 0403 	bic.w	r4, r4, #3
 8004b70:	42a0      	cmp	r0, r4
 8004b72:	d0e3      	beq.n	8004b3c <_malloc_r+0x64>
 8004b74:	1a21      	subs	r1, r4, r0
 8004b76:	4630      	mov	r0, r6
 8004b78:	f000 f82e 	bl	8004bd8 <_sbrk_r>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d1dd      	bne.n	8004b3c <_malloc_r+0x64>
 8004b80:	e7cf      	b.n	8004b22 <_malloc_r+0x4a>
 8004b82:	bf00      	nop
 8004b84:	2000014c 	.word	0x2000014c
 8004b88:	20000150 	.word	0x20000150

08004b8c <_realloc_r>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	4607      	mov	r7, r0
 8004b90:	4614      	mov	r4, r2
 8004b92:	460e      	mov	r6, r1
 8004b94:	b921      	cbnz	r1, 8004ba0 <_realloc_r+0x14>
 8004b96:	4611      	mov	r1, r2
 8004b98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b9c:	f7ff bf9c 	b.w	8004ad8 <_malloc_r>
 8004ba0:	b922      	cbnz	r2, 8004bac <_realloc_r+0x20>
 8004ba2:	f7ff ff4d 	bl	8004a40 <_free_r>
 8004ba6:	4625      	mov	r5, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bac:	f000 f830 	bl	8004c10 <_malloc_usable_size_r>
 8004bb0:	42a0      	cmp	r0, r4
 8004bb2:	d20f      	bcs.n	8004bd4 <_realloc_r+0x48>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f7ff ff8e 	bl	8004ad8 <_malloc_r>
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d0f2      	beq.n	8004ba8 <_realloc_r+0x1c>
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	f7ff ff13 	bl	80049f0 <memcpy>
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ff37 	bl	8004a40 <_free_r>
 8004bd2:	e7e9      	b.n	8004ba8 <_realloc_r+0x1c>
 8004bd4:	4635      	mov	r5, r6
 8004bd6:	e7e7      	b.n	8004ba8 <_realloc_r+0x1c>

08004bd8 <_sbrk_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	2300      	movs	r3, #0
 8004bdc:	4d05      	ldr	r5, [pc, #20]	; (8004bf4 <_sbrk_r+0x1c>)
 8004bde:	4604      	mov	r4, r0
 8004be0:	4608      	mov	r0, r1
 8004be2:	602b      	str	r3, [r5, #0]
 8004be4:	f7fc fd1a 	bl	800161c <_sbrk>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_sbrk_r+0x1a>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_sbrk_r+0x1a>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	2000054c 	.word	0x2000054c

08004bf8 <__malloc_lock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__malloc_lock+0x8>)
 8004bfa:	f000 b811 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20000554 	.word	0x20000554

08004c04 <__malloc_unlock>:
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <__malloc_unlock+0x8>)
 8004c06:	f000 b80c 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004c0a:	bf00      	nop
 8004c0c:	20000554 	.word	0x20000554

08004c10 <_malloc_usable_size_r>:
 8004c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c14:	1f18      	subs	r0, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfbc      	itt	lt
 8004c1a:	580b      	ldrlt	r3, [r1, r0]
 8004c1c:	18c0      	addlt	r0, r0, r3
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_acquire_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_release_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <_init>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr

08004c30 <_fini>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr
