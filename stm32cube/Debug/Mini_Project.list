
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800450c  0800450c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800450c  0800450c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800450c  0800450c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000098  080045ac  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080045ac  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d1f  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003097  00000000  00000000  00037de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0003ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  0003bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d6c  00000000  00000000  0003c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012003  00000000  00000000  000566e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b39f  00000000  00000000  000686e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b84  00000000  00000000  000f3adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800448c 	.word	0x0800448c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800448c 	.word	0x0800448c

0800014c <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000104 	.word	0x20000104

08000180 <button_process>:

void button_process(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2b00      	cmp	r3, #0
 800018c:	db07      	blt.n	800019e <button_process+0x1e>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2b03      	cmp	r3, #3
 8000192:	dc04      	bgt.n	800019e <button_process+0x1e>
		button_flag[index] = 1;
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <button_process+0x28>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2101      	movs	r1, #1
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000104 	.word	0x20000104

080001ac <button_reading>:

void button_reading(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 80001b2:	2300      	movs	r3, #0
 80001b4:	71fb      	strb	r3, [r7, #7]
 80001b6:	e0e5      	b.n	8000384 <button_reading+0x1d8>
        //debouncing button
		debounce_buffer3[i] = debounce_buffer2[i];
 80001b8:	79fa      	ldrb	r2, [r7, #7]
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	4976      	ldr	r1, [pc, #472]	; (8000398 <button_reading+0x1ec>)
 80001be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001c2:	4976      	ldr	r1, [pc, #472]	; (800039c <button_reading+0x1f0>)
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 80001c8:	79fa      	ldrb	r2, [r7, #7]
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	4974      	ldr	r1, [pc, #464]	; (80003a0 <button_reading+0x1f4>)
 80001ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001d2:	4971      	ldr	r1, [pc, #452]	; (8000398 <button_reading+0x1ec>)
 80001d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// readpin
		//...

		if(i == 0) debounce_buffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d10b      	bne.n	80001f6 <button_reading+0x4a>
 80001de:	2101      	movs	r1, #1
 80001e0:	4870      	ldr	r0, [pc, #448]	; (80003a4 <button_reading+0x1f8>)
 80001e2:	f001 ff85 	bl	80020f0 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4611      	mov	r1, r2
 80001ee:	4a6c      	ldr	r2, [pc, #432]	; (80003a0 <button_reading+0x1f4>)
 80001f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001f4:	e02b      	b.n	800024e <button_reading+0xa2>
		else if(i == 1) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d10b      	bne.n	8000214 <button_reading+0x68>
 80001fc:	2102      	movs	r1, #2
 80001fe:	4869      	ldr	r0, [pc, #420]	; (80003a4 <button_reading+0x1f8>)
 8000200:	f001 ff76 	bl	80020f0 <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4611      	mov	r1, r2
 800020c:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <button_reading+0x1f4>)
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000212:	e01c      	b.n	800024e <button_reading+0xa2>
		else if(i == 2) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b02      	cmp	r3, #2
 8000218:	d10b      	bne.n	8000232 <button_reading+0x86>
 800021a:	2110      	movs	r1, #16
 800021c:	4861      	ldr	r0, [pc, #388]	; (80003a4 <button_reading+0x1f8>)
 800021e:	f001 ff67 	bl	80020f0 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	461a      	mov	r2, r3
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4611      	mov	r1, r2
 800022a:	4a5d      	ldr	r2, [pc, #372]	; (80003a0 <button_reading+0x1f4>)
 800022c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000230:	e00d      	b.n	800024e <button_reading+0xa2>
		else if(i == 3) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b03      	cmp	r3, #3
 8000236:	d10a      	bne.n	800024e <button_reading+0xa2>
 8000238:	2101      	movs	r1, #1
 800023a:	485b      	ldr	r0, [pc, #364]	; (80003a8 <button_reading+0x1fc>)
 800023c:	f001 ff58 	bl	80020f0 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	461a      	mov	r2, r3
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	4611      	mov	r1, r2
 8000248:	4a55      	ldr	r2, [pc, #340]	; (80003a0 <button_reading+0x1f4>)
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


        //process after debouncing
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4a52      	ldr	r2, [pc, #328]	; (800039c <button_reading+0x1f0>)
 8000252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	494f      	ldr	r1, [pc, #316]	; (8000398 <button_reading+0x1ec>)
 800025a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025e:	429a      	cmp	r2, r3
 8000260:	f040 8084 	bne.w	800036c <button_reading+0x1c0>
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	4a4c      	ldr	r2, [pc, #304]	; (8000398 <button_reading+0x1ec>)
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	494c      	ldr	r1, [pc, #304]	; (80003a0 <button_reading+0x1f4>)
 8000270:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000274:	429a      	cmp	r2, r3
 8000276:	d179      	bne.n	800036c <button_reading+0x1c0>
			button_buffer[i] = debounce_buffer3[i];
 8000278:	79fa      	ldrb	r2, [r7, #7]
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4947      	ldr	r1, [pc, #284]	; (800039c <button_reading+0x1f0>)
 800027e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000282:	494a      	ldr	r1, [pc, #296]	; (80003ac <button_reading+0x200>)
 8000284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// fsm for processing button
			switch(button_state[i]){
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4a49      	ldr	r2, [pc, #292]	; (80003b0 <button_reading+0x204>)
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b0d      	cmp	r3, #13
 8000292:	d043      	beq.n	800031c <button_reading+0x170>
 8000294:	2b0d      	cmp	r3, #13
 8000296:	dc6b      	bgt.n	8000370 <button_reading+0x1c4>
 8000298:	2b0b      	cmp	r3, #11
 800029a:	d002      	beq.n	80002a2 <button_reading+0xf6>
 800029c:	2b0c      	cmp	r3, #12
 800029e:	d02d      	beq.n	80002fc <button_reading+0x150>
					button_state[i] = BUTTON_IS_RELEASED;
					counter_for_button_pressed[i] = 0;
				}
				break;
			default:
				break;
 80002a0:	e066      	b.n	8000370 <button_reading+0x1c4>
				counter_for_button_pressed[i]++;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	4a43      	ldr	r2, [pc, #268]	; (80003b4 <button_reading+0x208>)
 80002a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002aa:	3201      	adds	r2, #1
 80002ac:	4941      	ldr	r1, [pc, #260]	; (80003b4 <button_reading+0x208>)
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == WAITING_TIME/TIMER_CYCLE){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4a3f      	ldr	r2, [pc, #252]	; (80003b4 <button_reading+0x208>)
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	2b64      	cmp	r3, #100	; 0x64
 80002bc:	d10d      	bne.n	80002da <button_reading+0x12e>
					button_state[i] = BUTTON_IS_LONG_PRESSED;
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <button_reading+0x204>)
 80002c2:	210d      	movs	r1, #13
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	4a3a      	ldr	r2, [pc, #232]	; (80003b4 <button_reading+0x208>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff53 	bl	8000180 <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a33      	ldr	r2, [pc, #204]	; (80003ac <button_reading+0x200>)
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d146      	bne.n	8000374 <button_reading+0x1c8>
					button_state[i] = BUTTON_IS_RELEASED;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4a31      	ldr	r2, [pc, #196]	; (80003b0 <button_reading+0x204>)
 80002ea:	210c      	movs	r1, #12
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a30      	ldr	r2, [pc, #192]	; (80003b4 <button_reading+0x208>)
 80002f4:	2100      	movs	r1, #0
 80002f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80002fa:	e03b      	b.n	8000374 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <button_reading+0x200>)
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d137      	bne.n	8000378 <button_reading+0x1cc>
					button_state[i] = BUTTON_IS_PRESSED;
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <button_reading+0x204>)
 800030c:	210b      	movs	r1, #11
 800030e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff33 	bl	8000180 <button_process>
				break;
 800031a:	e02d      	b.n	8000378 <button_reading+0x1cc>
				counter_for_button_pressed[i]++;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <button_reading+0x208>)
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	3201      	adds	r2, #1
 8000326:	4923      	ldr	r1, [pc, #140]	; (80003b4 <button_reading+0x208>)
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	4a21      	ldr	r2, [pc, #132]	; (80003b4 <button_reading+0x208>)
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b14      	cmp	r3, #20
 8000336:	d108      	bne.n	800034a <button_reading+0x19e>
					button_process(i);
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff20 	bl	8000180 <button_process>
					counter_for_button_pressed[i] = 0;
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a1c      	ldr	r2, [pc, #112]	; (80003b4 <button_reading+0x208>)
 8000344:	2100      	movs	r1, #0
 8000346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4a17      	ldr	r2, [pc, #92]	; (80003ac <button_reading+0x200>)
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d112      	bne.n	800037c <button_reading+0x1d0>
					button_state[i] = BUTTON_IS_RELEASED;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	4a15      	ldr	r2, [pc, #84]	; (80003b0 <button_reading+0x204>)
 800035a:	210c      	movs	r1, #12
 800035c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <button_reading+0x208>)
 8000364:	2100      	movs	r1, #0
 8000366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800036a:	e007      	b.n	800037c <button_reading+0x1d0>
			}
		}
 800036c:	bf00      	nop
 800036e:	e006      	b.n	800037e <button_reading+0x1d2>
				break;
 8000370:	bf00      	nop
 8000372:	e004      	b.n	800037e <button_reading+0x1d2>
				break;
 8000374:	bf00      	nop
 8000376:	e002      	b.n	800037e <button_reading+0x1d2>
				break;
 8000378:	bf00      	nop
 800037a:	e000      	b.n	800037e <button_reading+0x1d2>
				break;
 800037c:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	3301      	adds	r3, #1
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b03      	cmp	r3, #3
 8000388:	f67f af16 	bls.w	80001b8 <button_reading+0xc>
	}
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000d4 	.word	0x200000d4
 800039c:	200000e4 	.word	0x200000e4
 80003a0:	200000c4 	.word	0x200000c4
 80003a4:	40010800 	.word	0x40010800
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	200000b4 	.word	0x200000b4
 80003b0:	20000000 	.word	0x20000000
 80003b4:	200000f4 	.word	0x200000f4

080003b8 <fsm_auto_run>:
 *      Author: phamv
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	switch (status)
 80003bc:	4b91      	ldr	r3, [pc, #580]	; (8000604 <fsm_auto_run+0x24c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	f200 811b 	bhi.w	80005fe <fsm_auto_run+0x246>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <fsm_auto_run+0x18>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080003e5 	.word	0x080003e5
 80003d4:	08000409 	.word	0x08000409
 80003d8:	0800047f 	.word	0x0800047f
 80003dc:	080004fd 	.word	0x080004fd
 80003e0:	08000575 	.word	0x08000575
	{
	case INIT:
		status=AUTO_RED_GREEN;
 80003e4:	4b87      	ldr	r3, [pc, #540]	; (8000604 <fsm_auto_run+0x24c>)
 80003e6:	2202      	movs	r2, #2
 80003e8:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 80003ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ee:	f001 f85b 	bl	80014a8 <setTimer1>
		counter = max_red1;
 80003f2:	4b85      	ldr	r3, [pc, #532]	; (8000608 <fsm_auto_run+0x250>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a85      	ldr	r2, [pc, #532]	; (800060c <fsm_auto_run+0x254>)
 80003f8:	6013      	str	r3, [r2, #0]
		displayCounter();
 80003fa:	f001 fa81 	bl	8001900 <displayCounter>
		setTraffic1Red();
 80003fe:	f001 f8bd 	bl	800157c <setTraffic1Red>
		setTraffic2Green();
 8000402:	f001 f907 	bl	8001614 <setTraffic2Green>
		break;
 8000406:	e0fa      	b.n	80005fe <fsm_auto_run+0x246>
	case AUTO_RED_GREEN:
		isButtonPressed(0);
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fe9f 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 800040e:	2002      	movs	r0, #2
 8000410:	f7ff fe9c 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 8000414:	2003      	movs	r0, #3
 8000416:	f7ff fe99 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 800041a:	4b7d      	ldr	r3, [pc, #500]	; (8000610 <fsm_auto_run+0x258>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d115      	bne.n	800044e <fsm_auto_run+0x96>
			counter--;
 8000422:	4b7a      	ldr	r3, [pc, #488]	; (800060c <fsm_auto_run+0x254>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3b01      	subs	r3, #1
 8000428:	4a78      	ldr	r2, [pc, #480]	; (800060c <fsm_auto_run+0x254>)
 800042a:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 800042c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000430:	f001 f83a 	bl	80014a8 <setTimer1>
			if(counter == max_yellow2){
 8000434:	4b75      	ldr	r3, [pc, #468]	; (800060c <fsm_auto_run+0x254>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b76      	ldr	r3, [pc, #472]	; (8000614 <fsm_auto_run+0x25c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	d104      	bne.n	800044a <fsm_auto_run+0x92>
				setTraffic2Yellow();
 8000440:	f001 f90c 	bl	800165c <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 8000444:	4b6f      	ldr	r3, [pc, #444]	; (8000604 <fsm_auto_run+0x24c>)
 8000446:	2203      	movs	r2, #3
 8000448:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800044a:	f001 fa59 	bl	8001900 <displayCounter>
		}

		if(isButtonPressed(1)){
 800044e:	2001      	movs	r0, #1
 8000450:	f7ff fe7c 	bl	800014c <isButtonPressed>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	f000 80ca 	beq.w	80005f0 <fsm_auto_run+0x238>
			status=MAN_RED_GREEN;
 800045c:	4b69      	ldr	r3, [pc, #420]	; (8000604 <fsm_auto_run+0x24c>)
 800045e:	220b      	movs	r2, #11
 8000460:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000462:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000466:	f001 f81f 	bl	80014a8 <setTimer1>
			setTraffic1Red();
 800046a:	f001 f887 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 800046e:	f001 f8d1 	bl	8001614 <setTraffic2Green>
			counter = 99;
 8000472:	4b66      	ldr	r3, [pc, #408]	; (800060c <fsm_auto_run+0x254>)
 8000474:	2263      	movs	r2, #99	; 0x63
 8000476:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000478:	f001 fa42 	bl	8001900 <displayCounter>
			break;
 800047c:	e0bf      	b.n	80005fe <fsm_auto_run+0x246>
		}
		break;
	case AUTO_RED_YELLOW:
		isButtonPressed(0);
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff fe64 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 8000484:	2002      	movs	r0, #2
 8000486:	f7ff fe61 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 800048a:	2003      	movs	r0, #3
 800048c:	f7ff fe5e 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 8000490:	4b5f      	ldr	r3, [pc, #380]	; (8000610 <fsm_auto_run+0x258>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d119      	bne.n	80004cc <fsm_auto_run+0x114>
			counter--;
 8000498:	4b5c      	ldr	r3, [pc, #368]	; (800060c <fsm_auto_run+0x254>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3b01      	subs	r3, #1
 800049e:	4a5b      	ldr	r2, [pc, #364]	; (800060c <fsm_auto_run+0x254>)
 80004a0:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80004a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a6:	f000 ffff 	bl	80014a8 <setTimer1>
			if(counter == 0){
 80004aa:	4b58      	ldr	r3, [pc, #352]	; (800060c <fsm_auto_run+0x254>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d10a      	bne.n	80004c8 <fsm_auto_run+0x110>
				counter = max_green1;
 80004b2:	4b59      	ldr	r3, [pc, #356]	; (8000618 <fsm_auto_run+0x260>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a55      	ldr	r2, [pc, #340]	; (800060c <fsm_auto_run+0x254>)
 80004b8:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 80004ba:	f001 f883 	bl	80015c4 <setTraffic1Green>
				setTraffic2Red();
 80004be:	f001 f871 	bl	80015a4 <setTraffic2Red>
				status=AUTO_GREEN_RED;
 80004c2:	4b50      	ldr	r3, [pc, #320]	; (8000604 <fsm_auto_run+0x24c>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80004c8:	f001 fa1a 	bl	8001900 <displayCounter>
		}

		if(isButtonPressed(1)){
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff fe3d 	bl	800014c <isButtonPressed>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	f000 808d 	beq.w	80005f4 <fsm_auto_run+0x23c>
			status=MAN_RED_GREEN;
 80004da:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <fsm_auto_run+0x24c>)
 80004dc:	220b      	movs	r2, #11
 80004de:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 80004e0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80004e4:	f000 ffe0 	bl	80014a8 <setTimer1>
			setTraffic1Red();
 80004e8:	f001 f848 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 80004ec:	f001 f892 	bl	8001614 <setTraffic2Green>
			counter = 99;
 80004f0:	4b46      	ldr	r3, [pc, #280]	; (800060c <fsm_auto_run+0x254>)
 80004f2:	2263      	movs	r2, #99	; 0x63
 80004f4:	601a      	str	r2, [r3, #0]
			displayCounter();
 80004f6:	f001 fa03 	bl	8001900 <displayCounter>
			break;
 80004fa:	e080      	b.n	80005fe <fsm_auto_run+0x246>
		}
		break;

	case AUTO_GREEN_RED:
		isButtonPressed(0);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe25 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 8000502:	2002      	movs	r0, #2
 8000504:	f7ff fe22 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 8000508:	2003      	movs	r0, #3
 800050a:	f7ff fe1f 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 800050e:	4b40      	ldr	r3, [pc, #256]	; (8000610 <fsm_auto_run+0x258>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d117      	bne.n	8000546 <fsm_auto_run+0x18e>
			counter--;
 8000516:	4b3d      	ldr	r3, [pc, #244]	; (800060c <fsm_auto_run+0x254>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	3b01      	subs	r3, #1
 800051c:	4a3b      	ldr	r2, [pc, #236]	; (800060c <fsm_auto_run+0x254>)
 800051e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000524:	f000 ffc0 	bl	80014a8 <setTimer1>
			if(counter == 0){
 8000528:	4b38      	ldr	r3, [pc, #224]	; (800060c <fsm_auto_run+0x254>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d108      	bne.n	8000542 <fsm_auto_run+0x18a>
				counter = max_yellow1;
 8000530:	4b3a      	ldr	r3, [pc, #232]	; (800061c <fsm_auto_run+0x264>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a35      	ldr	r2, [pc, #212]	; (800060c <fsm_auto_run+0x254>)
 8000536:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 8000538:	f001 f87c 	bl	8001634 <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 800053c:	4b31      	ldr	r3, [pc, #196]	; (8000604 <fsm_auto_run+0x24c>)
 800053e:	2205      	movs	r2, #5
 8000540:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000542:	f001 f9dd 	bl	8001900 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff fe00 	bl	800014c <isButtonPressed>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d052      	beq.n	80005f8 <fsm_auto_run+0x240>
			status=MAN_RED_GREEN;
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <fsm_auto_run+0x24c>)
 8000554:	220b      	movs	r2, #11
 8000556:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000558:	f64e 2060 	movw	r0, #60000	; 0xea60
 800055c:	f000 ffa4 	bl	80014a8 <setTimer1>
			setTraffic1Red();
 8000560:	f001 f80c 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 8000564:	f001 f856 	bl	8001614 <setTraffic2Green>
			counter = 99;
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <fsm_auto_run+0x254>)
 800056a:	2263      	movs	r2, #99	; 0x63
 800056c:	601a      	str	r2, [r3, #0]
			displayCounter();
 800056e:	f001 f9c7 	bl	8001900 <displayCounter>
			break;
 8000572:	e044      	b.n	80005fe <fsm_auto_run+0x246>
		}
		break;

	case AUTO_YELLOW_RED:
		isButtonPressed(0);
 8000574:	2000      	movs	r0, #0
 8000576:	f7ff fde9 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 800057a:	2002      	movs	r0, #2
 800057c:	f7ff fde6 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 8000580:	2003      	movs	r0, #3
 8000582:	f7ff fde3 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <fsm_auto_run+0x258>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d119      	bne.n	80005c2 <fsm_auto_run+0x20a>
			counter--;
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <fsm_auto_run+0x254>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	4a1d      	ldr	r2, [pc, #116]	; (800060c <fsm_auto_run+0x254>)
 8000596:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f000 ff84 	bl	80014a8 <setTimer1>
			if(counter == 0){
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <fsm_auto_run+0x254>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10a      	bne.n	80005be <fsm_auto_run+0x206>
				counter = max_red1;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <fsm_auto_run+0x250>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a17      	ldr	r2, [pc, #92]	; (800060c <fsm_auto_run+0x254>)
 80005ae:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 80005b0:	f000 ffe4 	bl	800157c <setTraffic1Red>
				setTraffic2Green();
 80005b4:	f001 f82e 	bl	8001614 <setTraffic2Green>
				status=AUTO_RED_GREEN;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <fsm_auto_run+0x24c>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80005be:	f001 f99f 	bl	8001900 <displayCounter>
		}

		if(isButtonPressed(1)==1){
 80005c2:	2001      	movs	r0, #1
 80005c4:	f7ff fdc2 	bl	800014c <isButtonPressed>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d116      	bne.n	80005fc <fsm_auto_run+0x244>
			status=MAN_RED_GREEN;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <fsm_auto_run+0x24c>)
 80005d0:	220b      	movs	r2, #11
 80005d2:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 80005d4:	f64e 2060 	movw	r0, #60000	; 0xea60
 80005d8:	f000 ff66 	bl	80014a8 <setTimer1>
			setTraffic1Red();
 80005dc:	f000 ffce 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 80005e0:	f001 f818 	bl	8001614 <setTraffic2Green>
			counter = 99;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <fsm_auto_run+0x254>)
 80005e6:	2263      	movs	r2, #99	; 0x63
 80005e8:	601a      	str	r2, [r3, #0]
			displayCounter();
 80005ea:	f001 f989 	bl	8001900 <displayCounter>
			break;
 80005ee:	e006      	b.n	80005fe <fsm_auto_run+0x246>
		break;
 80005f0:	bf00      	nop
 80005f2:	e004      	b.n	80005fe <fsm_auto_run+0x246>
		break;
 80005f4:	bf00      	nop
 80005f6:	e002      	b.n	80005fe <fsm_auto_run+0x246>
		break;
 80005f8:	bf00      	nop
 80005fa:	e000      	b.n	80005fe <fsm_auto_run+0x246>
		}
		break;
 80005fc:	bf00      	nop
	}

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000114 	.word	0x20000114
 8000608:	20000010 	.word	0x20000010
 800060c:	2000011c 	.word	0x2000011c
 8000610:	20000130 	.word	0x20000130
 8000614:	20000024 	.word	0x20000024
 8000618:	20000014 	.word	0x20000014
 800061c:	20000018 	.word	0x20000018

08000620 <fsm_manual_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	switch (status) {
 8000624:	4ba1      	ldr	r3, [pc, #644]	; (80008ac <fsm_manual_run+0x28c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3b0b      	subs	r3, #11
 800062a:	2b03      	cmp	r3, #3
 800062c:	f200 8132 	bhi.w	8000894 <fsm_manual_run+0x274>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <fsm_manual_run+0x18>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000649 	.word	0x08000649
 800063c:	080006db 	.word	0x080006db
 8000640:	08000771 	.word	0x08000771
 8000644:	08000805 	.word	0x08000805
		case MAN_RED_GREEN:
			isButtonPressed(0);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff fd7f 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f7ff fd7c 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 8000654:	4b96      	ldr	r3, [pc, #600]	; (80008b0 <fsm_manual_run+0x290>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d010      	beq.n	800067e <fsm_manual_run+0x5e>
				status = AUTO_RED_YELLOW;
 800065c:	4b93      	ldr	r3, [pc, #588]	; (80008ac <fsm_manual_run+0x28c>)
 800065e:	2203      	movs	r2, #3
 8000660:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f000 ff1f 	bl	80014a8 <setTimer1>
				counter = max_yellow2;
 800066a:	4b92      	ldr	r3, [pc, #584]	; (80008b4 <fsm_manual_run+0x294>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a92      	ldr	r2, [pc, #584]	; (80008b8 <fsm_manual_run+0x298>)
 8000670:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000672:	f001 f945 	bl	8001900 <displayCounter>
				setTraffic1Red();
 8000676:	f000 ff81 	bl	800157c <setTraffic1Red>
				setTraffic2Yellow();
 800067a:	f000 ffef 	bl	800165c <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff fd64 	bl	800014c <isButtonPressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d014      	beq.n	80006b4 <fsm_manual_run+0x94>
				isButtonPressed(2);
 800068a:	2002      	movs	r0, #2
 800068c:	f7ff fd5e 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 8000690:	4b86      	ldr	r3, [pc, #536]	; (80008ac <fsm_manual_run+0x28c>)
 8000692:	2215      	movs	r2, #21
 8000694:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069a:	f000 ff05 	bl	80014a8 <setTimer1>
				counter = max_red1;
 800069e:	4b87      	ldr	r3, [pc, #540]	; (80008bc <fsm_manual_run+0x29c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a85      	ldr	r2, [pc, #532]	; (80008b8 <fsm_manual_run+0x298>)
 80006a4:	6013      	str	r3, [r2, #0]
				displayCounter();
 80006a6:	f001 f92b 	bl	8001900 <displayCounter>
				clearTraffic1();
 80006aa:	f000 ff9f 	bl	80015ec <clearTraffic1>
				clearTraffic2();
 80006ae:	f000 ffe5 	bl	800167c <clearTraffic2>
				break;
 80006b2:	e0f8      	b.n	80008a6 <fsm_manual_run+0x286>
			}

			if (isButtonPressed(2)) {
 80006b4:	2002      	movs	r0, #2
 80006b6:	f7ff fd49 	bl	800014c <isButtonPressed>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	f000 80eb 	beq.w	8000898 <fsm_manual_run+0x278>
				status = MAN_RED_YELLOW;
 80006c2:	4b7a      	ldr	r3, [pc, #488]	; (80008ac <fsm_manual_run+0x28c>)
 80006c4:	220c      	movs	r2, #12
 80006c6:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 80006c8:	f000 ff58 	bl	800157c <setTraffic1Red>
				setTraffic2Yellow();
 80006cc:	f000 ffc6 	bl	800165c <setTraffic2Yellow>
				setTimer1(60000);
 80006d0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006d4:	f000 fee8 	bl	80014a8 <setTimer1>
			}
			break;
 80006d8:	e0de      	b.n	8000898 <fsm_manual_run+0x278>

		case MAN_RED_YELLOW:
			isButtonPressed(0);
 80006da:	2000      	movs	r0, #0
 80006dc:	f7ff fd36 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f7ff fd33 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 80006e6:	4b72      	ldr	r3, [pc, #456]	; (80008b0 <fsm_manual_run+0x290>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d010      	beq.n	8000710 <fsm_manual_run+0xf0>
				status = AUTO_GREEN_RED;
 80006ee:	4b6f      	ldr	r3, [pc, #444]	; (80008ac <fsm_manual_run+0x28c>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f000 fed6 	bl	80014a8 <setTimer1>
				counter = max_green1;
 80006fc:	4b70      	ldr	r3, [pc, #448]	; (80008c0 <fsm_manual_run+0x2a0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a6d      	ldr	r2, [pc, #436]	; (80008b8 <fsm_manual_run+0x298>)
 8000702:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000704:	f001 f8fc 	bl	8001900 <displayCounter>
				setTraffic1Green();
 8000708:	f000 ff5c 	bl	80015c4 <setTraffic1Green>
				setTraffic2Red();
 800070c:	f000 ff4a 	bl	80015a4 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fd1b 	bl	800014c <isButtonPressed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d016      	beq.n	800074a <fsm_manual_run+0x12a>
				isButtonPressed(2);
 800071c:	2002      	movs	r0, #2
 800071e:	f7ff fd15 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 8000722:	4b62      	ldr	r3, [pc, #392]	; (80008ac <fsm_manual_run+0x28c>)
 8000724:	2215      	movs	r2, #21
 8000726:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072c:	f000 febc 	bl	80014a8 <setTimer1>
				counter = max_red1;
 8000730:	4b62      	ldr	r3, [pc, #392]	; (80008bc <fsm_manual_run+0x29c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a60      	ldr	r2, [pc, #384]	; (80008b8 <fsm_manual_run+0x298>)
 8000736:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000738:	f001 f8e2 	bl	8001900 <displayCounter>
				clearTraffic1();
 800073c:	f000 ff56 	bl	80015ec <clearTraffic1>
				clearTraffic2();
 8000740:	f000 ff9c 	bl	800167c <clearTraffic2>
				isButtonPressed(2);
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff fd01 	bl	800014c <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff fcfe 	bl	800014c <isButtonPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	f000 80a2 	beq.w	800089c <fsm_manual_run+0x27c>
				status = MAN_GREEN_RED;
 8000758:	4b54      	ldr	r3, [pc, #336]	; (80008ac <fsm_manual_run+0x28c>)
 800075a:	220d      	movs	r2, #13
 800075c:	601a      	str	r2, [r3, #0]
				setTraffic1Green();
 800075e:	f000 ff31 	bl	80015c4 <setTraffic1Green>
				setTraffic2Red();
 8000762:	f000 ff1f 	bl	80015a4 <setTraffic2Red>
				setTimer1(60000);
 8000766:	f64e 2060 	movw	r0, #60000	; 0xea60
 800076a:	f000 fe9d 	bl	80014a8 <setTimer1>
			}


			break;
 800076e:	e095      	b.n	800089c <fsm_manual_run+0x27c>

		case MAN_GREEN_RED:
			isButtonPressed(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fceb 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000776:	2003      	movs	r0, #3
 8000778:	f7ff fce8 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 800077c:	4b4c      	ldr	r3, [pc, #304]	; (80008b0 <fsm_manual_run+0x290>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d010      	beq.n	80007a6 <fsm_manual_run+0x186>
				status = AUTO_YELLOW_RED;
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <fsm_manual_run+0x28c>)
 8000786:	2205      	movs	r2, #5
 8000788:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078e:	f000 fe8b 	bl	80014a8 <setTimer1>
				counter = max_yellow1;
 8000792:	4b4c      	ldr	r3, [pc, #304]	; (80008c4 <fsm_manual_run+0x2a4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a48      	ldr	r2, [pc, #288]	; (80008b8 <fsm_manual_run+0x298>)
 8000798:	6013      	str	r3, [r2, #0]
				displayCounter();
 800079a:	f001 f8b1 	bl	8001900 <displayCounter>
				setTraffic1Yellow();
 800079e:	f000 ff49 	bl	8001634 <setTraffic1Yellow>
				setTraffic2Red();
 80007a2:	f000 feff 	bl	80015a4 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fcd0 	bl	800014c <isButtonPressed>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d016      	beq.n	80007e0 <fsm_manual_run+0x1c0>
				isButtonPressed(2);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f7ff fcca 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 80007b8:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <fsm_manual_run+0x28c>)
 80007ba:	2215      	movs	r2, #21
 80007bc:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f000 fe71 	bl	80014a8 <setTimer1>
				counter = max_red1;
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <fsm_manual_run+0x29c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a3b      	ldr	r2, [pc, #236]	; (80008b8 <fsm_manual_run+0x298>)
 80007cc:	6013      	str	r3, [r2, #0]
				displayCounter();
 80007ce:	f001 f897 	bl	8001900 <displayCounter>
				clearTraffic1();
 80007d2:	f000 ff0b 	bl	80015ec <clearTraffic1>
				clearTraffic2();
 80007d6:	f000 ff51 	bl	800167c <clearTraffic2>
				isButtonPressed(2);
 80007da:	2002      	movs	r0, #2
 80007dc:	f7ff fcb6 	bl	800014c <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff fcb3 	bl	800014c <isButtonPressed>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d059      	beq.n	80008a0 <fsm_manual_run+0x280>
				status = MAN_YELLOW_RED;
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <fsm_manual_run+0x28c>)
 80007ee:	220e      	movs	r2, #14
 80007f0:	601a      	str	r2, [r3, #0]
				setTraffic1Yellow();
 80007f2:	f000 ff1f 	bl	8001634 <setTraffic1Yellow>
				setTraffic2Red();
 80007f6:	f000 fed5 	bl	80015a4 <setTraffic2Red>
				setTimer1(60000);
 80007fa:	f64e 2060 	movw	r0, #60000	; 0xea60
 80007fe:	f000 fe53 	bl	80014a8 <setTimer1>
			}

			break;
 8000802:	e04d      	b.n	80008a0 <fsm_manual_run+0x280>

		case MAN_YELLOW_RED:
			isButtonPressed(0);
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff fca1 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 800080a:	2003      	movs	r0, #3
 800080c:	f7ff fc9e 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <fsm_manual_run+0x290>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d010      	beq.n	800083a <fsm_manual_run+0x21a>
				status = AUTO_RED_GREEN;
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <fsm_manual_run+0x28c>)
 800081a:	2202      	movs	r2, #2
 800081c:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800081e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000822:	f000 fe41 	bl	80014a8 <setTimer1>
				counter = max_red1;
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <fsm_manual_run+0x29c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <fsm_manual_run+0x298>)
 800082c:	6013      	str	r3, [r2, #0]
				displayCounter();
 800082e:	f001 f867 	bl	8001900 <displayCounter>
				setTraffic1Red();
 8000832:	f000 fea3 	bl	800157c <setTraffic1Red>
				setTraffic2Green();
 8000836:	f000 feed 	bl	8001614 <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fc86 	bl	800014c <isButtonPressed>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d014      	beq.n	8000870 <fsm_manual_run+0x250>
				isButtonPressed(2);
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fc80 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <fsm_manual_run+0x28c>)
 800084e:	2215      	movs	r2, #21
 8000850:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f000 fe27 	bl	80014a8 <setTimer1>
				counter = max_red1;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <fsm_manual_run+0x29c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <fsm_manual_run+0x298>)
 8000860:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000862:	f001 f84d 	bl	8001900 <displayCounter>
				clearTraffic1();
 8000866:	f000 fec1 	bl	80015ec <clearTraffic1>
				clearTraffic2();
 800086a:	f000 ff07 	bl	800167c <clearTraffic2>
				break;
 800086e:	e01a      	b.n	80008a6 <fsm_manual_run+0x286>
			}

			if (isButtonPressed(2)) {
 8000870:	2002      	movs	r0, #2
 8000872:	f7ff fc6b 	bl	800014c <isButtonPressed>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d013      	beq.n	80008a4 <fsm_manual_run+0x284>
				status = MAN_RED_GREEN;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <fsm_manual_run+0x28c>)
 800087e:	220b      	movs	r2, #11
 8000880:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000882:	f000 fe7b 	bl	800157c <setTraffic1Red>
				setTraffic2Green();
 8000886:	f000 fec5 	bl	8001614 <setTraffic2Green>
				setTimer1(60000);
 800088a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800088e:	f000 fe0b 	bl	80014a8 <setTimer1>
			}


			break;
 8000892:	e007      	b.n	80008a4 <fsm_manual_run+0x284>
		default:
			break;
 8000894:	bf00      	nop
 8000896:	e006      	b.n	80008a6 <fsm_manual_run+0x286>
			break;
 8000898:	bf00      	nop
 800089a:	e004      	b.n	80008a6 <fsm_manual_run+0x286>
			break;
 800089c:	bf00      	nop
 800089e:	e002      	b.n	80008a6 <fsm_manual_run+0x286>
			break;
 80008a0:	bf00      	nop
 80008a2:	e000      	b.n	80008a6 <fsm_manual_run+0x286>
			break;
 80008a4:	bf00      	nop
	}
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000114 	.word	0x20000114
 80008b0:	20000130 	.word	0x20000130
 80008b4:	20000024 	.word	0x20000024
 80008b8:	2000011c 	.word	0x2000011c
 80008bc:	20000010 	.word	0x20000010
 80008c0:	20000014 	.word	0x20000014
 80008c4:	20000018 	.word	0x20000018

080008c8 <fsm_pedestrian_run>:
 *      Author: phamv
 */

#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <fsm_pedestrian_run+0xec>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d865      	bhi.n	80009a2 <fsm_pedestrian_run+0xda>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <fsm_pedestrian_run+0x14>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	080008ed 	.word	0x080008ed
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	08000953 	.word	0x08000953
 80008e8:	08000977 	.word	0x08000977
		case INIT:
			clearPedestrian();
 80008ec:	f000 fefe 	bl	80016ec <clearPedestrian>
			pedestrianStatus = PED_NONE;
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <fsm_pedestrian_run+0xec>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
			break;
 80008f6:	e05b      	b.n	80009b0 <fsm_pedestrian_run+0xe8>
		case PED_NONE:
			if(isButtonPressed(0)){
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fc27 	bl	800014c <isButtonPressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d050      	beq.n	80009a6 <fsm_pedestrian_run+0xde>
				if(status == AUTO_RED_GREEN || status == MAN_RED_GREEN){
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d003      	beq.n	8000914 <fsm_pedestrian_run+0x4c>
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b0b      	cmp	r3, #11
 8000912:	d108      	bne.n	8000926 <fsm_pedestrian_run+0x5e>
					pedestrianStatus = PED_GREEN;
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <fsm_pedestrian_run+0xec>)
 8000916:	2204      	movs	r2, #4
 8000918:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 800091a:	f000 fed3 	bl	80016c4 <setPedestrianGreen>
					__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,10);
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <fsm_pedestrian_run+0xf4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	220a      	movs	r2, #10
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
				}
				if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b04      	cmp	r3, #4
 800092c:	d00b      	beq.n	8000946 <fsm_pedestrian_run+0x7e>
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b0d      	cmp	r3, #13
 8000934:	d007      	beq.n	8000946 <fsm_pedestrian_run+0x7e>
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b05      	cmp	r3, #5
 800093c:	d003      	beq.n	8000946 <fsm_pedestrian_run+0x7e>
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b0e      	cmp	r3, #14
 8000944:	d12f      	bne.n	80009a6 <fsm_pedestrian_run+0xde>
					pedestrianStatus = PED_RED;
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <fsm_pedestrian_run+0xec>)
 8000948:	2203      	movs	r2, #3
 800094a:	601a      	str	r2, [r3, #0]
					setPedestrianRed();
 800094c:	f000 fea6 	bl	800169c <setPedestrianRed>
				}
			}
			break;
 8000950:	e029      	b.n	80009a6 <fsm_pedestrian_run+0xde>
		case PED_RED:
			if(status == AUTO_RED_GREEN || status == MAN_RED_GREEN){
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d003      	beq.n	8000962 <fsm_pedestrian_run+0x9a>
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b0b      	cmp	r3, #11
 8000960:	d123      	bne.n	80009aa <fsm_pedestrian_run+0xe2>
				pedestrianStatus = PED_GREEN;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <fsm_pedestrian_run+0xec>)
 8000964:	2204      	movs	r2, #4
 8000966:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 8000968:	f000 feac 	bl	80016c4 <setPedestrianGreen>
				__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,10);
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <fsm_pedestrian_run+0xf4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	220a      	movs	r2, #10
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8000974:	e019      	b.n	80009aa <fsm_pedestrian_run+0xe2>
		case PED_GREEN:
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b04      	cmp	r3, #4
 800097c:	d00b      	beq.n	8000996 <fsm_pedestrian_run+0xce>
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b0d      	cmp	r3, #13
 8000984:	d007      	beq.n	8000996 <fsm_pedestrian_run+0xce>
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b05      	cmp	r3, #5
 800098c:	d003      	beq.n	8000996 <fsm_pedestrian_run+0xce>
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <fsm_pedestrian_run+0xf0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b0e      	cmp	r3, #14
 8000994:	d10b      	bne.n	80009ae <fsm_pedestrian_run+0xe6>
				pedestrianStatus = PED_NONE;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <fsm_pedestrian_run+0xec>)
 8000998:	2202      	movs	r2, #2
 800099a:	601a      	str	r2, [r3, #0]
				clearPedestrian();
 800099c:	f000 fea6 	bl	80016ec <clearPedestrian>
			}
			break;
 80009a0:	e005      	b.n	80009ae <fsm_pedestrian_run+0xe6>
		default:
			break;
 80009a2:	bf00      	nop
 80009a4:	e004      	b.n	80009b0 <fsm_pedestrian_run+0xe8>
			break;
 80009a6:	bf00      	nop
 80009a8:	e002      	b.n	80009b0 <fsm_pedestrian_run+0xe8>
			break;
 80009aa:	bf00      	nop
 80009ac:	e000      	b.n	80009b0 <fsm_pedestrian_run+0xe8>
			break;
 80009ae:	bf00      	nop
	}
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000118 	.word	0x20000118
 80009b8:	20000114 	.word	0x20000114
 80009bc:	20000198 	.word	0x20000198

080009c0 <fsm_tuning_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_tuning.h"

void fsm_tuning_run(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	switch(status){
 80009c4:	4bb6      	ldr	r3, [pc, #728]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3b15      	subs	r3, #21
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	f200 8276 	bhi.w	8000ebc <fsm_tuning_run+0x4fc>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <fsm_tuning_run+0x18>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	080009f1 	.word	0x080009f1
 80009dc:	08000ab7 	.word	0x08000ab7
 80009e0:	08000b7d 	.word	0x08000b7d
 80009e4:	08000c47 	.word	0x08000c47
 80009e8:	08000d2d 	.word	0x08000d2d
 80009ec:	08000df5 	.word	0x08000df5
	case TUNING_RED1:

		if(timer1_flag){
 80009f0:	4bac      	ldr	r3, [pc, #688]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d008      	beq.n	8000a0a <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 80009f8:	4baa      	ldr	r3, [pc, #680]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80009fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a02:	f000 fd51 	bl	80014a8 <setTimer1>
			toggleTraffic1Red();
 8000a06:	f000 fe85 	bl	8001714 <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fb9e 	bl	800014c <isButtonPressed>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d019      	beq.n	8000a4a <fsm_tuning_run+0x8a>
			isButtonPressed(2);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff fb98 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff fb95 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000a22:	4b9f      	ldr	r3, [pc, #636]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 8000a28:	f000 febe 	bl	80017a8 <acceptTraffic1Red>
			setTimer1(1000);
 8000a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a30:	f000 fd3a 	bl	80014a8 <setTimer1>
			counter = max_red1;
 8000a34:	4b9c      	ldr	r3, [pc, #624]	; (8000ca8 <fsm_tuning_run+0x2e8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a9c      	ldr	r2, [pc, #624]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000a3a:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000a3c:	f000 ff60 	bl	8001900 <displayCounter>
			setTraffic1Red();
 8000a40:	f000 fd9c 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 8000a44:	f000 fde6 	bl	8001614 <setTraffic2Green>
			break;
 8000a48:	e245      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff fb7e 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fb7b 	bl	800014c <isButtonPressed>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d016      	beq.n	8000a8a <fsm_tuning_run+0xca>
			isButtonPressed(3);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f7ff fb75 	bl	800014c <isButtonPressed>
			status = TUNING_RED2;
 8000a62:	4b8f      	ldr	r3, [pc, #572]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 8000a64:	2216      	movs	r2, #22
 8000a66:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6c:	f000 fd1c 	bl	80014a8 <setTimer1>
			acceptTraffic1Red();
 8000a70:	f000 fe9a 	bl	80017a8 <acceptTraffic1Red>
			counter = max_red2;
 8000a74:	4b8e      	ldr	r3, [pc, #568]	; (8000cb0 <fsm_tuning_run+0x2f0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a8c      	ldr	r2, [pc, #560]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000a7a:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000a7c:	f000 ff40 	bl	8001900 <displayCounter>
			clearTraffic1();
 8000a80:	f000 fdb4 	bl	80015ec <clearTraffic1>
			clearTraffic2();
 8000a84:	f000 fdfa 	bl	800167c <clearTraffic2>
			break;
 8000a88:	e225      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f7ff fb5e 	bl	800014c <isButtonPressed>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8214 	beq.w	8000ec0 <fsm_tuning_run+0x500>
			counter++;
 8000a98:	4b84      	ldr	r3, [pc, #528]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a83      	ldr	r2, [pc, #524]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000aa0:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8000aa2:	4b82      	ldr	r3, [pc, #520]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b63      	cmp	r3, #99	; 0x63
 8000aa8:	dd02      	ble.n	8000ab0 <fsm_tuning_run+0xf0>
				counter = 2;
 8000aaa:	4b80      	ldr	r3, [pc, #512]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000ab0:	f000 ff26 	bl	8001900 <displayCounter>
		}

		break;
 8000ab4:	e204      	b.n	8000ec0 <fsm_tuning_run+0x500>
	case TUNING_RED2:
		if(timer1_flag){
 8000ab6:	4b7b      	ldr	r3, [pc, #492]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d008      	beq.n	8000ad0 <fsm_tuning_run+0x110>
			timer1_flag = 0;
 8000abe:	4b79      	ldr	r3, [pc, #484]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac8:	f000 fcee 	bl	80014a8 <setTimer1>
			toggleTraffic2Red();
 8000acc:	f000 fe2e 	bl	800172c <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fb3b 	bl	800014c <isButtonPressed>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d019      	beq.n	8000b10 <fsm_tuning_run+0x150>
			isButtonPressed(2);
 8000adc:	2002      	movs	r0, #2
 8000ade:	f7ff fb35 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f7ff fb32 	bl	800014c <isButtonPressed>
			acceptTraffic2Red();
 8000ae8:	f000 fe80 	bl	80017ec <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 8000aec:	4b6c      	ldr	r3, [pc, #432]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af6:	f000 fcd7 	bl	80014a8 <setTimer1>
			counter = max_red1;
 8000afa:	4b6b      	ldr	r3, [pc, #428]	; (8000ca8 <fsm_tuning_run+0x2e8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a6b      	ldr	r2, [pc, #428]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000b00:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000b02:	f000 fefd 	bl	8001900 <displayCounter>
			setTraffic2Red();
 8000b06:	f000 fd4d 	bl	80015a4 <setTraffic2Red>
			setTraffic2Green();
 8000b0a:	f000 fd83 	bl	8001614 <setTraffic2Green>
			break;
 8000b0e:	e1e2      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}
		if(isButtonPressed(0)){
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fb1b 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000b16:	2002      	movs	r0, #2
 8000b18:	f7ff fb18 	bl	800014c <isButtonPressed>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d016      	beq.n	8000b50 <fsm_tuning_run+0x190>
			isButtonPressed(3);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f7ff fb12 	bl	800014c <isButtonPressed>
			status = TUNING_GREEN1;
 8000b28:	4b5d      	ldr	r3, [pc, #372]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 8000b2a:	2217      	movs	r2, #23
 8000b2c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b32:	f000 fcb9 	bl	80014a8 <setTimer1>
			acceptTraffic2Red();
 8000b36:	f000 fe59 	bl	80017ec <acceptTraffic2Red>
			counter = max_green1;
 8000b3a:	4b5e      	ldr	r3, [pc, #376]	; (8000cb4 <fsm_tuning_run+0x2f4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a5b      	ldr	r2, [pc, #364]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000b40:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000b42:	f000 fedd 	bl	8001900 <displayCounter>
			clearTraffic1();
 8000b46:	f000 fd51 	bl	80015ec <clearTraffic1>
			clearTraffic2();
 8000b4a:	f000 fd97 	bl	800167c <clearTraffic2>
			break;
 8000b4e:	e1c2      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000b50:	2003      	movs	r0, #3
 8000b52:	f7ff fafb 	bl	800014c <isButtonPressed>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 81b3 	beq.w	8000ec4 <fsm_tuning_run+0x504>
			counter++;
 8000b5e:	4b53      	ldr	r3, [pc, #332]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a51      	ldr	r2, [pc, #324]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000b66:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8000b68:	4b50      	ldr	r3, [pc, #320]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b63      	cmp	r3, #99	; 0x63
 8000b6e:	dd02      	ble.n	8000b76 <fsm_tuning_run+0x1b6>
				counter = 2;
 8000b70:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000b76:	f000 fec3 	bl	8001900 <displayCounter>
		}
		break;
 8000b7a:	e1a3      	b.n	8000ec4 <fsm_tuning_run+0x504>
	case TUNING_GREEN1:

		if(timer1_flag){
 8000b7c:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d008      	beq.n	8000b96 <fsm_tuning_run+0x1d6>
			timer1_flag = 0;
 8000b84:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8e:	f000 fc8b 	bl	80014a8 <setTimer1>
			toggleTraffic1Green();
 8000b92:	f000 fdd5 	bl	8001740 <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fad8 	bl	800014c <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d019      	beq.n	8000bd6 <fsm_tuning_run+0x216>
			isButtonPressed(2);
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff fad2 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff facf 	bl	800014c <isButtonPressed>
			acceptTraffic1Green();
 8000bae:	f000 fe3f 	bl	8001830 <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bbc:	f000 fc74 	bl	80014a8 <setTimer1>
			counter = max_red1;
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <fsm_tuning_run+0x2e8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a39      	ldr	r2, [pc, #228]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000bc6:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000bc8:	f000 fe9a 	bl	8001900 <displayCounter>
			setTraffic1Red();
 8000bcc:	f000 fcd6 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 8000bd0:	f000 fd20 	bl	8001614 <setTraffic2Green>
			break;
 8000bd4:	e17f      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fab8 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f7ff fab5 	bl	800014c <isButtonPressed>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d016      	beq.n	8000c16 <fsm_tuning_run+0x256>
			isButtonPressed(3);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f7ff faaf 	bl	800014c <isButtonPressed>
			status = TUNING_GREEN2;
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 8000bf0:	2218      	movs	r2, #24
 8000bf2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf8:	f000 fc56 	bl	80014a8 <setTimer1>
			acceptTraffic1Green();
 8000bfc:	f000 fe18 	bl	8001830 <acceptTraffic1Green>
			counter = max_green2;
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <fsm_tuning_run+0x2f8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000c06:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000c08:	f000 fe7a 	bl	8001900 <displayCounter>
			clearTraffic1();
 8000c0c:	f000 fcee 	bl	80015ec <clearTraffic1>
			clearTraffic2();
 8000c10:	f000 fd34 	bl	800167c <clearTraffic2>
			break;
 8000c14:	e15f      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000c16:	2003      	movs	r0, #3
 8000c18:	f7ff fa98 	bl	800014c <isButtonPressed>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8152 	beq.w	8000ec8 <fsm_tuning_run+0x508>
			counter++;
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000c2c:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <fsm_tuning_run+0x2f0>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dc02      	bgt.n	8000c40 <fsm_tuning_run+0x280>
				counter = 1;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c40:	f000 fe5e 	bl	8001900 <displayCounter>
		}
		break;
 8000c44:	e140      	b.n	8000ec8 <fsm_tuning_run+0x508>
	case TUNING_GREEN2:

		if(timer1_flag){
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d008      	beq.n	8000c60 <fsm_tuning_run+0x2a0>
			timer1_flag = 0;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <fsm_tuning_run+0x2e4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f000 fc26 	bl	80014a8 <setTimer1>
			toggleTraffic2Green();
 8000c5c:	f000 fd7a 	bl	8001754 <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fa73 	bl	800014c <isButtonPressed>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d027      	beq.n	8000cbc <fsm_tuning_run+0x2fc>
			isButtonPressed(2);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fa6d 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f7ff fa6a 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <fsm_tuning_run+0x2e0>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 8000c7e:	f000 fdf1 	bl	8001864 <acceptTraffic2Green>
			setTimer1(1000);
 8000c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c86:	f000 fc0f 	bl	80014a8 <setTimer1>
			counter = max_red1;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <fsm_tuning_run+0x2e8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <fsm_tuning_run+0x2ec>)
 8000c90:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000c92:	f000 fe35 	bl	8001900 <displayCounter>
			setTraffic1Red();
 8000c96:	f000 fc71 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 8000c9a:	f000 fcbb 	bl	8001614 <setTraffic2Green>
			break;
 8000c9e:	e11a      	b.n	8000ed6 <fsm_tuning_run+0x516>
 8000ca0:	20000114 	.word	0x20000114
 8000ca4:	20000130 	.word	0x20000130
 8000ca8:	20000010 	.word	0x20000010
 8000cac:	2000011c 	.word	0x2000011c
 8000cb0:	2000001c 	.word	0x2000001c
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	20000020 	.word	0x20000020
		}

		if(isButtonPressed(0)){
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fa45 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff fa42 	bl	800014c <isButtonPressed>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d016      	beq.n	8000cfc <fsm_tuning_run+0x33c>
			isButtonPressed(3);
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f7ff fa3c 	bl	800014c <isButtonPressed>
			status = TUNING_YELLOW1;
 8000cd4:	4b81      	ldr	r3, [pc, #516]	; (8000edc <fsm_tuning_run+0x51c>)
 8000cd6:	2219      	movs	r2, #25
 8000cd8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cde:	f000 fbe3 	bl	80014a8 <setTimer1>
			acceptTraffic2Green();
 8000ce2:	f000 fdbf 	bl	8001864 <acceptTraffic2Green>
			counter = max_yellow1;
 8000ce6:	4b7e      	ldr	r3, [pc, #504]	; (8000ee0 <fsm_tuning_run+0x520>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a7e      	ldr	r2, [pc, #504]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000cec:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000cee:	f000 fe07 	bl	8001900 <displayCounter>
			clearTraffic1();
 8000cf2:	f000 fc7b 	bl	80015ec <clearTraffic1>
			clearTraffic2();
 8000cf6:	f000 fcc1 	bl	800167c <clearTraffic2>
			break;
 8000cfa:	e0ec      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f7ff fa25 	bl	800014c <isButtonPressed>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80e1 	beq.w	8000ecc <fsm_tuning_run+0x50c>
			counter++;
 8000d0a:	4b76      	ldr	r3, [pc, #472]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4a74      	ldr	r2, [pc, #464]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000d12:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8000d14:	4b74      	ldr	r3, [pc, #464]	; (8000ee8 <fsm_tuning_run+0x528>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b72      	ldr	r3, [pc, #456]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dc02      	bgt.n	8000d26 <fsm_tuning_run+0x366>
				counter = 1;
 8000d20:	4b70      	ldr	r3, [pc, #448]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d26:	f000 fdeb 	bl	8001900 <displayCounter>
		}
		break;
 8000d2a:	e0cf      	b.n	8000ecc <fsm_tuning_run+0x50c>
	case TUNING_YELLOW1:
		if(timer1_flag){
 8000d2c:	4b6f      	ldr	r3, [pc, #444]	; (8000eec <fsm_tuning_run+0x52c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d008      	beq.n	8000d46 <fsm_tuning_run+0x386>
			timer1_flag = 0;
 8000d34:	4b6d      	ldr	r3, [pc, #436]	; (8000eec <fsm_tuning_run+0x52c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3e:	f000 fbb3 	bl	80014a8 <setTimer1>
			toggleTraffic1Yellow();
 8000d42:	f000 fd11 	bl	8001768 <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff fa00 	bl	800014c <isButtonPressed>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d019      	beq.n	8000d86 <fsm_tuning_run+0x3c6>
			isButtonPressed(2);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f7ff f9fa 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f7ff f9f7 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000d5e:	4b5f      	ldr	r3, [pc, #380]	; (8000edc <fsm_tuning_run+0x51c>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 8000d64:	f000 fd98 	bl	8001898 <acceptTraffic1Yellow>
			setTimer1(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f000 fb9c 	bl	80014a8 <setTimer1>
			counter = max_red1;
 8000d70:	4b5d      	ldr	r3, [pc, #372]	; (8000ee8 <fsm_tuning_run+0x528>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a5b      	ldr	r2, [pc, #364]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000d76:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000d78:	f000 fdc2 	bl	8001900 <displayCounter>
			setTraffic1Red();
 8000d7c:	f000 fbfe 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 8000d80:	f000 fc48 	bl	8001614 <setTraffic2Green>
			break;
 8000d84:	e0a7      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff f9e0 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f7ff f9dd 	bl	800014c <isButtonPressed>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d016      	beq.n	8000dc6 <fsm_tuning_run+0x406>
			isButtonPressed(3);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f7ff f9d7 	bl	800014c <isButtonPressed>
			status = TUNING_YELLOW2;
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <fsm_tuning_run+0x51c>)
 8000da0:	221a      	movs	r2, #26
 8000da2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da8:	f000 fb7e 	bl	80014a8 <setTimer1>
			acceptTraffic1Yellow();
 8000dac:	f000 fd74 	bl	8001898 <acceptTraffic1Yellow>
			counter = max_yellow2;
 8000db0:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <fsm_tuning_run+0x530>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a4b      	ldr	r2, [pc, #300]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000db6:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000db8:	f000 fda2 	bl	8001900 <displayCounter>
			clearTraffic1();
 8000dbc:	f000 fc16 	bl	80015ec <clearTraffic1>
			clearTraffic2();
 8000dc0:	f000 fc5c 	bl	800167c <clearTraffic2>
			break;
 8000dc4:	e087      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f7ff f9c0 	bl	800014c <isButtonPressed>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d07e      	beq.n	8000ed0 <fsm_tuning_run+0x510>
			counter++;
 8000dd2:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a42      	ldr	r2, [pc, #264]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000dda:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 8000ddc:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <fsm_tuning_run+0x534>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dc02      	bgt.n	8000dee <fsm_tuning_run+0x42e>
				counter = 1;
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000dee:	f000 fd87 	bl	8001900 <displayCounter>
		}
		break;
 8000df2:	e06d      	b.n	8000ed0 <fsm_tuning_run+0x510>
	case TUNING_YELLOW2:
		if(timer1_flag){
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <fsm_tuning_run+0x52c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d008      	beq.n	8000e0e <fsm_tuning_run+0x44e>
			timer1_flag = 0;
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <fsm_tuning_run+0x52c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e06:	f000 fb4f 	bl	80014a8 <setTimer1>
			toggleTraffic2Yellow();
 8000e0a:	f000 fcbf 	bl	800178c <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff f99c 	bl	800014c <isButtonPressed>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d019      	beq.n	8000e4e <fsm_tuning_run+0x48e>
			isButtonPressed(2);
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff f996 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f7ff f993 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <fsm_tuning_run+0x51c>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 8000e2c:	f000 fd4e 	bl	80018cc <acceptTraffic2Yellow>
			setTimer1(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f000 fb38 	bl	80014a8 <setTimer1>
			counter = max_red1;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <fsm_tuning_run+0x528>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000e3e:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000e40:	f000 fd5e 	bl	8001900 <displayCounter>
			setTraffic1Red();
 8000e44:	f000 fb9a 	bl	800157c <setTraffic1Red>
			setTraffic2Green();
 8000e48:	f000 fbe4 	bl	8001614 <setTraffic2Green>
			break;
 8000e4c:	e043      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff f97c 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000e54:	2002      	movs	r0, #2
 8000e56:	f7ff f979 	bl	800014c <isButtonPressed>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d016      	beq.n	8000e8e <fsm_tuning_run+0x4ce>
			isButtonPressed(3);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff f973 	bl	800014c <isButtonPressed>
			status = TUNING_RED1;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <fsm_tuning_run+0x51c>)
 8000e68:	2215      	movs	r2, #21
 8000e6a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e70:	f000 fb1a 	bl	80014a8 <setTimer1>
			acceptTraffic2Yellow();
 8000e74:	f000 fd2a 	bl	80018cc <acceptTraffic2Yellow>
			counter = max_red1;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <fsm_tuning_run+0x528>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000e7e:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000e80:	f000 fd3e 	bl	8001900 <displayCounter>
			clearTraffic1();
 8000e84:	f000 fbb2 	bl	80015ec <clearTraffic1>
			clearTraffic2();
 8000e88:	f000 fbf8 	bl	800167c <clearTraffic2>
			break;
 8000e8c:	e023      	b.n	8000ed6 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f7ff f95c 	bl	800014c <isButtonPressed>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d01c      	beq.n	8000ed4 <fsm_tuning_run+0x514>
			counter++;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000ea2:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <fsm_tuning_run+0x528>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dc02      	bgt.n	8000eb6 <fsm_tuning_run+0x4f6>
				counter = 1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <fsm_tuning_run+0x524>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000eb6:	f000 fd23 	bl	8001900 <displayCounter>
		}
		break;
 8000eba:	e00b      	b.n	8000ed4 <fsm_tuning_run+0x514>
	default:
		break;
 8000ebc:	bf00      	nop
 8000ebe:	e00a      	b.n	8000ed6 <fsm_tuning_run+0x516>
		break;
 8000ec0:	bf00      	nop
 8000ec2:	e008      	b.n	8000ed6 <fsm_tuning_run+0x516>
		break;
 8000ec4:	bf00      	nop
 8000ec6:	e006      	b.n	8000ed6 <fsm_tuning_run+0x516>
		break;
 8000ec8:	bf00      	nop
 8000eca:	e004      	b.n	8000ed6 <fsm_tuning_run+0x516>
		break;
 8000ecc:	bf00      	nop
 8000ece:	e002      	b.n	8000ed6 <fsm_tuning_run+0x516>
		break;
 8000ed0:	bf00      	nop
 8000ed2:	e000      	b.n	8000ed6 <fsm_tuning_run+0x516>
		break;
 8000ed4:	bf00      	nop
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000114 	.word	0x20000114
 8000ee0:	20000018 	.word	0x20000018
 8000ee4:	2000011c 	.word	0x2000011c
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	20000130 	.word	0x20000130
 8000ef0:	20000024 	.word	0x20000024
 8000ef4:	2000001c 	.word	0x2000001c

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 fd54 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f826 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 f8dc 	bl	80010c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f08:	f000 f864 	bl	8000fd4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f0c:	f000 f8ae 	bl	800106c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8000f10:	f000 f955 	bl	80011be <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <main+0x48>)
 8000f16:	f001 fd9d 	bl	8002a54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0x4c>)
 8000f1e:	f001 fdeb 	bl	8002af8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <main+0x50>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <main+0x54>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_auto_run();
 8000f2e:	f7ff fa43 	bl	80003b8 <fsm_auto_run>
	  fsm_manual_run();
 8000f32:	f7ff fb75 	bl	8000620 <fsm_manual_run>
	  fsm_tuning_run();
 8000f36:	f7ff fd43 	bl	80009c0 <fsm_tuning_run>
	  fsm_pedestrian_run();
 8000f3a:	f7ff fcc5 	bl	80008c8 <fsm_pedestrian_run>
	  fsm_auto_run();
 8000f3e:	e7f6      	b.n	8000f2e <main+0x36>
 8000f40:	20000198 	.word	0x20000198
 8000f44:	20000150 	.word	0x20000150
 8000f48:	20000114 	.word	0x20000114
 8000f4c:	20000118 	.word	0x20000118

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b090      	sub	sp, #64	; 0x40
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	2228      	movs	r2, #40	; 0x28
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fe52 	bl	8003c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f86:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f8f5 	bl	8002180 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f9c:	f000 f90a 	bl	80011b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fb60 	bl	8002680 <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fc6:	f000 f8f5 	bl	80011b4 <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3740      	adds	r7, #64	; 0x40
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_TIM2_Init+0x94>)
 8000ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_TIM2_Init+0x94>)
 8000ffa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ffe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_TIM2_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_TIM2_Init+0x94>)
 8001008:	223f      	movs	r2, #63	; 0x3f
 800100a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_TIM2_Init+0x94>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_TIM2_Init+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <MX_TIM2_Init+0x94>)
 800101a:	f001 fccb 	bl	80029b4 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001024:	f000 f8c6 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM2_Init+0x94>)
 8001036:	f001 ff09 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001040:	f000 f8b8 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM2_Init+0x94>)
 8001052:	f002 f8ff 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800105c:	f000 f8aa 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000198 	.word	0x20000198

0800106c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_USART2_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f002 f946 	bl	8003334 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f881 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001e0 	.word	0x200001e0
 80010bc:	40004400 	.word	0x40004400

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <MX_GPIO_Init+0xe8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <MX_GPIO_Init+0xe8>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <MX_GPIO_Init+0xe8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <MX_GPIO_Init+0xe8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a2d      	ldr	r2, [pc, #180]	; (80011a8 <MX_GPIO_Init+0xe8>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <MX_GPIO_Init+0xe8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800110a:	4828      	ldr	r0, [pc, #160]	; (80011ac <MX_GPIO_Init+0xec>)
 800110c:	f001 f807 	bl	800211e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <MX_GPIO_Init+0xf0>)
 8001118:	f001 f801 	bl	800211e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 800111c:	2313      	movs	r3, #19
 800111e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4820      	ldr	r0, [pc, #128]	; (80011b0 <MX_GPIO_Init+0xf0>)
 8001130:	f000 fe5a 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001134:	2340      	movs	r3, #64	; 0x40
 8001136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4619      	mov	r1, r3
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_GPIO_Init+0xf0>)
 8001148:	f000 fe4e 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 800114c:	2301      	movs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4813      	ldr	r0, [pc, #76]	; (80011ac <MX_GPIO_Init+0xec>)
 8001160:	f000 fe42 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001164:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2302      	movs	r3, #2
 8001174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4619      	mov	r1, r3
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_GPIO_Init+0xec>)
 800117e:	f000 fe33 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8001182:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_GPIO_Init+0xf0>)
 800119c:	f000 fe24 	bl	8001de8 <HAL_GPIO_Init>

}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	40010800 	.word	0x40010800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>

080011be <SCH_Init>:
 */
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	e006      	b.n	80011d8 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f80b 	bl	80011e8 <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3301      	adds	r3, #1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b27      	cmp	r3, #39	; 0x27
 80011dc:	d9f5      	bls.n	80011ca <SCH_Init+0xc>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <SCH_Delete_Task>:
		}
	}
	SCH_Go_To_Sleep();
}

uint8_t SCH_Delete_Task(uint32_t index){
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 80011f0:	491c      	ldr	r1, [pc, #112]	; (8001264 <SCH_Delete_Task+0x7c>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <SCH_Delete_Task+0x20>
		return 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e027      	b.n	8001258 <SCH_Delete_Task+0x70>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8001208:	4916      	ldr	r1, [pc, #88]	; (8001264 <SCH_Delete_Task+0x7c>)
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 800121a:	4912      	ldr	r1, [pc, #72]	; (8001264 <SCH_Delete_Task+0x7c>)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3304      	adds	r3, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <SCH_Delete_Task+0x7c>)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3308      	adds	r3, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <SCH_Delete_Task+0x7c>)
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	330c      	adds	r3, #12
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
		return 1;
 8001256:	2301      	movs	r3, #1
	}
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000224 	.word	0x20000224

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_MspInit+0x5c>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_MspInit+0x5c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_MspInit+0x5c>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_MspInit+0x5c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_MspInit+0x60>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_MspInit+0x60>)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000

080012cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012dc:	d113      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_TIM_Base_MspInit+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_TIM_Base_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_TIM_Base_MspInit+0x44>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201c      	movs	r0, #28
 80012fc:	f000 fc8d 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001300:	201c      	movs	r0, #28
 8001302:	f000 fca6 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_UART_MspInit+0x98>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d137      	bne.n	80013a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	61d3      	str	r3, [r2, #28]
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x9c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001364:	2304      	movs	r3, #4
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	480f      	ldr	r0, [pc, #60]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001378:	f000 fd36 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800137c:	2308      	movs	r3, #8
 800137e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	4809      	ldr	r0, [pc, #36]	; (80013b4 <HAL_UART_MspInit+0xa0>)
 8001390:	f000 fd2a 	bl	8001de8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2026      	movs	r0, #38	; 0x26
 800139a:	f000 fc3e 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800139e:	2026      	movs	r0, #38	; 0x26
 80013a0:	f000 fc57 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010800 	.word	0x40010800

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 fb19 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM2_IRQHandler+0x10>)
 800140e:	f001 fc15 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000198 	.word	0x20000198

0800141c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <USART2_IRQHandler+0x10>)
 8001422:	f002 f819 	bl	8003458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001e0 	.word	0x200001e0

08001430 <_sbrk>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
 8001460:	f002 fba8 	bl	8003bb4 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20005000 	.word	0x20005000
 8001490:	00000400 	.word	0x00000400
 8001494:	2000012c 	.word	0x2000012c
 8001498:	20000558 	.word	0x20000558

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <setTimer1+0x2c>)
 80014b4:	fb82 1203 	smull	r1, r2, r2, r3
 80014b8:	1092      	asrs	r2, r2, #2
 80014ba:	17db      	asrs	r3, r3, #31
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <setTimer1+0x30>)
 80014c0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <setTimer1+0x34>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	66666667 	.word	0x66666667
 80014d8:	2000013c 	.word	0x2000013c
 80014dc:	20000130 	.word	0x20000130

080014e0 <timer_run>:
void setTimer3(int duration){
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void timer_run(){
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <timer_run+0x6c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd0b      	ble.n	8001504 <timer_run+0x24>
		timer1_counter--;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <timer_run+0x6c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <timer_run+0x6c>)
 80014f4:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <timer_run+0x6c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <timer_run+0x24>
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <timer_run+0x70>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <timer_run+0x74>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	dd0b      	ble.n	8001524 <timer_run+0x44>
		timer2_counter--;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <timer_run+0x74>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <timer_run+0x74>)
 8001514:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <timer_run+0x74>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <timer_run+0x44>
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <timer_run+0x78>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <timer_run+0x7c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd0b      	ble.n	8001544 <timer_run+0x64>
		timer3_counter--;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <timer_run+0x7c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <timer_run+0x7c>)
 8001534:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <timer_run+0x7c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <timer_run+0x64>
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <timer_run+0x80>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
	}
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	2000013c 	.word	0x2000013c
 8001550:	20000130 	.word	0x20000130
 8001554:	20000140 	.word	0x20000140
 8001558:	20000134 	.word	0x20000134
 800155c:	20000144 	.word	0x20000144
 8001560:	20000138 	.word	0x20000138

08001564 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	timer_run();
 800156c:	f7ff ffb8 	bl	80014e0 <timer_run>
	button_reading();
 8001570:	f7fe fe1c 	bl	80001ac <button_reading>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <setTraffic1Red>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "traffic.h"

void setTraffic1Red(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <setTraffic1Red+0x20>)
 8001588:	f000 fdc9 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2108      	movs	r1, #8
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <setTraffic1Red+0x24>)
 8001592:	f000 fdc4 	bl	800211e <HAL_GPIO_WritePin>

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010800 	.word	0x40010800
 80015a0:	40010c00 	.word	0x40010c00

080015a4 <setTraffic2Red>:

void setTraffic2Red(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2120      	movs	r1, #32
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <setTraffic2Red+0x1c>)
 80015ae:	f000 fdb6 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2110      	movs	r1, #16
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <setTraffic2Red+0x1c>)
 80015b8:	f000 fdb1 	bl	800211e <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <setTraffic1Green>:

void setTraffic1Green(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <setTraffic1Green+0x20>)
 80015d0:	f000 fda5 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2108      	movs	r1, #8
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <setTraffic1Green+0x24>)
 80015da:	f000 fda0 	bl	800211e <HAL_GPIO_WritePin>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40010c00 	.word	0x40010c00

080015ec <clearTraffic1>:

void clearTraffic1(){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <clearTraffic1+0x20>)
 80015f8:	f000 fd91 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2108      	movs	r1, #8
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <clearTraffic1+0x24>)
 8001602:	f000 fd8c 	bl	800211e <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00

08001614 <setTraffic2Green>:


void setTraffic2Green(){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2120      	movs	r1, #32
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <setTraffic2Green+0x1c>)
 800161e:	f000 fd7e 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <setTraffic2Green+0x1c>)
 8001628:	f000 fd79 	bl	800211e <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40010c00 	.word	0x40010c00

08001634 <setTraffic1Yellow>:

void setTraffic1Yellow(){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <setTraffic1Yellow+0x20>)
 8001640:	f000 fd6d 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2108      	movs	r1, #8
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <setTraffic1Yellow+0x24>)
 800164a:	f000 fd68 	bl	800211e <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40010800 	.word	0x40010800
 8001658:	40010c00 	.word	0x40010c00

0800165c <setTraffic2Yellow>:

void setTraffic2Yellow(){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2120      	movs	r1, #32
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <setTraffic2Yellow+0x1c>)
 8001666:	f000 fd5a 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2110      	movs	r1, #16
 800166e:	4802      	ldr	r0, [pc, #8]	; (8001678 <setTraffic2Yellow+0x1c>)
 8001670:	f000 fd55 	bl	800211e <HAL_GPIO_WritePin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010c00 	.word	0x40010c00

0800167c <clearTraffic2>:

void clearTraffic2(){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2120      	movs	r1, #32
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <clearTraffic2+0x1c>)
 8001686:	f000 fd4a 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2110      	movs	r1, #16
 800168e:	4802      	ldr	r0, [pc, #8]	; (8001698 <clearTraffic2+0x1c>)
 8001690:	f000 fd45 	bl	800211e <HAL_GPIO_WritePin>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40010c00 	.word	0x40010c00

0800169c <setPedestrianRed>:

void setPedestrianRed(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <setPedestrianRed+0x20>)
 80016a8:	f000 fd39 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <setPedestrianRed+0x24>)
 80016b4:	f000 fd33 	bl	800211e <HAL_GPIO_WritePin>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	40010800 	.word	0x40010800

080016c4 <setPedestrianGreen>:

void setPedestrianGreen(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <setPedestrianGreen+0x20>)
 80016d0:	f000 fd25 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <setPedestrianGreen+0x24>)
 80016dc:	f000 fd1f 	bl	800211e <HAL_GPIO_WritePin>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40010c00 	.word	0x40010c00
 80016e8:	40010800 	.word	0x40010800

080016ec <clearPedestrian>:
void setPedestrianYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void clearPedestrian(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <clearPedestrian+0x20>)
 80016f8:	f000 fd11 	bl	800211e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <clearPedestrian+0x24>)
 8001704:	f000 fd0b 	bl	800211e <HAL_GPIO_WritePin>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40010c00 	.word	0x40010c00
 8001710:	40010800 	.word	0x40010800

08001714 <toggleTraffic1Red>:

void toggleTraffic1Red(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8001718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <toggleTraffic1Red+0x14>)
 800171e:	f000 fd16 	bl	800214e <HAL_GPIO_TogglePin>
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40010800 	.word	0x40010800

0800172c <toggleTraffic2Red>:

void toggleTraffic2Red(){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8001730:	2120      	movs	r1, #32
 8001732:	4802      	ldr	r0, [pc, #8]	; (800173c <toggleTraffic2Red+0x10>)
 8001734:	f000 fd0b 	bl	800214e <HAL_GPIO_TogglePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40010c00 	.word	0x40010c00

08001740 <toggleTraffic1Green>:

void toggleTraffic1Green(){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8001744:	2108      	movs	r1, #8
 8001746:	4802      	ldr	r0, [pc, #8]	; (8001750 <toggleTraffic1Green+0x10>)
 8001748:	f000 fd01 	bl	800214e <HAL_GPIO_TogglePin>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40010c00 	.word	0x40010c00

08001754 <toggleTraffic2Green>:

void toggleTraffic2Green(){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8001758:	2110      	movs	r1, #16
 800175a:	4802      	ldr	r0, [pc, #8]	; (8001764 <toggleTraffic2Green+0x10>)
 800175c:	f000 fcf7 	bl	800214e <HAL_GPIO_TogglePin>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40010c00 	.word	0x40010c00

08001768 <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 800176c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <toggleTraffic1Yellow+0x1c>)
 8001772:	f000 fcec 	bl	800214e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8001776:	2108      	movs	r1, #8
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <toggleTraffic1Yellow+0x20>)
 800177a:	f000 fce8 	bl	800214e <HAL_GPIO_TogglePin>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00

0800178c <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8001790:	2120      	movs	r1, #32
 8001792:	4804      	ldr	r0, [pc, #16]	; (80017a4 <toggleTraffic2Yellow+0x18>)
 8001794:	f000 fcdb 	bl	800214e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8001798:	2110      	movs	r1, #16
 800179a:	4802      	ldr	r0, [pc, #8]	; (80017a4 <toggleTraffic2Yellow+0x18>)
 800179c:	f000 fcd7 	bl	800214e <HAL_GPIO_TogglePin>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <acceptTraffic1Red>:

void acceptTraffic1Red(){
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	max_red1 = counter;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <acceptTraffic1Red+0x34>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <acceptTraffic1Red+0x38>)
 80017b2:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <acceptTraffic1Red+0x38>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <acceptTraffic1Red+0x3c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dc02      	bgt.n	80017c6 <acceptTraffic1Red+0x1e>
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <acceptTraffic1Red+0x3c>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <acceptTraffic1Red+0x38>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <acceptTraffic1Red+0x3c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <acceptTraffic1Red+0x40>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	2000011c 	.word	0x2000011c
 80017e0:	20000010 	.word	0x20000010
 80017e4:	20000024 	.word	0x20000024
 80017e8:	20000020 	.word	0x20000020

080017ec <acceptTraffic2Red>:

void acceptTraffic2Red(){
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
	max_red2 = counter;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <acceptTraffic2Red+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <acceptTraffic2Red+0x38>)
 80017f6:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <acceptTraffic2Red+0x38>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <acceptTraffic2Red+0x3c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	dc02      	bgt.n	800180a <acceptTraffic2Red+0x1e>
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <acceptTraffic2Red+0x3c>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <acceptTraffic2Red+0x38>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <acceptTraffic2Red+0x3c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <acceptTraffic2Red+0x40>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	2000011c 	.word	0x2000011c
 8001824:	2000001c 	.word	0x2000001c
 8001828:	20000018 	.word	0x20000018
 800182c:	20000014 	.word	0x20000014

08001830 <acceptTraffic1Green>:

void acceptTraffic1Green(){
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	max_green1 = counter;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <acceptTraffic1Green+0x24>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <acceptTraffic1Green+0x28>)
 800183a:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <acceptTraffic1Green+0x2c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <acceptTraffic1Green+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	4a06      	ldr	r2, [pc, #24]	; (8001860 <acceptTraffic1Green+0x30>)
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2000011c 	.word	0x2000011c
 8001858:	20000014 	.word	0x20000014
 800185c:	2000001c 	.word	0x2000001c
 8001860:	20000018 	.word	0x20000018

08001864 <acceptTraffic2Green>:

void acceptTraffic2Green(){
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	max_green2 = counter;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <acceptTraffic2Green+0x24>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <acceptTraffic2Green+0x28>)
 800186e:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <acceptTraffic2Green+0x2c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <acceptTraffic2Green+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4a06      	ldr	r2, [pc, #24]	; (8001894 <acceptTraffic2Green+0x30>)
 800187c:	6013      	str	r3, [r2, #0]
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000011c 	.word	0x2000011c
 800188c:	20000020 	.word	0x20000020
 8001890:	20000010 	.word	0x20000010
 8001894:	20000024 	.word	0x20000024

08001898 <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <acceptTraffic1Yellow+0x24>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <acceptTraffic1Yellow+0x28>)
 80018a2:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <acceptTraffic1Yellow+0x2c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <acceptTraffic1Yellow+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <acceptTraffic1Yellow+0x30>)
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000011c 	.word	0x2000011c
 80018c0:	20000018 	.word	0x20000018
 80018c4:	2000001c 	.word	0x2000001c
 80018c8:	20000014 	.word	0x20000014

080018cc <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <acceptTraffic2Yellow+0x24>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <acceptTraffic2Yellow+0x28>)
 80018d6:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <acceptTraffic2Yellow+0x2c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <acceptTraffic2Yellow+0x28>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <acceptTraffic2Yellow+0x30>)
 80018e4:	6013      	str	r3, [r2, #0]
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000011c 	.word	0x2000011c
 80018f4:	20000024 	.word	0x20000024
 80018f8:	20000010 	.word	0x20000010
 80018fc:	20000020 	.word	0x20000020

08001900 <displayCounter>:

void displayCounter(){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#", counter/10, counter%10);
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <displayCounter+0x48>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a10      	ldr	r2, [pc, #64]	; (800194c <displayCounter+0x4c>)
 800190a:	fb82 1203 	smull	r1, r2, r2, r3
 800190e:	1092      	asrs	r2, r2, #2
 8001910:	17db      	asrs	r3, r3, #31
 8001912:	1ad0      	subs	r0, r2, r3
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <displayCounter+0x48>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <displayCounter+0x4c>)
 800191a:	fb83 1302 	smull	r1, r3, r3, r2
 800191e:	1099      	asrs	r1, r3, #2
 8001920:	17d3      	asrs	r3, r2, #31
 8001922:	1ac9      	subs	r1, r1, r3
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	1ad1      	subs	r1, r2, r3
 800192e:	460b      	mov	r3, r1
 8001930:	4602      	mov	r2, r0
 8001932:	4907      	ldr	r1, [pc, #28]	; (8001950 <displayCounter+0x50>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <displayCounter+0x54>)
 8001936:	f002 f96f 	bl	8003c18 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 9);
 800193a:	2209      	movs	r2, #9
 800193c:	4905      	ldr	r1, [pc, #20]	; (8001954 <displayCounter+0x54>)
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <displayCounter+0x58>)
 8001940:	f001 fd45 	bl	80033ce <HAL_UART_Transmit_IT>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000011c 	.word	0x2000011c
 800194c:	66666667 	.word	0x66666667
 8001950:	080044a4 	.word	0x080044a4
 8001954:	20000120 	.word	0x20000120
 8001958:	200001e0 	.word	0x200001e0

0800195c <Reset_Handler>:
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <LoopFillZerobss+0x12>)
 800195e:	490d      	ldr	r1, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <LoopFillZerobss+0x1a>)
 8001962:	2300      	movs	r3, #0
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:
 8001966:	58d4      	ldr	r4, [r2, r3]
 8001968:	50c4      	str	r4, [r0, r3]
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:
 800196c:	18c4      	adds	r4, r0, r3
 800196e:	428c      	cmp	r4, r1
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopFillZerobss+0x1e>)
 8001974:	4c0a      	ldr	r4, [pc, #40]	; (80019a0 <LoopFillZerobss+0x22>)
 8001976:	2300      	movs	r3, #0
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:
 800197e:	42a2      	cmp	r2, r4
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>
 8001982:	f7ff fd8b 	bl	800149c <SystemInit>
 8001986:	f002 f91b 	bl	8003bc0 <__libc_init_array>
 800198a:	f7ff fab5 	bl	8000ef8 <main>
 800198e:	4770      	bx	lr
 8001990:	20000000 	.word	0x20000000
 8001994:	20000098 	.word	0x20000098
 8001998:	08004514 	.word	0x08004514
 800199c:	20000098 	.word	0x20000098
 80019a0:	20000558 	.word	0x20000558

080019a4 <ADC1_2_IRQHandler>:
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x28>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x28>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f923 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fc50 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f93b 	bl	8001c6e <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f903 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000028 	.word	0x20000028
 8001a2c:	20000030 	.word	0x20000030
 8001a30:	2000002c 	.word	0x2000002c

08001a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x1c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x20>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_IncTick+0x20>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000030 	.word	0x20000030
 8001a54:	20000544 	.word	0x20000544

08001a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_GetTick+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000544 	.word	0x20000544

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4906      	ldr	r1, [pc, #24]	; (8001b04 <__NVIC_EnableIRQ+0x34>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff90 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff2d 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff42 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff90 	bl	8001b5c <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5f 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff35 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e020      	b.n	8001cf0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 020e 	bic.w	r2, r2, #14
 8001cbc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d005      	beq.n	8001d1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e051      	b.n	8001dc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 020e 	bic.w	r2, r2, #14
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_DMA_Abort_IT+0xd0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d029      	beq.n	8001d9c <HAL_DMA_Abort_IT+0xa0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <HAL_DMA_Abort_IT+0xd4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d022      	beq.n	8001d98 <HAL_DMA_Abort_IT+0x9c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <HAL_DMA_Abort_IT+0xd8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d01a      	beq.n	8001d92 <HAL_DMA_Abort_IT+0x96>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_DMA_Abort_IT+0xdc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d012      	beq.n	8001d8c <HAL_DMA_Abort_IT+0x90>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_DMA_Abort_IT+0xe0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00a      	beq.n	8001d86 <HAL_DMA_Abort_IT+0x8a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1a      	ldr	r2, [pc, #104]	; (8001de0 <HAL_DMA_Abort_IT+0xe4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d102      	bne.n	8001d80 <HAL_DMA_Abort_IT+0x84>
 8001d7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d7e:	e00e      	b.n	8001d9e <HAL_DMA_Abort_IT+0xa2>
 8001d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d84:	e00b      	b.n	8001d9e <HAL_DMA_Abort_IT+0xa2>
 8001d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d8a:	e008      	b.n	8001d9e <HAL_DMA_Abort_IT+0xa2>
 8001d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d90:	e005      	b.n	8001d9e <HAL_DMA_Abort_IT+0xa2>
 8001d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d96:	e002      	b.n	8001d9e <HAL_DMA_Abort_IT+0xa2>
 8001d98:	2310      	movs	r3, #16
 8001d9a:	e000      	b.n	8001d9e <HAL_DMA_Abort_IT+0xa2>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_DMA_Abort_IT+0xe8>)
 8001da0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
    } 
  }
  return status;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40020008 	.word	0x40020008
 8001dd0:	4002001c 	.word	0x4002001c
 8001dd4:	40020030 	.word	0x40020030
 8001dd8:	40020044 	.word	0x40020044
 8001ddc:	40020058 	.word	0x40020058
 8001de0:	4002006c 	.word	0x4002006c
 8001de4:	40020000 	.word	0x40020000

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b08b      	sub	sp, #44	; 0x2c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	e169      	b.n	80020d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8158 	bne.w	80020ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a9a      	ldr	r2, [pc, #616]	; (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d05e      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e24:	4a98      	ldr	r2, [pc, #608]	; (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d875      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e2a:	4a98      	ldr	r2, [pc, #608]	; (800208c <HAL_GPIO_Init+0x2a4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d058      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e30:	4a96      	ldr	r2, [pc, #600]	; (800208c <HAL_GPIO_Init+0x2a4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d86f      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e36:	4a96      	ldr	r2, [pc, #600]	; (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d052      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a94      	ldr	r2, [pc, #592]	; (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d869      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e42:	4a94      	ldr	r2, [pc, #592]	; (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d04c      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e48:	4a92      	ldr	r2, [pc, #584]	; (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d863      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e4e:	4a92      	ldr	r2, [pc, #584]	; (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d046      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e54:	4a90      	ldr	r2, [pc, #576]	; (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d85d      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d82a      	bhi.n	8001eb4 <HAL_GPIO_Init+0xcc>
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d859      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_GPIO_Init+0x80>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ebd 	.word	0x08001ebd
 8001e70:	08001ecf 	.word	0x08001ecf
 8001e74:	08001f11 	.word	0x08001f11
 8001e78:	08001f17 	.word	0x08001f17
 8001e7c:	08001f17 	.word	0x08001f17
 8001e80:	08001f17 	.word	0x08001f17
 8001e84:	08001f17 	.word	0x08001f17
 8001e88:	08001f17 	.word	0x08001f17
 8001e8c:	08001f17 	.word	0x08001f17
 8001e90:	08001f17 	.word	0x08001f17
 8001e94:	08001f17 	.word	0x08001f17
 8001e98:	08001f17 	.word	0x08001f17
 8001e9c:	08001f17 	.word	0x08001f17
 8001ea0:	08001f17 	.word	0x08001f17
 8001ea4:	08001f17 	.word	0x08001f17
 8001ea8:	08001f17 	.word	0x08001f17
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001ed9 	.word	0x08001ed9
 8001eb4:	4a79      	ldr	r2, [pc, #484]	; (800209c <HAL_GPIO_Init+0x2b4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eba:	e02c      	b.n	8001f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e029      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e024      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e01f      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	330c      	adds	r3, #12
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e01a      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eea:	2304      	movs	r3, #4
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e013      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	611a      	str	r2, [r3, #16]
          break;
 8001f02:	e009      	b.n	8001f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f04:	2308      	movs	r3, #8
 8001f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	615a      	str	r2, [r3, #20]
          break;
 8001f0e:	e003      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          break;
 8001f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d801      	bhi.n	8001f22 <HAL_GPIO_Init+0x13a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_Init+0x13e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d802      	bhi.n	8001f34 <HAL_GPIO_Init+0x14c>
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	e002      	b.n	8001f3a <HAL_GPIO_Init+0x152>
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	3b08      	subs	r3, #8
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	210f      	movs	r1, #15
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80b1 	beq.w	80020ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f80:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a40      	ldr	r2, [pc, #256]	; (80020a8 <HAL_GPIO_Init+0x2c0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_GPIO_Init+0x1ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <HAL_GPIO_Init+0x2c4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3e      	ldr	r2, [pc, #248]	; (80020b0 <HAL_GPIO_Init+0x2c8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0x1e4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	; (80020b4 <HAL_GPIO_Init+0x2cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_GPIO_Init+0x1e0>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe6:	492f      	ldr	r1, [pc, #188]	; (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	492c      	ldr	r1, [pc, #176]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4928      	ldr	r1, [pc, #160]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002028:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	491e      	ldr	r1, [pc, #120]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4918      	ldr	r1, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	4914      	ldr	r1, [pc, #80]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d021      	beq.n	80020bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
 8002084:	e021      	b.n	80020ca <HAL_GPIO_Init+0x2e2>
 8002086:	bf00      	nop
 8002088:	10320000 	.word	0x10320000
 800208c:	10310000 	.word	0x10310000
 8002090:	10220000 	.word	0x10220000
 8002094:	10210000 	.word	0x10210000
 8002098:	10120000 	.word	0x10120000
 800209c:	10110000 	.word	0x10110000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010800 	.word	0x40010800
 80020ac:	40010c00 	.word	0x40010c00
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40011400 	.word	0x40011400
 80020b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_GPIO_Init+0x304>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4909      	ldr	r1, [pc, #36]	; (80020ec <HAL_GPIO_Init+0x304>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae8e 	bne.w	8001dfc <HAL_GPIO_Init+0x14>
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	372c      	adds	r7, #44	; 0x2c
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e001      	b.n	8002112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	807b      	strh	r3, [r7, #2]
 800212a:	4613      	mov	r3, r2
 800212c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800212e:	787b      	ldrb	r3, [r7, #1]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800213a:	e003      	b.n	8002144 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	041a      	lsls	r2, r3, #16
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43d9      	mvns	r1, r3
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	400b      	ands	r3, r1
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e26c      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8087 	beq.w	80022ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d00c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ac:	4b8f      	ldr	r3, [pc, #572]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d112      	bne.n	80021de <HAL_RCC_OscConfig+0x5e>
 80021b8:	4b8c      	ldr	r3, [pc, #560]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d10b      	bne.n	80021de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c6:	4b89      	ldr	r3, [pc, #548]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d06c      	beq.n	80022ac <HAL_RCC_OscConfig+0x12c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d168      	bne.n	80022ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e246      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x76>
 80021e8:	4b80      	ldr	r3, [pc, #512]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a7f      	ldr	r2, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	e02e      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x98>
 80021fe:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b78      	ldr	r3, [pc, #480]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a77      	ldr	r2, [pc, #476]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0xbc>
 8002222:	4b72      	ldr	r3, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a71      	ldr	r2, [pc, #452]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b6f      	ldr	r3, [pc, #444]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a6e      	ldr	r2, [pc, #440]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xd4>
 800223c:	4b6b      	ldr	r3, [pc, #428]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6a      	ldr	r2, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b68      	ldr	r3, [pc, #416]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a67      	ldr	r2, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fbfc 	bl	8001a58 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fbf8 	bl	8001a58 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1fa      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xe4>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fbe8 	bl	8001a58 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fbe4 	bl	8001a58 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1e6      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x10c>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d063      	beq.n	8002382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ba:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c6:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d11c      	bne.n	800230c <HAL_RCC_OscConfig+0x18c>
 80022d2:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x176>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1ba      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4939      	ldr	r1, [pc, #228]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	e03a      	b.n	8002382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fb9d 	bl	8001a58 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7ff fb99 	bl	8001a58 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e19b      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e015      	b.n	8002382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <HAL_RCC_OscConfig+0x270>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fb7c 	bl	8001a58 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7ff fb78 	bl	8001a58 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e17a      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03a      	beq.n	8002404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7ff fb5c 	bl	8001a58 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff fb58 	bl	8001a58 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e15a      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_OscConfig+0x26c>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 fad8 	bl	8002978 <RCC_Delay>
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7ff fb42 	bl	8001a58 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d6:	e00f      	b.n	80023f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fb3e 	bl	8001a58 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d908      	bls.n	80023f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e140      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	42420000 	.word	0x42420000
 80023f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	4b9e      	ldr	r3, [pc, #632]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e9      	bne.n	80023d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a6 	beq.w	800255e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002416:	4b97      	ldr	r3, [pc, #604]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b94      	ldr	r3, [pc, #592]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a93      	ldr	r2, [pc, #588]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]
 800242e:	4b91      	ldr	r3, [pc, #580]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b8e      	ldr	r3, [pc, #568]	; (8002678 <HAL_RCC_OscConfig+0x4f8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4b8b      	ldr	r3, [pc, #556]	; (8002678 <HAL_RCC_OscConfig+0x4f8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a8a      	ldr	r2, [pc, #552]	; (8002678 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7ff faff 	bl	8001a58 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7ff fafb 	bl	8001a58 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0fd      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	4b81      	ldr	r3, [pc, #516]	; (8002678 <HAL_RCC_OscConfig+0x4f8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x312>
 8002484:	4b7b      	ldr	r3, [pc, #492]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a7a      	ldr	r2, [pc, #488]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	e02d      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x334>
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a75      	ldr	r2, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6213      	str	r3, [r2, #32]
 80024a6:	4b73      	ldr	r3, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a72      	ldr	r2, [pc, #456]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	e01c      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_OscConfig+0x356>
 80024bc:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a6c      	ldr	r2, [pc, #432]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a69      	ldr	r2, [pc, #420]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0x36e>
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a66      	ldr	r2, [pc, #408]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b64      	ldr	r3, [pc, #400]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a63      	ldr	r2, [pc, #396]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7ff faaf 	bl	8001a58 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7ff faab 	bl	8001a58 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0ab      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <HAL_RCC_OscConfig+0x37e>
 8002520:	e014      	b.n	800254c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff fa99 	bl	8001a58 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7ff fa95 	bl	8001a58 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e095      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ee      	bne.n	800252a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b48      	ldr	r3, [pc, #288]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a47      	ldr	r2, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8081 	beq.w	800266a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	4b42      	ldr	r3, [pc, #264]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d061      	beq.n	8002638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d146      	bne.n	800260a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b3f      	ldr	r3, [pc, #252]	; (800267c <HAL_RCC_OscConfig+0x4fc>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff fa69 	bl	8001a58 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7ff fa65 	bl	8001a58 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e067      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259c:	4b35      	ldr	r3, [pc, #212]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	492d      	ldr	r1, [pc, #180]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a19      	ldr	r1, [r3, #32]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	430b      	orrs	r3, r1
 80025d6:	4927      	ldr	r1, [pc, #156]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x4fc>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fa39 	bl	8001a58 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7ff fa35 	bl	8001a58 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e037      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x46a>
 8002608:	e02f      	b.n	800266a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_RCC_OscConfig+0x4fc>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff fa22 	bl	8001a58 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7ff fa1e 	bl	8001a58 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e020      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x498>
 8002636:	e018      	b.n	800266a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e013      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	429a      	cmp	r2, r3
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	40007000 	.word	0x40007000
 800267c:	42420060 	.word	0x42420060

08002680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d0      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d910      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4965      	ldr	r1, [pc, #404]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f4:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	494d      	ldr	r1, [pc, #308]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d040      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d115      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e07f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e073      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4936      	ldr	r1, [pc, #216]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7ff f972 	bl	8001a58 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7ff f96e 	bl	8001a58 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e053      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d210      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4922      	ldr	r1, [pc, #136]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e032      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4916      	ldr	r1, [pc, #88]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280e:	f000 f821 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	490a      	ldr	r1, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	5ccb      	ldrb	r3, [r1, r3]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	4a09      	ldr	r2, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1cc>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f8d0 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
 8002848:	080044c0 	.word	0x080044c0
 800284c:	20000028 	.word	0x20000028
 8002850:	2000002c 	.word	0x2000002c

08002854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	b490      	push	{r4, r7}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_GetSysClockFreq+0xb0>)
 800285c:	1d3c      	adds	r4, r7, #4
 800285e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002864:	f240 2301 	movw	r3, #513	; 0x201
 8002868:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d002      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x40>
 800288e:	2b08      	cmp	r3, #8
 8002890:	d003      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x46>
 8002892:	e02d      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002896:	623b      	str	r3, [r7, #32]
      break;
 8002898:	e02d      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	0c9b      	lsrs	r3, r3, #18
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a6:	4413      	add	r3, r2
 80028a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0c5b      	lsrs	r3, r3, #17
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028c6:	4413      	add	r3, r2
 80028c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	4a0e      	ldr	r2, [pc, #56]	; (800290c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d2:	fb02 f203 	mul.w	r2, r2, r3
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e004      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	623b      	str	r3, [r7, #32]
      break;
 80028ee:	e002      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f2:	623b      	str	r3, [r7, #32]
      break;
 80028f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f6:	6a3b      	ldr	r3, [r7, #32]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc90      	pop	{r4, r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	080044b0 	.word	0x080044b0
 8002908:	40021000 	.word	0x40021000
 800290c:	007a1200 	.word	0x007a1200
 8002910:	003d0900 	.word	0x003d0900

08002914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b02      	ldr	r3, [pc, #8]	; (8002924 <HAL_RCC_GetHCLKFreq+0x10>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	20000028 	.word	0x20000028

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800292c:	f7ff fff2 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4903      	ldr	r1, [pc, #12]	; (800294c <HAL_RCC_GetPCLK1Freq+0x24>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	080044d0 	.word	0x080044d0

08002950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002954:	f7ff ffde 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0adb      	lsrs	r3, r3, #11
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	080044d0 	.word	0x080044d0

08002978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <RCC_Delay+0x34>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <RCC_Delay+0x38>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0a5b      	lsrs	r3, r3, #9
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002994:	bf00      	nop
  }
  while (Delay --);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1e5a      	subs	r2, r3, #1
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f9      	bne.n	8002994 <RCC_Delay+0x1c>
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	20000028 	.word	0x20000028
 80029b0:	10624dd3 	.word	0x10624dd3

080029b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e041      	b.n	8002a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fc76 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 fb12 	bl	800301c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d001      	beq.n	8002a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e03a      	b.n	8002ae2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_TIM_Base_Start_IT+0x98>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x58>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a96:	d009      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x58>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x58>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d111      	bne.n	8002ad0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d010      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	e007      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800

08002af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_TIM_PWM_Start+0x24>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e022      	b.n	8002b62 <HAL_TIM_PWM_Start+0x6a>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d109      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x3e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	e015      	b.n	8002b62 <HAL_TIM_PWM_Start+0x6a>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d109      	bne.n	8002b50 <HAL_TIM_PWM_Start+0x58>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e008      	b.n	8002b62 <HAL_TIM_PWM_Start+0x6a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e05e      	b.n	8002c28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d104      	bne.n	8002b7a <HAL_TIM_PWM_Start+0x82>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b78:	e013      	b.n	8002ba2 <HAL_TIM_PWM_Start+0xaa>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d104      	bne.n	8002b8a <HAL_TIM_PWM_Start+0x92>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b88:	e00b      	b.n	8002ba2 <HAL_TIM_PWM_Start+0xaa>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0xa2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b98:	e003      	b.n	8002ba2 <HAL_TIM_PWM_Start+0xaa>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	6839      	ldr	r1, [r7, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fb2e 	bl	800320c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <HAL_TIM_PWM_Start+0x138>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d107      	bne.n	8002bca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_TIM_PWM_Start+0x138>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0xfa>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0xfa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <HAL_TIM_PWM_Start+0x13c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0xfa>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_TIM_PWM_Start+0x140>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d010      	beq.n	8002c26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c14:	e007      	b.n	8002c26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800

08002c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f9b1 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f9a4 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f9b3 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0204 	mvn.w	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f987 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f97a 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f989 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0208 	mvn.w	r2, #8
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f95d 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f950 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f95f 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0210 	mvn.w	r2, #16
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f933 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f926 	bl	8002fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f935 	bl	8002ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0201 	mvn.w	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fbd2 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa9b 	bl	8003322 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8f9 	bl	800300a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa66 	bl	8003310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_TIM_ConfigClockSource+0x18>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e0b3      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x180>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9c:	d03e      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0xd0>
 8002e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea2:	f200 8087 	bhi.w	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eaa:	f000 8085 	beq.w	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	d87f      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002eb4:	2b70      	cmp	r3, #112	; 0x70
 8002eb6:	d01a      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0xa2>
 8002eb8:	2b70      	cmp	r3, #112	; 0x70
 8002eba:	d87b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ebc:	2b60      	cmp	r3, #96	; 0x60
 8002ebe:	d050      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x116>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d877      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ec4:	2b50      	cmp	r3, #80	; 0x50
 8002ec6:	d03c      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0xf6>
 8002ec8:	2b50      	cmp	r3, #80	; 0x50
 8002eca:	d873      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d058      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x136>
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d86f      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ed4:	2b30      	cmp	r3, #48	; 0x30
 8002ed6:	d064      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d86b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d060      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d867      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05c      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d05a      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002eec:	e062      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6899      	ldr	r1, [r3, #8]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f000 f966 	bl	80031ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
      break;
 8002f1a:	e04e      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6899      	ldr	r1, [r3, #8]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f000 f94f 	bl	80031ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f3e:	609a      	str	r2, [r3, #8]
      break;
 8002f40:	e03b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 f8c6 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2150      	movs	r1, #80	; 0x50
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f91d 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002f60:	e02b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f000 f8e4 	bl	800313c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2160      	movs	r1, #96	; 0x60
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f90d 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002f80:	e01b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f000 f8a6 	bl	80030e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f8fd 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e00b      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f000 f8f4 	bl	800319a <TIM_ITRx_SetConfig>
        break;
 8002fb2:	e002      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <TIM_Base_SetConfig+0xb8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0x30>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x30>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <TIM_Base_SetConfig+0xbc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x30>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a25      	ldr	r2, [pc, #148]	; (80030dc <TIM_Base_SetConfig+0xc0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <TIM_Base_SetConfig+0xb8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00b      	beq.n	800307e <TIM_Base_SetConfig+0x62>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d007      	beq.n	800307e <TIM_Base_SetConfig+0x62>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <TIM_Base_SetConfig+0xbc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_Base_SetConfig+0x62>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <TIM_Base_SetConfig+0xc0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d108      	bne.n	8003090 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <TIM_Base_SetConfig+0xb8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	615a      	str	r2, [r3, #20]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800

080030e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f023 0201 	bic.w	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 030a 	bic.w	r3, r3, #10
 800311c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0210 	bic.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	031b      	lsls	r3, r3, #12
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 0307 	orr.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b087      	sub	sp, #28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	021a      	lsls	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2201      	movs	r2, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	43db      	mvns	r3, r3
 800322e:	401a      	ands	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003268:	2302      	movs	r3, #2
 800326a:	e046      	b.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00e      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d009      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a10      	ldr	r2, [pc, #64]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10c      	bne.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800

08003310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e03f      	b.n	80033c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd ffda 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	; 0x24
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb8d 	bl	8003a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800338c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800339c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	4613      	mov	r3, r2
 80033da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d130      	bne.n	800344a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_UART_Transmit_IT+0x26>
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e029      	b.n	800344c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_UART_Transmit_IT+0x38>
 8003402:	2302      	movs	r3, #2
 8003404:	e022      	b.n	800344c <HAL_UART_Transmit_IT+0x7e>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2221      	movs	r2, #33	; 0x21
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003444:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
	...

08003458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_UART_IRQHandler+0x52>
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa4f 	bl	8003946 <UART_Receive_IT>
      return;
 80034a8:	e17b      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80b1 	beq.w	8003614 <HAL_UART_IRQHandler+0x1bc>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_UART_IRQHandler+0x70>
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80a6 	beq.w	8003614 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_UART_IRQHandler+0x90>
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_UART_IRQHandler+0xb0>
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0202 	orr.w	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_UART_IRQHandler+0xd0>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0204 	orr.w	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00f      	beq.n	8003552 <HAL_UART_IRQHandler+0xfa>
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d104      	bne.n	8003546 <HAL_UART_IRQHandler+0xee>
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0208 	orr.w	r2, r3, #8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 811e 	beq.w	8003798 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_UART_IRQHandler+0x11e>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f9e8 	bl	8003946 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <HAL_UART_IRQHandler+0x146>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d031      	beq.n	8003602 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f92a 	bl	80037f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d023      	beq.n	80035fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d013      	beq.n	80035f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	4a76      	ldr	r2, [pc, #472]	; (80037a8 <HAL_UART_IRQHandler+0x350>)
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fb90 	bl	8001cfc <HAL_DMA_Abort_IT>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ec:	4610      	mov	r0, r2
 80035ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f0:	e00e      	b.n	8003610 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8ec 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	e00a      	b.n	8003610 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8e8 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e006      	b.n	8003610 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8e4 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800360e:	e0c3      	b.n	8003798 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	bf00      	nop
    return;
 8003612:	e0c1      	b.n	8003798 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 80a1 	bne.w	8003760 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 809b 	beq.w	8003760 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8095 	beq.w	8003760 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04e      	beq.n	80036f8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003664:	8a3b      	ldrh	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8098 	beq.w	800379c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003670:	8a3a      	ldrh	r2, [r7, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	f080 8092 	bcs.w	800379c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8a3a      	ldrh	r2, [r7, #16]
 800367c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d02b      	beq.n	80036e0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003696:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0210 	bic.w	r2, r2, #16
 80036d4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fad3 	bl	8001c86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4619      	mov	r1, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f876 	bl	80037e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036f6:	e051      	b.n	800379c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003700:	b29b      	uxth	r3, r3
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d047      	beq.n	80037a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003710:	8a7b      	ldrh	r3, [r7, #18]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d044      	beq.n	80037a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003724:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0210 	bic.w	r2, r2, #16
 8003752:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003754:	8a7b      	ldrh	r3, [r7, #18]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f842 	bl	80037e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800375e:	e01f      	b.n	80037a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_UART_IRQHandler+0x324>
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f87f 	bl	8003878 <UART_Transmit_IT>
    return;
 800377a:	e012      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <HAL_UART_IRQHandler+0x34a>
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8c0 	bl	8003916 <UART_EndTransmit_IT>
    return;
 8003796:	e004      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003798:	bf00      	nop
 800379a:	e002      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80037a0:	bf00      	nop
  }
}
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08003851 	.word	0x08003851

080037ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800380e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0210 	bic.w	r2, r2, #16
 8003836:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff ffb0 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b21      	cmp	r3, #33	; 0x21
 800388a:	d13e      	bne.n	800390a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d114      	bne.n	80038c0 <UART_Transmit_IT+0x48>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d110      	bne.n	80038c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	621a      	str	r2, [r3, #32]
 80038be:	e008      	b.n	80038d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	1c59      	adds	r1, r3, #1
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6211      	str	r1, [r2, #32]
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29b      	uxth	r3, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4619      	mov	r1, r3
 80038e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003904:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ff38 	bl	80037ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b22      	cmp	r3, #34	; 0x22
 8003958:	f040 8099 	bne.w	8003a8e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d117      	bne.n	8003996 <UART_Receive_IT+0x50>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d113      	bne.n	8003996 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	b29a      	uxth	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
 8003994:	e026      	b.n	80039e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d007      	beq.n	80039ba <UART_Receive_IT+0x74>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <UART_Receive_IT+0x82>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e008      	b.n	80039da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4619      	mov	r1, r3
 80039f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d148      	bne.n	8003a8a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0220 	bic.w	r2, r2, #32
 8003a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d123      	bne.n	8003a80 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0210 	bic.w	r2, r2, #16
 8003a4c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d10a      	bne.n	8003a72 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff feb2 	bl	80037e2 <HAL_UARTEx_RxEventCallback>
 8003a7e:	e002      	b.n	8003a86 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fe9c 	bl	80037be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e002      	b.n	8003a90 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ad2:	f023 030c 	bic.w	r3, r3, #12
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <UART_SetConfig+0x114>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7fe ff26 	bl	8002950 <HAL_RCC_GetPCLK2Freq>
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	e002      	b.n	8003b0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe ff0e 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <UART_SetConfig+0x118>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	0119      	lsls	r1, r3, #4
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009a      	lsls	r2, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <UART_SetConfig+0x118>)
 8003b46:	fba3 0302 	umull	r0, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2064      	movs	r0, #100	; 0x64
 8003b4e:	fb00 f303 	mul.w	r3, r0, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	; 0x32
 8003b58:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <UART_SetConfig+0x118>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b64:	4419      	add	r1, r3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009a      	lsls	r2, r3, #2
 8003b70:	441a      	add	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <UART_SetConfig+0x118>)
 8003b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2064      	movs	r0, #100	; 0x64
 8003b86:	fb00 f303 	mul.w	r3, r0, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	3332      	adds	r3, #50	; 0x32
 8003b90:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <UART_SetConfig+0x118>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	51eb851f 	.word	0x51eb851f

08003bb4 <__errno>:
 8003bb4:	4b01      	ldr	r3, [pc, #4]	; (8003bbc <__errno+0x8>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000034 	.word	0x20000034

08003bc0 <__libc_init_array>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	4d0c      	ldr	r5, [pc, #48]	; (8003bf8 <__libc_init_array+0x38>)
 8003bc6:	4c0d      	ldr	r4, [pc, #52]	; (8003bfc <__libc_init_array+0x3c>)
 8003bc8:	1b64      	subs	r4, r4, r5
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	42a6      	cmp	r6, r4
 8003bce:	d109      	bne.n	8003be4 <__libc_init_array+0x24>
 8003bd0:	f000 fc5c 	bl	800448c <_init>
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	4d0a      	ldr	r5, [pc, #40]	; (8003c00 <__libc_init_array+0x40>)
 8003bd8:	4c0a      	ldr	r4, [pc, #40]	; (8003c04 <__libc_init_array+0x44>)
 8003bda:	1b64      	subs	r4, r4, r5
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	42a6      	cmp	r6, r4
 8003be0:	d105      	bne.n	8003bee <__libc_init_array+0x2e>
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be8:	4798      	blx	r3
 8003bea:	3601      	adds	r6, #1
 8003bec:	e7ee      	b.n	8003bcc <__libc_init_array+0xc>
 8003bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf2:	4798      	blx	r3
 8003bf4:	3601      	adds	r6, #1
 8003bf6:	e7f2      	b.n	8003bde <__libc_init_array+0x1e>
 8003bf8:	0800450c 	.word	0x0800450c
 8003bfc:	0800450c 	.word	0x0800450c
 8003c00:	0800450c 	.word	0x0800450c
 8003c04:	08004510 	.word	0x08004510

08003c08 <memset>:
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4402      	add	r2, r0
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d100      	bne.n	8003c12 <memset+0xa>
 8003c10:	4770      	bx	lr
 8003c12:	f803 1b01 	strb.w	r1, [r3], #1
 8003c16:	e7f9      	b.n	8003c0c <memset+0x4>

08003c18 <siprintf>:
 8003c18:	b40e      	push	{r1, r2, r3}
 8003c1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c1e:	b500      	push	{lr}
 8003c20:	b09c      	sub	sp, #112	; 0x70
 8003c22:	ab1d      	add	r3, sp, #116	; 0x74
 8003c24:	9002      	str	r0, [sp, #8]
 8003c26:	9006      	str	r0, [sp, #24]
 8003c28:	9107      	str	r1, [sp, #28]
 8003c2a:	9104      	str	r1, [sp, #16]
 8003c2c:	4808      	ldr	r0, [pc, #32]	; (8003c50 <siprintf+0x38>)
 8003c2e:	4909      	ldr	r1, [pc, #36]	; (8003c54 <siprintf+0x3c>)
 8003c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c34:	9105      	str	r1, [sp, #20]
 8003c36:	6800      	ldr	r0, [r0, #0]
 8003c38:	a902      	add	r1, sp, #8
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	f000 f868 	bl	8003d10 <_svfiprintf_r>
 8003c40:	2200      	movs	r2, #0
 8003c42:	9b02      	ldr	r3, [sp, #8]
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	b01c      	add	sp, #112	; 0x70
 8003c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c4c:	b003      	add	sp, #12
 8003c4e:	4770      	bx	lr
 8003c50:	20000034 	.word	0x20000034
 8003c54:	ffff0208 	.word	0xffff0208

08003c58 <__ssputs_r>:
 8003c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c5c:	688e      	ldr	r6, [r1, #8]
 8003c5e:	4682      	mov	sl, r0
 8003c60:	429e      	cmp	r6, r3
 8003c62:	460c      	mov	r4, r1
 8003c64:	4690      	mov	r8, r2
 8003c66:	461f      	mov	r7, r3
 8003c68:	d838      	bhi.n	8003cdc <__ssputs_r+0x84>
 8003c6a:	898a      	ldrh	r2, [r1, #12]
 8003c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c70:	d032      	beq.n	8003cd8 <__ssputs_r+0x80>
 8003c72:	6825      	ldr	r5, [r4, #0]
 8003c74:	6909      	ldr	r1, [r1, #16]
 8003c76:	3301      	adds	r3, #1
 8003c78:	eba5 0901 	sub.w	r9, r5, r1
 8003c7c:	6965      	ldr	r5, [r4, #20]
 8003c7e:	444b      	add	r3, r9
 8003c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c88:	106d      	asrs	r5, r5, #1
 8003c8a:	429d      	cmp	r5, r3
 8003c8c:	bf38      	it	cc
 8003c8e:	461d      	movcc	r5, r3
 8003c90:	0553      	lsls	r3, r2, #21
 8003c92:	d531      	bpl.n	8003cf8 <__ssputs_r+0xa0>
 8003c94:	4629      	mov	r1, r5
 8003c96:	f000 fb53 	bl	8004340 <_malloc_r>
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	b950      	cbnz	r0, 8003cb4 <__ssputs_r+0x5c>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	f8ca 3000 	str.w	r3, [sl]
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb4:	464a      	mov	r2, r9
 8003cb6:	6921      	ldr	r1, [r4, #16]
 8003cb8:	f000 face 	bl	8004258 <memcpy>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	6126      	str	r6, [r4, #16]
 8003cca:	444e      	add	r6, r9
 8003ccc:	6026      	str	r6, [r4, #0]
 8003cce:	463e      	mov	r6, r7
 8003cd0:	6165      	str	r5, [r4, #20]
 8003cd2:	eba5 0509 	sub.w	r5, r5, r9
 8003cd6:	60a5      	str	r5, [r4, #8]
 8003cd8:	42be      	cmp	r6, r7
 8003cda:	d900      	bls.n	8003cde <__ssputs_r+0x86>
 8003cdc:	463e      	mov	r6, r7
 8003cde:	4632      	mov	r2, r6
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	f000 fac6 	bl	8004274 <memmove>
 8003ce8:	68a3      	ldr	r3, [r4, #8]
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	1b9b      	subs	r3, r3, r6
 8003cee:	4432      	add	r2, r6
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	60a3      	str	r3, [r4, #8]
 8003cf4:	6022      	str	r2, [r4, #0]
 8003cf6:	e7db      	b.n	8003cb0 <__ssputs_r+0x58>
 8003cf8:	462a      	mov	r2, r5
 8003cfa:	f000 fb7b 	bl	80043f4 <_realloc_r>
 8003cfe:	4606      	mov	r6, r0
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d1e1      	bne.n	8003cc8 <__ssputs_r+0x70>
 8003d04:	4650      	mov	r0, sl
 8003d06:	6921      	ldr	r1, [r4, #16]
 8003d08:	f000 face 	bl	80042a8 <_free_r>
 8003d0c:	e7c7      	b.n	8003c9e <__ssputs_r+0x46>
	...

08003d10 <_svfiprintf_r>:
 8003d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d14:	4698      	mov	r8, r3
 8003d16:	898b      	ldrh	r3, [r1, #12]
 8003d18:	4607      	mov	r7, r0
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	4614      	mov	r4, r2
 8003d20:	b09d      	sub	sp, #116	; 0x74
 8003d22:	d50e      	bpl.n	8003d42 <_svfiprintf_r+0x32>
 8003d24:	690b      	ldr	r3, [r1, #16]
 8003d26:	b963      	cbnz	r3, 8003d42 <_svfiprintf_r+0x32>
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	f000 fb09 	bl	8004340 <_malloc_r>
 8003d2e:	6028      	str	r0, [r5, #0]
 8003d30:	6128      	str	r0, [r5, #16]
 8003d32:	b920      	cbnz	r0, 8003d3e <_svfiprintf_r+0x2e>
 8003d34:	230c      	movs	r3, #12
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	e0d1      	b.n	8003ee2 <_svfiprintf_r+0x1d2>
 8003d3e:	2340      	movs	r3, #64	; 0x40
 8003d40:	616b      	str	r3, [r5, #20]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9309      	str	r3, [sp, #36]	; 0x24
 8003d46:	2320      	movs	r3, #32
 8003d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d4c:	2330      	movs	r3, #48	; 0x30
 8003d4e:	f04f 0901 	mov.w	r9, #1
 8003d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003efc <_svfiprintf_r+0x1ec>
 8003d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d5e:	4623      	mov	r3, r4
 8003d60:	469a      	mov	sl, r3
 8003d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d66:	b10a      	cbz	r2, 8003d6c <_svfiprintf_r+0x5c>
 8003d68:	2a25      	cmp	r2, #37	; 0x25
 8003d6a:	d1f9      	bne.n	8003d60 <_svfiprintf_r+0x50>
 8003d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d70:	d00b      	beq.n	8003d8a <_svfiprintf_r+0x7a>
 8003d72:	465b      	mov	r3, fp
 8003d74:	4622      	mov	r2, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	4638      	mov	r0, r7
 8003d7a:	f7ff ff6d 	bl	8003c58 <__ssputs_r>
 8003d7e:	3001      	adds	r0, #1
 8003d80:	f000 80aa 	beq.w	8003ed8 <_svfiprintf_r+0x1c8>
 8003d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d86:	445a      	add	r2, fp
 8003d88:	9209      	str	r2, [sp, #36]	; 0x24
 8003d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80a2 	beq.w	8003ed8 <_svfiprintf_r+0x1c8>
 8003d94:	2300      	movs	r3, #0
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d9e:	f10a 0a01 	add.w	sl, sl, #1
 8003da2:	9304      	str	r3, [sp, #16]
 8003da4:	9307      	str	r3, [sp, #28]
 8003da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003daa:	931a      	str	r3, [sp, #104]	; 0x68
 8003dac:	4654      	mov	r4, sl
 8003dae:	2205      	movs	r2, #5
 8003db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db4:	4851      	ldr	r0, [pc, #324]	; (8003efc <_svfiprintf_r+0x1ec>)
 8003db6:	f000 fa41 	bl	800423c <memchr>
 8003dba:	9a04      	ldr	r2, [sp, #16]
 8003dbc:	b9d8      	cbnz	r0, 8003df6 <_svfiprintf_r+0xe6>
 8003dbe:	06d0      	lsls	r0, r2, #27
 8003dc0:	bf44      	itt	mi
 8003dc2:	2320      	movmi	r3, #32
 8003dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dc8:	0711      	lsls	r1, r2, #28
 8003dca:	bf44      	itt	mi
 8003dcc:	232b      	movmi	r3, #43	; 0x2b
 8003dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd8:	d015      	beq.n	8003e06 <_svfiprintf_r+0xf6>
 8003dda:	4654      	mov	r4, sl
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f04f 0c0a 	mov.w	ip, #10
 8003de2:	9a07      	ldr	r2, [sp, #28]
 8003de4:	4621      	mov	r1, r4
 8003de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dea:	3b30      	subs	r3, #48	; 0x30
 8003dec:	2b09      	cmp	r3, #9
 8003dee:	d94e      	bls.n	8003e8e <_svfiprintf_r+0x17e>
 8003df0:	b1b0      	cbz	r0, 8003e20 <_svfiprintf_r+0x110>
 8003df2:	9207      	str	r2, [sp, #28]
 8003df4:	e014      	b.n	8003e20 <_svfiprintf_r+0x110>
 8003df6:	eba0 0308 	sub.w	r3, r0, r8
 8003dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	46a2      	mov	sl, r4
 8003e02:	9304      	str	r3, [sp, #16]
 8003e04:	e7d2      	b.n	8003dac <_svfiprintf_r+0x9c>
 8003e06:	9b03      	ldr	r3, [sp, #12]
 8003e08:	1d19      	adds	r1, r3, #4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	9103      	str	r1, [sp, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bfbb      	ittet	lt
 8003e12:	425b      	neglt	r3, r3
 8003e14:	f042 0202 	orrlt.w	r2, r2, #2
 8003e18:	9307      	strge	r3, [sp, #28]
 8003e1a:	9307      	strlt	r3, [sp, #28]
 8003e1c:	bfb8      	it	lt
 8003e1e:	9204      	strlt	r2, [sp, #16]
 8003e20:	7823      	ldrb	r3, [r4, #0]
 8003e22:	2b2e      	cmp	r3, #46	; 0x2e
 8003e24:	d10c      	bne.n	8003e40 <_svfiprintf_r+0x130>
 8003e26:	7863      	ldrb	r3, [r4, #1]
 8003e28:	2b2a      	cmp	r3, #42	; 0x2a
 8003e2a:	d135      	bne.n	8003e98 <_svfiprintf_r+0x188>
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	3402      	adds	r4, #2
 8003e30:	1d1a      	adds	r2, r3, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	9203      	str	r2, [sp, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfb8      	it	lt
 8003e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e3e:	9305      	str	r3, [sp, #20]
 8003e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f0c <_svfiprintf_r+0x1fc>
 8003e44:	2203      	movs	r2, #3
 8003e46:	4650      	mov	r0, sl
 8003e48:	7821      	ldrb	r1, [r4, #0]
 8003e4a:	f000 f9f7 	bl	800423c <memchr>
 8003e4e:	b140      	cbz	r0, 8003e62 <_svfiprintf_r+0x152>
 8003e50:	2340      	movs	r3, #64	; 0x40
 8003e52:	eba0 000a 	sub.w	r0, r0, sl
 8003e56:	fa03 f000 	lsl.w	r0, r3, r0
 8003e5a:	9b04      	ldr	r3, [sp, #16]
 8003e5c:	3401      	adds	r4, #1
 8003e5e:	4303      	orrs	r3, r0
 8003e60:	9304      	str	r3, [sp, #16]
 8003e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e66:	2206      	movs	r2, #6
 8003e68:	4825      	ldr	r0, [pc, #148]	; (8003f00 <_svfiprintf_r+0x1f0>)
 8003e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e6e:	f000 f9e5 	bl	800423c <memchr>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d038      	beq.n	8003ee8 <_svfiprintf_r+0x1d8>
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <_svfiprintf_r+0x1f4>)
 8003e78:	bb1b      	cbnz	r3, 8003ec2 <_svfiprintf_r+0x1b2>
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	3308      	adds	r3, #8
 8003e84:	9303      	str	r3, [sp, #12]
 8003e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e88:	4433      	add	r3, r6
 8003e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8c:	e767      	b.n	8003d5e <_svfiprintf_r+0x4e>
 8003e8e:	460c      	mov	r4, r1
 8003e90:	2001      	movs	r0, #1
 8003e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e96:	e7a5      	b.n	8003de4 <_svfiprintf_r+0xd4>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f04f 0c0a 	mov.w	ip, #10
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	3401      	adds	r4, #1
 8003ea2:	9305      	str	r3, [sp, #20]
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eaa:	3a30      	subs	r2, #48	; 0x30
 8003eac:	2a09      	cmp	r2, #9
 8003eae:	d903      	bls.n	8003eb8 <_svfiprintf_r+0x1a8>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0c5      	beq.n	8003e40 <_svfiprintf_r+0x130>
 8003eb4:	9105      	str	r1, [sp, #20]
 8003eb6:	e7c3      	b.n	8003e40 <_svfiprintf_r+0x130>
 8003eb8:	4604      	mov	r4, r0
 8003eba:	2301      	movs	r3, #1
 8003ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ec0:	e7f0      	b.n	8003ea4 <_svfiprintf_r+0x194>
 8003ec2:	ab03      	add	r3, sp, #12
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	462a      	mov	r2, r5
 8003ec8:	4638      	mov	r0, r7
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <_svfiprintf_r+0x1f8>)
 8003ecc:	a904      	add	r1, sp, #16
 8003ece:	f3af 8000 	nop.w
 8003ed2:	1c42      	adds	r2, r0, #1
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	d1d6      	bne.n	8003e86 <_svfiprintf_r+0x176>
 8003ed8:	89ab      	ldrh	r3, [r5, #12]
 8003eda:	065b      	lsls	r3, r3, #25
 8003edc:	f53f af2c 	bmi.w	8003d38 <_svfiprintf_r+0x28>
 8003ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ee2:	b01d      	add	sp, #116	; 0x74
 8003ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee8:	ab03      	add	r3, sp, #12
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	462a      	mov	r2, r5
 8003eee:	4638      	mov	r0, r7
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <_svfiprintf_r+0x1f8>)
 8003ef2:	a904      	add	r1, sp, #16
 8003ef4:	f000 f87c 	bl	8003ff0 <_printf_i>
 8003ef8:	e7eb      	b.n	8003ed2 <_svfiprintf_r+0x1c2>
 8003efa:	bf00      	nop
 8003efc:	080044d8 	.word	0x080044d8
 8003f00:	080044e2 	.word	0x080044e2
 8003f04:	00000000 	.word	0x00000000
 8003f08:	08003c59 	.word	0x08003c59
 8003f0c:	080044de 	.word	0x080044de

08003f10 <_printf_common>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	4616      	mov	r6, r2
 8003f16:	4699      	mov	r9, r3
 8003f18:	688a      	ldr	r2, [r1, #8]
 8003f1a:	690b      	ldr	r3, [r1, #16]
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	bfb8      	it	lt
 8003f22:	4613      	movlt	r3, r2
 8003f24:	6033      	str	r3, [r6, #0]
 8003f26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f30:	b10a      	cbz	r2, 8003f36 <_printf_common+0x26>
 8003f32:	3301      	adds	r3, #1
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	0699      	lsls	r1, r3, #26
 8003f3a:	bf42      	ittt	mi
 8003f3c:	6833      	ldrmi	r3, [r6, #0]
 8003f3e:	3302      	addmi	r3, #2
 8003f40:	6033      	strmi	r3, [r6, #0]
 8003f42:	6825      	ldr	r5, [r4, #0]
 8003f44:	f015 0506 	ands.w	r5, r5, #6
 8003f48:	d106      	bne.n	8003f58 <_printf_common+0x48>
 8003f4a:	f104 0a19 	add.w	sl, r4, #25
 8003f4e:	68e3      	ldr	r3, [r4, #12]
 8003f50:	6832      	ldr	r2, [r6, #0]
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	dc28      	bgt.n	8003faa <_printf_common+0x9a>
 8003f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f5c:	1e13      	subs	r3, r2, #0
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	bf18      	it	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	0692      	lsls	r2, r2, #26
 8003f66:	d42d      	bmi.n	8003fc4 <_printf_common+0xb4>
 8003f68:	4649      	mov	r1, r9
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f70:	47c0      	blx	r8
 8003f72:	3001      	adds	r0, #1
 8003f74:	d020      	beq.n	8003fb8 <_printf_common+0xa8>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	68e5      	ldr	r5, [r4, #12]
 8003f7a:	f003 0306 	and.w	r3, r3, #6
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	bf18      	it	ne
 8003f82:	2500      	movne	r5, #0
 8003f84:	6832      	ldr	r2, [r6, #0]
 8003f86:	f04f 0600 	mov.w	r6, #0
 8003f8a:	68a3      	ldr	r3, [r4, #8]
 8003f8c:	bf08      	it	eq
 8003f8e:	1aad      	subeq	r5, r5, r2
 8003f90:	6922      	ldr	r2, [r4, #16]
 8003f92:	bf08      	it	eq
 8003f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	bfc4      	itt	gt
 8003f9c:	1a9b      	subgt	r3, r3, r2
 8003f9e:	18ed      	addgt	r5, r5, r3
 8003fa0:	341a      	adds	r4, #26
 8003fa2:	42b5      	cmp	r5, r6
 8003fa4:	d11a      	bne.n	8003fdc <_printf_common+0xcc>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e008      	b.n	8003fbc <_printf_common+0xac>
 8003faa:	2301      	movs	r3, #1
 8003fac:	4652      	mov	r2, sl
 8003fae:	4649      	mov	r1, r9
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	47c0      	blx	r8
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d103      	bne.n	8003fc0 <_printf_common+0xb0>
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	3501      	adds	r5, #1
 8003fc2:	e7c4      	b.n	8003f4e <_printf_common+0x3e>
 8003fc4:	2030      	movs	r0, #48	; 0x30
 8003fc6:	18e1      	adds	r1, r4, r3
 8003fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fd2:	4422      	add	r2, r4
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fda:	e7c5      	b.n	8003f68 <_printf_common+0x58>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4622      	mov	r2, r4
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	47c0      	blx	r8
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d0e6      	beq.n	8003fb8 <_printf_common+0xa8>
 8003fea:	3601      	adds	r6, #1
 8003fec:	e7d9      	b.n	8003fa2 <_printf_common+0x92>
	...

08003ff0 <_printf_i>:
 8003ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	7e27      	ldrb	r7, [r4, #24]
 8003ff8:	4691      	mov	r9, r2
 8003ffa:	2f78      	cmp	r7, #120	; 0x78
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	469a      	mov	sl, r3
 8004000:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004006:	d807      	bhi.n	8004018 <_printf_i+0x28>
 8004008:	2f62      	cmp	r7, #98	; 0x62
 800400a:	d80a      	bhi.n	8004022 <_printf_i+0x32>
 800400c:	2f00      	cmp	r7, #0
 800400e:	f000 80d9 	beq.w	80041c4 <_printf_i+0x1d4>
 8004012:	2f58      	cmp	r7, #88	; 0x58
 8004014:	f000 80a4 	beq.w	8004160 <_printf_i+0x170>
 8004018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800401c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004020:	e03a      	b.n	8004098 <_printf_i+0xa8>
 8004022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004026:	2b15      	cmp	r3, #21
 8004028:	d8f6      	bhi.n	8004018 <_printf_i+0x28>
 800402a:	a001      	add	r0, pc, #4	; (adr r0, 8004030 <_printf_i+0x40>)
 800402c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004030:	08004089 	.word	0x08004089
 8004034:	0800409d 	.word	0x0800409d
 8004038:	08004019 	.word	0x08004019
 800403c:	08004019 	.word	0x08004019
 8004040:	08004019 	.word	0x08004019
 8004044:	08004019 	.word	0x08004019
 8004048:	0800409d 	.word	0x0800409d
 800404c:	08004019 	.word	0x08004019
 8004050:	08004019 	.word	0x08004019
 8004054:	08004019 	.word	0x08004019
 8004058:	08004019 	.word	0x08004019
 800405c:	080041ab 	.word	0x080041ab
 8004060:	080040cd 	.word	0x080040cd
 8004064:	0800418d 	.word	0x0800418d
 8004068:	08004019 	.word	0x08004019
 800406c:	08004019 	.word	0x08004019
 8004070:	080041cd 	.word	0x080041cd
 8004074:	08004019 	.word	0x08004019
 8004078:	080040cd 	.word	0x080040cd
 800407c:	08004019 	.word	0x08004019
 8004080:	08004019 	.word	0x08004019
 8004084:	08004195 	.word	0x08004195
 8004088:	680b      	ldr	r3, [r1, #0]
 800408a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800408e:	1d1a      	adds	r2, r3, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	600a      	str	r2, [r1, #0]
 8004094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004098:	2301      	movs	r3, #1
 800409a:	e0a4      	b.n	80041e6 <_printf_i+0x1f6>
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	6808      	ldr	r0, [r1, #0]
 80040a0:	062e      	lsls	r6, r5, #24
 80040a2:	f100 0304 	add.w	r3, r0, #4
 80040a6:	d50a      	bpl.n	80040be <_printf_i+0xce>
 80040a8:	6805      	ldr	r5, [r0, #0]
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	2d00      	cmp	r5, #0
 80040ae:	da03      	bge.n	80040b8 <_printf_i+0xc8>
 80040b0:	232d      	movs	r3, #45	; 0x2d
 80040b2:	426d      	negs	r5, r5
 80040b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b8:	230a      	movs	r3, #10
 80040ba:	485e      	ldr	r0, [pc, #376]	; (8004234 <_printf_i+0x244>)
 80040bc:	e019      	b.n	80040f2 <_printf_i+0x102>
 80040be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040c2:	6805      	ldr	r5, [r0, #0]
 80040c4:	600b      	str	r3, [r1, #0]
 80040c6:	bf18      	it	ne
 80040c8:	b22d      	sxthne	r5, r5
 80040ca:	e7ef      	b.n	80040ac <_printf_i+0xbc>
 80040cc:	680b      	ldr	r3, [r1, #0]
 80040ce:	6825      	ldr	r5, [r4, #0]
 80040d0:	1d18      	adds	r0, r3, #4
 80040d2:	6008      	str	r0, [r1, #0]
 80040d4:	0628      	lsls	r0, r5, #24
 80040d6:	d501      	bpl.n	80040dc <_printf_i+0xec>
 80040d8:	681d      	ldr	r5, [r3, #0]
 80040da:	e002      	b.n	80040e2 <_printf_i+0xf2>
 80040dc:	0669      	lsls	r1, r5, #25
 80040de:	d5fb      	bpl.n	80040d8 <_printf_i+0xe8>
 80040e0:	881d      	ldrh	r5, [r3, #0]
 80040e2:	2f6f      	cmp	r7, #111	; 0x6f
 80040e4:	bf0c      	ite	eq
 80040e6:	2308      	moveq	r3, #8
 80040e8:	230a      	movne	r3, #10
 80040ea:	4852      	ldr	r0, [pc, #328]	; (8004234 <_printf_i+0x244>)
 80040ec:	2100      	movs	r1, #0
 80040ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040f2:	6866      	ldr	r6, [r4, #4]
 80040f4:	2e00      	cmp	r6, #0
 80040f6:	bfa8      	it	ge
 80040f8:	6821      	ldrge	r1, [r4, #0]
 80040fa:	60a6      	str	r6, [r4, #8]
 80040fc:	bfa4      	itt	ge
 80040fe:	f021 0104 	bicge.w	r1, r1, #4
 8004102:	6021      	strge	r1, [r4, #0]
 8004104:	b90d      	cbnz	r5, 800410a <_printf_i+0x11a>
 8004106:	2e00      	cmp	r6, #0
 8004108:	d04d      	beq.n	80041a6 <_printf_i+0x1b6>
 800410a:	4616      	mov	r6, r2
 800410c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004110:	fb03 5711 	mls	r7, r3, r1, r5
 8004114:	5dc7      	ldrb	r7, [r0, r7]
 8004116:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800411a:	462f      	mov	r7, r5
 800411c:	42bb      	cmp	r3, r7
 800411e:	460d      	mov	r5, r1
 8004120:	d9f4      	bls.n	800410c <_printf_i+0x11c>
 8004122:	2b08      	cmp	r3, #8
 8004124:	d10b      	bne.n	800413e <_printf_i+0x14e>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	07df      	lsls	r7, r3, #31
 800412a:	d508      	bpl.n	800413e <_printf_i+0x14e>
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	6861      	ldr	r1, [r4, #4]
 8004130:	4299      	cmp	r1, r3
 8004132:	bfde      	ittt	le
 8004134:	2330      	movle	r3, #48	; 0x30
 8004136:	f806 3c01 	strble.w	r3, [r6, #-1]
 800413a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800413e:	1b92      	subs	r2, r2, r6
 8004140:	6122      	str	r2, [r4, #16]
 8004142:	464b      	mov	r3, r9
 8004144:	4621      	mov	r1, r4
 8004146:	4640      	mov	r0, r8
 8004148:	f8cd a000 	str.w	sl, [sp]
 800414c:	aa03      	add	r2, sp, #12
 800414e:	f7ff fedf 	bl	8003f10 <_printf_common>
 8004152:	3001      	adds	r0, #1
 8004154:	d14c      	bne.n	80041f0 <_printf_i+0x200>
 8004156:	f04f 30ff 	mov.w	r0, #4294967295
 800415a:	b004      	add	sp, #16
 800415c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004160:	4834      	ldr	r0, [pc, #208]	; (8004234 <_printf_i+0x244>)
 8004162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004166:	680e      	ldr	r6, [r1, #0]
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	f856 5b04 	ldr.w	r5, [r6], #4
 800416e:	061f      	lsls	r7, r3, #24
 8004170:	600e      	str	r6, [r1, #0]
 8004172:	d514      	bpl.n	800419e <_printf_i+0x1ae>
 8004174:	07d9      	lsls	r1, r3, #31
 8004176:	bf44      	itt	mi
 8004178:	f043 0320 	orrmi.w	r3, r3, #32
 800417c:	6023      	strmi	r3, [r4, #0]
 800417e:	b91d      	cbnz	r5, 8004188 <_printf_i+0x198>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f023 0320 	bic.w	r3, r3, #32
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	2310      	movs	r3, #16
 800418a:	e7af      	b.n	80040ec <_printf_i+0xfc>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	f043 0320 	orr.w	r3, r3, #32
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	2378      	movs	r3, #120	; 0x78
 8004196:	4828      	ldr	r0, [pc, #160]	; (8004238 <_printf_i+0x248>)
 8004198:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800419c:	e7e3      	b.n	8004166 <_printf_i+0x176>
 800419e:	065e      	lsls	r6, r3, #25
 80041a0:	bf48      	it	mi
 80041a2:	b2ad      	uxthmi	r5, r5
 80041a4:	e7e6      	b.n	8004174 <_printf_i+0x184>
 80041a6:	4616      	mov	r6, r2
 80041a8:	e7bb      	b.n	8004122 <_printf_i+0x132>
 80041aa:	680b      	ldr	r3, [r1, #0]
 80041ac:	6826      	ldr	r6, [r4, #0]
 80041ae:	1d1d      	adds	r5, r3, #4
 80041b0:	6960      	ldr	r0, [r4, #20]
 80041b2:	600d      	str	r5, [r1, #0]
 80041b4:	0635      	lsls	r5, r6, #24
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	d501      	bpl.n	80041be <_printf_i+0x1ce>
 80041ba:	6018      	str	r0, [r3, #0]
 80041bc:	e002      	b.n	80041c4 <_printf_i+0x1d4>
 80041be:	0671      	lsls	r1, r6, #25
 80041c0:	d5fb      	bpl.n	80041ba <_printf_i+0x1ca>
 80041c2:	8018      	strh	r0, [r3, #0]
 80041c4:	2300      	movs	r3, #0
 80041c6:	4616      	mov	r6, r2
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	e7ba      	b.n	8004142 <_printf_i+0x152>
 80041cc:	680b      	ldr	r3, [r1, #0]
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	600a      	str	r2, [r1, #0]
 80041d2:	681e      	ldr	r6, [r3, #0]
 80041d4:	2100      	movs	r1, #0
 80041d6:	4630      	mov	r0, r6
 80041d8:	6862      	ldr	r2, [r4, #4]
 80041da:	f000 f82f 	bl	800423c <memchr>
 80041de:	b108      	cbz	r0, 80041e4 <_printf_i+0x1f4>
 80041e0:	1b80      	subs	r0, r0, r6
 80041e2:	6060      	str	r0, [r4, #4]
 80041e4:	6863      	ldr	r3, [r4, #4]
 80041e6:	6123      	str	r3, [r4, #16]
 80041e8:	2300      	movs	r3, #0
 80041ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ee:	e7a8      	b.n	8004142 <_printf_i+0x152>
 80041f0:	4632      	mov	r2, r6
 80041f2:	4649      	mov	r1, r9
 80041f4:	4640      	mov	r0, r8
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	47d0      	blx	sl
 80041fa:	3001      	adds	r0, #1
 80041fc:	d0ab      	beq.n	8004156 <_printf_i+0x166>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	079b      	lsls	r3, r3, #30
 8004202:	d413      	bmi.n	800422c <_printf_i+0x23c>
 8004204:	68e0      	ldr	r0, [r4, #12]
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	4298      	cmp	r0, r3
 800420a:	bfb8      	it	lt
 800420c:	4618      	movlt	r0, r3
 800420e:	e7a4      	b.n	800415a <_printf_i+0x16a>
 8004210:	2301      	movs	r3, #1
 8004212:	4632      	mov	r2, r6
 8004214:	4649      	mov	r1, r9
 8004216:	4640      	mov	r0, r8
 8004218:	47d0      	blx	sl
 800421a:	3001      	adds	r0, #1
 800421c:	d09b      	beq.n	8004156 <_printf_i+0x166>
 800421e:	3501      	adds	r5, #1
 8004220:	68e3      	ldr	r3, [r4, #12]
 8004222:	9903      	ldr	r1, [sp, #12]
 8004224:	1a5b      	subs	r3, r3, r1
 8004226:	42ab      	cmp	r3, r5
 8004228:	dcf2      	bgt.n	8004210 <_printf_i+0x220>
 800422a:	e7eb      	b.n	8004204 <_printf_i+0x214>
 800422c:	2500      	movs	r5, #0
 800422e:	f104 0619 	add.w	r6, r4, #25
 8004232:	e7f5      	b.n	8004220 <_printf_i+0x230>
 8004234:	080044e9 	.word	0x080044e9
 8004238:	080044fa 	.word	0x080044fa

0800423c <memchr>:
 800423c:	4603      	mov	r3, r0
 800423e:	b510      	push	{r4, lr}
 8004240:	b2c9      	uxtb	r1, r1
 8004242:	4402      	add	r2, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	4618      	mov	r0, r3
 8004248:	d101      	bne.n	800424e <memchr+0x12>
 800424a:	2000      	movs	r0, #0
 800424c:	e003      	b.n	8004256 <memchr+0x1a>
 800424e:	7804      	ldrb	r4, [r0, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	428c      	cmp	r4, r1
 8004254:	d1f6      	bne.n	8004244 <memchr+0x8>
 8004256:	bd10      	pop	{r4, pc}

08004258 <memcpy>:
 8004258:	440a      	add	r2, r1
 800425a:	4291      	cmp	r1, r2
 800425c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004260:	d100      	bne.n	8004264 <memcpy+0xc>
 8004262:	4770      	bx	lr
 8004264:	b510      	push	{r4, lr}
 8004266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800426a:	4291      	cmp	r1, r2
 800426c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004270:	d1f9      	bne.n	8004266 <memcpy+0xe>
 8004272:	bd10      	pop	{r4, pc}

08004274 <memmove>:
 8004274:	4288      	cmp	r0, r1
 8004276:	b510      	push	{r4, lr}
 8004278:	eb01 0402 	add.w	r4, r1, r2
 800427c:	d902      	bls.n	8004284 <memmove+0x10>
 800427e:	4284      	cmp	r4, r0
 8004280:	4623      	mov	r3, r4
 8004282:	d807      	bhi.n	8004294 <memmove+0x20>
 8004284:	1e43      	subs	r3, r0, #1
 8004286:	42a1      	cmp	r1, r4
 8004288:	d008      	beq.n	800429c <memmove+0x28>
 800428a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800428e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004292:	e7f8      	b.n	8004286 <memmove+0x12>
 8004294:	4601      	mov	r1, r0
 8004296:	4402      	add	r2, r0
 8004298:	428a      	cmp	r2, r1
 800429a:	d100      	bne.n	800429e <memmove+0x2a>
 800429c:	bd10      	pop	{r4, pc}
 800429e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042a6:	e7f7      	b.n	8004298 <memmove+0x24>

080042a8 <_free_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4605      	mov	r5, r0
 80042ac:	2900      	cmp	r1, #0
 80042ae:	d043      	beq.n	8004338 <_free_r+0x90>
 80042b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b4:	1f0c      	subs	r4, r1, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bfb8      	it	lt
 80042ba:	18e4      	addlt	r4, r4, r3
 80042bc:	f000 f8d0 	bl	8004460 <__malloc_lock>
 80042c0:	4a1e      	ldr	r2, [pc, #120]	; (800433c <_free_r+0x94>)
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	4610      	mov	r0, r2
 80042c6:	b933      	cbnz	r3, 80042d6 <_free_r+0x2e>
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	6014      	str	r4, [r2, #0]
 80042cc:	4628      	mov	r0, r5
 80042ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042d2:	f000 b8cb 	b.w	800446c <__malloc_unlock>
 80042d6:	42a3      	cmp	r3, r4
 80042d8:	d90a      	bls.n	80042f0 <_free_r+0x48>
 80042da:	6821      	ldr	r1, [r4, #0]
 80042dc:	1862      	adds	r2, r4, r1
 80042de:	4293      	cmp	r3, r2
 80042e0:	bf01      	itttt	eq
 80042e2:	681a      	ldreq	r2, [r3, #0]
 80042e4:	685b      	ldreq	r3, [r3, #4]
 80042e6:	1852      	addeq	r2, r2, r1
 80042e8:	6022      	streq	r2, [r4, #0]
 80042ea:	6063      	str	r3, [r4, #4]
 80042ec:	6004      	str	r4, [r0, #0]
 80042ee:	e7ed      	b.n	80042cc <_free_r+0x24>
 80042f0:	461a      	mov	r2, r3
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b10b      	cbz	r3, 80042fa <_free_r+0x52>
 80042f6:	42a3      	cmp	r3, r4
 80042f8:	d9fa      	bls.n	80042f0 <_free_r+0x48>
 80042fa:	6811      	ldr	r1, [r2, #0]
 80042fc:	1850      	adds	r0, r2, r1
 80042fe:	42a0      	cmp	r0, r4
 8004300:	d10b      	bne.n	800431a <_free_r+0x72>
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	4401      	add	r1, r0
 8004306:	1850      	adds	r0, r2, r1
 8004308:	4283      	cmp	r3, r0
 800430a:	6011      	str	r1, [r2, #0]
 800430c:	d1de      	bne.n	80042cc <_free_r+0x24>
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4401      	add	r1, r0
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	6053      	str	r3, [r2, #4]
 8004318:	e7d8      	b.n	80042cc <_free_r+0x24>
 800431a:	d902      	bls.n	8004322 <_free_r+0x7a>
 800431c:	230c      	movs	r3, #12
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	e7d4      	b.n	80042cc <_free_r+0x24>
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	1821      	adds	r1, r4, r0
 8004326:	428b      	cmp	r3, r1
 8004328:	bf01      	itttt	eq
 800432a:	6819      	ldreq	r1, [r3, #0]
 800432c:	685b      	ldreq	r3, [r3, #4]
 800432e:	1809      	addeq	r1, r1, r0
 8004330:	6021      	streq	r1, [r4, #0]
 8004332:	6063      	str	r3, [r4, #4]
 8004334:	6054      	str	r4, [r2, #4]
 8004336:	e7c9      	b.n	80042cc <_free_r+0x24>
 8004338:	bd38      	pop	{r3, r4, r5, pc}
 800433a:	bf00      	nop
 800433c:	20000148 	.word	0x20000148

08004340 <_malloc_r>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	1ccd      	adds	r5, r1, #3
 8004344:	f025 0503 	bic.w	r5, r5, #3
 8004348:	3508      	adds	r5, #8
 800434a:	2d0c      	cmp	r5, #12
 800434c:	bf38      	it	cc
 800434e:	250c      	movcc	r5, #12
 8004350:	2d00      	cmp	r5, #0
 8004352:	4606      	mov	r6, r0
 8004354:	db01      	blt.n	800435a <_malloc_r+0x1a>
 8004356:	42a9      	cmp	r1, r5
 8004358:	d903      	bls.n	8004362 <_malloc_r+0x22>
 800435a:	230c      	movs	r3, #12
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	2000      	movs	r0, #0
 8004360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004362:	f000 f87d 	bl	8004460 <__malloc_lock>
 8004366:	4921      	ldr	r1, [pc, #132]	; (80043ec <_malloc_r+0xac>)
 8004368:	680a      	ldr	r2, [r1, #0]
 800436a:	4614      	mov	r4, r2
 800436c:	b99c      	cbnz	r4, 8004396 <_malloc_r+0x56>
 800436e:	4f20      	ldr	r7, [pc, #128]	; (80043f0 <_malloc_r+0xb0>)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	b923      	cbnz	r3, 800437e <_malloc_r+0x3e>
 8004374:	4621      	mov	r1, r4
 8004376:	4630      	mov	r0, r6
 8004378:	f000 f862 	bl	8004440 <_sbrk_r>
 800437c:	6038      	str	r0, [r7, #0]
 800437e:	4629      	mov	r1, r5
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f85d 	bl	8004440 <_sbrk_r>
 8004386:	1c43      	adds	r3, r0, #1
 8004388:	d123      	bne.n	80043d2 <_malloc_r+0x92>
 800438a:	230c      	movs	r3, #12
 800438c:	4630      	mov	r0, r6
 800438e:	6033      	str	r3, [r6, #0]
 8004390:	f000 f86c 	bl	800446c <__malloc_unlock>
 8004394:	e7e3      	b.n	800435e <_malloc_r+0x1e>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	1b5b      	subs	r3, r3, r5
 800439a:	d417      	bmi.n	80043cc <_malloc_r+0x8c>
 800439c:	2b0b      	cmp	r3, #11
 800439e:	d903      	bls.n	80043a8 <_malloc_r+0x68>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	441c      	add	r4, r3
 80043a4:	6025      	str	r5, [r4, #0]
 80043a6:	e004      	b.n	80043b2 <_malloc_r+0x72>
 80043a8:	6863      	ldr	r3, [r4, #4]
 80043aa:	42a2      	cmp	r2, r4
 80043ac:	bf0c      	ite	eq
 80043ae:	600b      	streq	r3, [r1, #0]
 80043b0:	6053      	strne	r3, [r2, #4]
 80043b2:	4630      	mov	r0, r6
 80043b4:	f000 f85a 	bl	800446c <__malloc_unlock>
 80043b8:	f104 000b 	add.w	r0, r4, #11
 80043bc:	1d23      	adds	r3, r4, #4
 80043be:	f020 0007 	bic.w	r0, r0, #7
 80043c2:	1ac2      	subs	r2, r0, r3
 80043c4:	d0cc      	beq.n	8004360 <_malloc_r+0x20>
 80043c6:	1a1b      	subs	r3, r3, r0
 80043c8:	50a3      	str	r3, [r4, r2]
 80043ca:	e7c9      	b.n	8004360 <_malloc_r+0x20>
 80043cc:	4622      	mov	r2, r4
 80043ce:	6864      	ldr	r4, [r4, #4]
 80043d0:	e7cc      	b.n	800436c <_malloc_r+0x2c>
 80043d2:	1cc4      	adds	r4, r0, #3
 80043d4:	f024 0403 	bic.w	r4, r4, #3
 80043d8:	42a0      	cmp	r0, r4
 80043da:	d0e3      	beq.n	80043a4 <_malloc_r+0x64>
 80043dc:	1a21      	subs	r1, r4, r0
 80043de:	4630      	mov	r0, r6
 80043e0:	f000 f82e 	bl	8004440 <_sbrk_r>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d1dd      	bne.n	80043a4 <_malloc_r+0x64>
 80043e8:	e7cf      	b.n	800438a <_malloc_r+0x4a>
 80043ea:	bf00      	nop
 80043ec:	20000148 	.word	0x20000148
 80043f0:	2000014c 	.word	0x2000014c

080043f4 <_realloc_r>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	4607      	mov	r7, r0
 80043f8:	4614      	mov	r4, r2
 80043fa:	460e      	mov	r6, r1
 80043fc:	b921      	cbnz	r1, 8004408 <_realloc_r+0x14>
 80043fe:	4611      	mov	r1, r2
 8004400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004404:	f7ff bf9c 	b.w	8004340 <_malloc_r>
 8004408:	b922      	cbnz	r2, 8004414 <_realloc_r+0x20>
 800440a:	f7ff ff4d 	bl	80042a8 <_free_r>
 800440e:	4625      	mov	r5, r4
 8004410:	4628      	mov	r0, r5
 8004412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004414:	f000 f830 	bl	8004478 <_malloc_usable_size_r>
 8004418:	42a0      	cmp	r0, r4
 800441a:	d20f      	bcs.n	800443c <_realloc_r+0x48>
 800441c:	4621      	mov	r1, r4
 800441e:	4638      	mov	r0, r7
 8004420:	f7ff ff8e 	bl	8004340 <_malloc_r>
 8004424:	4605      	mov	r5, r0
 8004426:	2800      	cmp	r0, #0
 8004428:	d0f2      	beq.n	8004410 <_realloc_r+0x1c>
 800442a:	4631      	mov	r1, r6
 800442c:	4622      	mov	r2, r4
 800442e:	f7ff ff13 	bl	8004258 <memcpy>
 8004432:	4631      	mov	r1, r6
 8004434:	4638      	mov	r0, r7
 8004436:	f7ff ff37 	bl	80042a8 <_free_r>
 800443a:	e7e9      	b.n	8004410 <_realloc_r+0x1c>
 800443c:	4635      	mov	r5, r6
 800443e:	e7e7      	b.n	8004410 <_realloc_r+0x1c>

08004440 <_sbrk_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	2300      	movs	r3, #0
 8004444:	4d05      	ldr	r5, [pc, #20]	; (800445c <_sbrk_r+0x1c>)
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	f7fc fff0 	bl	8001430 <_sbrk>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_sbrk_r+0x1a>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	b103      	cbz	r3, 800445a <_sbrk_r+0x1a>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	20000548 	.word	0x20000548

08004460 <__malloc_lock>:
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <__malloc_lock+0x8>)
 8004462:	f000 b811 	b.w	8004488 <__retarget_lock_acquire_recursive>
 8004466:	bf00      	nop
 8004468:	20000550 	.word	0x20000550

0800446c <__malloc_unlock>:
 800446c:	4801      	ldr	r0, [pc, #4]	; (8004474 <__malloc_unlock+0x8>)
 800446e:	f000 b80c 	b.w	800448a <__retarget_lock_release_recursive>
 8004472:	bf00      	nop
 8004474:	20000550 	.word	0x20000550

08004478 <_malloc_usable_size_r>:
 8004478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800447c:	1f18      	subs	r0, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfbc      	itt	lt
 8004482:	580b      	ldrlt	r3, [r1, r0]
 8004484:	18c0      	addlt	r0, r0, r3
 8004486:	4770      	bx	lr

08004488 <__retarget_lock_acquire_recursive>:
 8004488:	4770      	bx	lr

0800448a <__retarget_lock_release_recursive>:
 800448a:	4770      	bx	lr

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
