
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800575c  0800575c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800575c  0800575c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000098  080057fc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080057fc  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e43  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030aa  00000000  00000000  00037f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0003afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0003bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8c  00000000  00000000  0003cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001275c  00000000  00000000  0005684c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3ba  00000000  00000000  00068fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd4  00000000  00000000  000f43b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080056dc 	.word	0x080056dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080056dc 	.word	0x080056dc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <isButtonPressed+0x30>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <isButtonPressed+0x30>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2100      	movs	r1, #0
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <isButtonPressed+0x24>
	}
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000104 	.word	0x20000104

0800096c <button_process>:

void button_process(int index){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db07      	blt.n	800098a <button_process+0x1e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b03      	cmp	r3, #3
 800097e:	dc04      	bgt.n	800098a <button_process+0x1e>
		button_flag[index] = 1;
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <button_process+0x28>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000104 	.word	0x20000104

08000998 <button_reading>:

void button_reading(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e0e5      	b.n	8000b70 <button_reading+0x1d8>
        //debouncing button
		debounce_buffer3[i] = debounce_buffer2[i];
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4976      	ldr	r1, [pc, #472]	; (8000b84 <button_reading+0x1ec>)
 80009aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ae:	4976      	ldr	r1, [pc, #472]	; (8000b88 <button_reading+0x1f0>)
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4974      	ldr	r1, [pc, #464]	; (8000b8c <button_reading+0x1f4>)
 80009ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009be:	4971      	ldr	r1, [pc, #452]	; (8000b84 <button_reading+0x1ec>)
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// readpin
		//...

		if(i == 0) debounce_buffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10b      	bne.n	80009e2 <button_reading+0x4a>
 80009ca:	2101      	movs	r1, #1
 80009cc:	4870      	ldr	r0, [pc, #448]	; (8000b90 <button_reading+0x1f8>)
 80009ce:	f002 fa19 	bl	8002e04 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4611      	mov	r1, r2
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <button_reading+0x1f4>)
 80009dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009e0:	e02b      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 1) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <button_reading+0x68>
 80009e8:	2102      	movs	r1, #2
 80009ea:	4869      	ldr	r0, [pc, #420]	; (8000b90 <button_reading+0x1f8>)
 80009ec:	f002 fa0a 	bl	8002e04 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a64      	ldr	r2, [pc, #400]	; (8000b8c <button_reading+0x1f4>)
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fe:	e01c      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 2) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d10b      	bne.n	8000a1e <button_reading+0x86>
 8000a06:	2110      	movs	r1, #16
 8000a08:	4861      	ldr	r0, [pc, #388]	; (8000b90 <button_reading+0x1f8>)
 8000a0a:	f002 f9fb 	bl	8002e04 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <button_reading+0x1f4>)
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1c:	e00d      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 3) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d10a      	bne.n	8000a3a <button_reading+0xa2>
 8000a24:	2101      	movs	r1, #1
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <button_reading+0x1fc>)
 8000a28:	f002 f9ec 	bl	8002e04 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <button_reading+0x1f4>)
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


        //process after debouncing
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <button_reading+0x1f0>)
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	494f      	ldr	r1, [pc, #316]	; (8000b84 <button_reading+0x1ec>)
 8000a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f040 8084 	bne.w	8000b58 <button_reading+0x1c0>
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <button_reading+0x1ec>)
 8000a54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	494c      	ldr	r1, [pc, #304]	; (8000b8c <button_reading+0x1f4>)
 8000a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d179      	bne.n	8000b58 <button_reading+0x1c0>
			button_buffer[i] = debounce_buffer3[i];
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4947      	ldr	r1, [pc, #284]	; (8000b88 <button_reading+0x1f0>)
 8000a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a6e:	494a      	ldr	r1, [pc, #296]	; (8000b98 <button_reading+0x200>)
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// fsm for processing button
			switch(button_state[i]){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <button_reading+0x204>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	2b0d      	cmp	r3, #13
 8000a7e:	d043      	beq.n	8000b08 <button_reading+0x170>
 8000a80:	2b0d      	cmp	r3, #13
 8000a82:	dc6b      	bgt.n	8000b5c <button_reading+0x1c4>
 8000a84:	2b0b      	cmp	r3, #11
 8000a86:	d002      	beq.n	8000a8e <button_reading+0xf6>
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d02d      	beq.n	8000ae8 <button_reading+0x150>
					button_state[i] = BUTTON_IS_RELEASED;
					counter_for_button_pressed[i] = 0;
				}
				break;
			default:
				break;
 8000a8c:	e066      	b.n	8000b5c <button_reading+0x1c4>
				counter_for_button_pressed[i]++;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a43      	ldr	r2, [pc, #268]	; (8000ba0 <button_reading+0x208>)
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	3201      	adds	r2, #1
 8000a98:	4941      	ldr	r1, [pc, #260]	; (8000ba0 <button_reading+0x208>)
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == WAITING_TIME/TIMER_CYCLE){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <button_reading+0x208>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d10d      	bne.n	8000ac6 <button_reading+0x12e>
					button_state[i] = BUTTON_IS_LONG_PRESSED;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <button_reading+0x204>)
 8000aae:	210d      	movs	r1, #13
 8000ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <button_reading+0x208>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff53 	bl	800096c <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <button_reading+0x200>)
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d146      	bne.n	8000b60 <button_reading+0x1c8>
					button_state[i] = BUTTON_IS_RELEASED;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <button_reading+0x204>)
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <button_reading+0x208>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ae6:	e03b      	b.n	8000b60 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <button_reading+0x200>)
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d137      	bne.n	8000b64 <button_reading+0x1cc>
					button_state[i] = BUTTON_IS_PRESSED;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <button_reading+0x204>)
 8000af8:	210b      	movs	r1, #11
 8000afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff33 	bl	800096c <button_process>
				break;
 8000b06:	e02d      	b.n	8000b64 <button_reading+0x1cc>
				counter_for_button_pressed[i]++;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <button_reading+0x208>)
 8000b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b10:	3201      	adds	r2, #1
 8000b12:	4923      	ldr	r1, [pc, #140]	; (8000ba0 <button_reading+0x208>)
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <button_reading+0x208>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2b14      	cmp	r3, #20
 8000b22:	d108      	bne.n	8000b36 <button_reading+0x19e>
					button_process(i);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff20 	bl	800096c <button_process>
					counter_for_button_pressed[i] = 0;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <button_reading+0x208>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <button_reading+0x200>)
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d112      	bne.n	8000b68 <button_reading+0x1d0>
					button_state[i] = BUTTON_IS_RELEASED;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <button_reading+0x204>)
 8000b46:	210c      	movs	r1, #12
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <button_reading+0x208>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000b56:	e007      	b.n	8000b68 <button_reading+0x1d0>
			}
		}
 8000b58:	bf00      	nop
 8000b5a:	e006      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b5c:	bf00      	nop
 8000b5e:	e004      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b60:	bf00      	nop
 8000b62:	e002      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b68:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f67f af16 	bls.w	80009a4 <button_reading+0xc>
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000d4 	.word	0x200000d4
 8000b88:	200000e4 	.word	0x200000e4
 8000b8c:	200000c4 	.word	0x200000c4
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	200000b4 	.word	0x200000b4
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200000f4 	.word	0x200000f4

08000ba4 <fsm_auto_run>:
 *      Author: phamv
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	switch (status)
 8000ba8:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <fsm_auto_run+0x234>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	f200 810f 	bhi.w	8000dd2 <fsm_auto_run+0x22e>
 8000bb4:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <fsm_auto_run+0x18>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000bf5 	.word	0x08000bf5
 8000bc4:	08000c65 	.word	0x08000c65
 8000bc8:	08000cdd 	.word	0x08000cdd
 8000bcc:	08000d4f 	.word	0x08000d4f
	{
	case INIT:
		status=AUTO_RED_GREEN;
 8000bd0:	4b81      	ldr	r3, [pc, #516]	; (8000dd8 <fsm_auto_run+0x234>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f001 fab9 	bl	8002150 <setTimer1>
		counter = max_red1;
 8000bde:	4b7f      	ldr	r3, [pc, #508]	; (8000ddc <fsm_auto_run+0x238>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a7f      	ldr	r2, [pc, #508]	; (8000de0 <fsm_auto_run+0x23c>)
 8000be4:	6013      	str	r3, [r2, #0]
		displayCounter();
 8000be6:	f001 fd15 	bl	8002614 <displayCounter>
		setTraffic1Red();
 8000bea:	f001 fb51 	bl	8002290 <setTraffic1Red>
		setTraffic2Green();
 8000bee:	f001 fb9b 	bl	8002328 <setTraffic2Green>
		break;
 8000bf2:	e0ee      	b.n	8000dd2 <fsm_auto_run+0x22e>
	case AUTO_RED_GREEN:
		if(timer1_flag == 1){
 8000bf4:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <fsm_auto_run+0x240>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d115      	bne.n	8000c28 <fsm_auto_run+0x84>
			counter--;
 8000bfc:	4b78      	ldr	r3, [pc, #480]	; (8000de0 <fsm_auto_run+0x23c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	4a77      	ldr	r2, [pc, #476]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c04:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 faa1 	bl	8002150 <setTimer1>
			if(counter == max_yellow2){
 8000c0e:	4b74      	ldr	r3, [pc, #464]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b75      	ldr	r3, [pc, #468]	; (8000de8 <fsm_auto_run+0x244>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d104      	bne.n	8000c24 <fsm_auto_run+0x80>
				setTraffic2Yellow();
 8000c1a:	f001 fba9 	bl	8002370 <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 8000c1e:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c24:	f001 fcf6 	bl	8002614 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fe85 	bl	8000938 <isButtonPressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80c7 	beq.w	8000dc4 <fsm_auto_run+0x220>
			isButtonPressed(2);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fe7e 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fe7b 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000c42:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c44:	220b      	movs	r2, #11
 8000c46:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000c48:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000c4c:	f001 fa80 	bl	8002150 <setTimer1>
			setTraffic1Red();
 8000c50:	f001 fb1e 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 8000c54:	f001 fb68 	bl	8002328 <setTraffic2Green>
			counter = 99;
 8000c58:	4b61      	ldr	r3, [pc, #388]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000c5e:	f001 fcd9 	bl	8002614 <displayCounter>
			break;
 8000c62:	e0b6      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
	case AUTO_RED_YELLOW:
		if(timer1_flag == 1){
 8000c64:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <fsm_auto_run+0x240>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d119      	bne.n	8000ca0 <fsm_auto_run+0xfc>
			counter--;
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a5b      	ldr	r2, [pc, #364]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c74:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f001 fa69 	bl	8002150 <setTimer1>
			if(counter == 0){
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10a      	bne.n	8000c9c <fsm_auto_run+0xf8>
				counter = max_green1;
 8000c86:	4b59      	ldr	r3, [pc, #356]	; (8000dec <fsm_auto_run+0x248>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a55      	ldr	r2, [pc, #340]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c8c:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 8000c8e:	f001 fb23 	bl	80022d8 <setTraffic1Green>
				setTraffic2Red();
 8000c92:	f001 fb11 	bl	80022b8 <setTraffic2Red>
				status=AUTO_GREEN_RED;
 8000c96:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c9c:	f001 fcba 	bl	8002614 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fe49 	bl	8000938 <isButtonPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 808d 	beq.w	8000dc8 <fsm_auto_run+0x224>
			isButtonPressed(2);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fe42 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f7ff fe3f 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <fsm_auto_run+0x234>)
 8000cbc:	220b      	movs	r2, #11
 8000cbe:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000cc0:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000cc4:	f001 fa44 	bl	8002150 <setTimer1>
			setTraffic1Red();
 8000cc8:	f001 fae2 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 8000ccc:	f001 fb2c 	bl	8002328 <setTraffic2Green>
			counter = 99;
 8000cd0:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cd2:	2263      	movs	r2, #99	; 0x63
 8000cd4:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000cd6:	f001 fc9d 	bl	8002614 <displayCounter>
			break;
 8000cda:	e07a      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_GREEN_RED:
		if(timer1_flag == 1){
 8000cdc:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <fsm_auto_run+0x240>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d117      	bne.n	8000d14 <fsm_auto_run+0x170>
			counter--;
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <fsm_auto_run+0x23c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cec:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f001 fa2d 	bl	8002150 <setTimer1>
			if(counter == 0){
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d108      	bne.n	8000d10 <fsm_auto_run+0x16c>
				counter = max_yellow1;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <fsm_auto_run+0x24c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d04:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 8000d06:	f001 fb1f 	bl	8002348 <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d10:	f001 fc80 	bl	8002614 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fe0f 	bl	8000938 <isButtonPressed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d055      	beq.n	8000dcc <fsm_auto_run+0x228>
			isButtonPressed(2);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fe09 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f7ff fe06 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d2e:	220b      	movs	r2, #11
 8000d30:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000d32:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000d36:	f001 fa0b 	bl	8002150 <setTimer1>
			setTraffic1Red();
 8000d3a:	f001 faa9 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 8000d3e:	f001 faf3 	bl	8002328 <setTraffic2Green>
			counter = 99;
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d44:	2263      	movs	r2, #99	; 0x63
 8000d46:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000d48:	f001 fc64 	bl	8002614 <displayCounter>
			break;
 8000d4c:	e041      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_YELLOW_RED:

		if(timer1_flag == 1){
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <fsm_auto_run+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d119      	bne.n	8000d8a <fsm_auto_run+0x1e6>
			counter--;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d5e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f001 f9f4 	bl	8002150 <setTimer1>
			if(counter == 0){
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10a      	bne.n	8000d86 <fsm_auto_run+0x1e2>
				counter = max_red1;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <fsm_auto_run+0x238>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d76:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 8000d78:	f001 fa8a 	bl	8002290 <setTraffic1Red>
				setTraffic2Green();
 8000d7c:	f001 fad4 	bl	8002328 <setTraffic2Green>
				status=AUTO_RED_GREEN;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d86:	f001 fc45 	bl	8002614 <displayCounter>
		}

		if(isButtonPressed(1)==1){
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fdd4 	bl	8000938 <isButtonPressed>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11c      	bne.n	8000dd0 <fsm_auto_run+0x22c>
			isButtonPressed(2);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fdce 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fdcb 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <fsm_auto_run+0x234>)
 8000da4:	220b      	movs	r2, #11
 8000da6:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000da8:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000dac:	f001 f9d0 	bl	8002150 <setTimer1>
			setTraffic1Red();
 8000db0:	f001 fa6e 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 8000db4:	f001 fab8 	bl	8002328 <setTraffic2Green>
			counter = 99;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <fsm_auto_run+0x23c>)
 8000dba:	2263      	movs	r2, #99	; 0x63
 8000dbc:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000dbe:	f001 fc29 	bl	8002614 <displayCounter>
			break;
 8000dc2:	e006      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc4:	bf00      	nop
 8000dc6:	e004      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc8:	bf00      	nop
 8000dca:	e002      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
 8000dd0:	bf00      	nop
	}

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000118 	.word	0x20000118
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	20000120 	.word	0x20000120
 8000de4:	20000134 	.word	0x20000134
 8000de8:	20000024 	.word	0x20000024
 8000dec:	20000014 	.word	0x20000014
 8000df0:	20000018 	.word	0x20000018

08000df4 <fsm_manual_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	switch (status) {
 8000df8:	4ba6      	ldr	r3, [pc, #664]	; (8001094 <fsm_manual_run+0x2a0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b0b      	subs	r3, #11
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f200 813d 	bhi.w	800107e <fsm_manual_run+0x28a>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <fsm_manual_run+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000ea9 	.word	0x08000ea9
 8000e14:	08000f67 	.word	0x08000f67
 8000e18:	08000ff5 	.word	0x08000ff5
		case MAN_RED_GREEN:
			isButtonPressed(3);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff fd8b 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000e22:	4b9d      	ldr	r3, [pc, #628]	; (8001098 <fsm_manual_run+0x2a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d010      	beq.n	8000e4c <fsm_manual_run+0x58>
				status = AUTO_RED_YELLOW;
 8000e2a:	4b9a      	ldr	r3, [pc, #616]	; (8001094 <fsm_manual_run+0x2a0>)
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f001 f98c 	bl	8002150 <setTimer1>
				counter = max_yellow2;
 8000e38:	4b98      	ldr	r3, [pc, #608]	; (800109c <fsm_manual_run+0x2a8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a98      	ldr	r2, [pc, #608]	; (80010a0 <fsm_manual_run+0x2ac>)
 8000e3e:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e40:	f001 fbe8 	bl	8002614 <displayCounter>
				setTraffic1Red();
 8000e44:	f001 fa24 	bl	8002290 <setTraffic1Red>
				setTraffic2Yellow();
 8000e48:	f001 fa92 	bl	8002370 <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fd73 	bl	8000938 <isButtonPressed>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d014      	beq.n	8000e82 <fsm_manual_run+0x8e>
				isButtonPressed(2);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fd6d 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000e5e:	4b8d      	ldr	r3, [pc, #564]	; (8001094 <fsm_manual_run+0x2a0>)
 8000e60:	2215      	movs	r2, #21
 8000e62:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f001 f972 	bl	8002150 <setTimer1>
				counter = max_red1;
 8000e6c:	4b8d      	ldr	r3, [pc, #564]	; (80010a4 <fsm_manual_run+0x2b0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a8b      	ldr	r2, [pc, #556]	; (80010a0 <fsm_manual_run+0x2ac>)
 8000e72:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e74:	f001 fbce 	bl	8002614 <displayCounter>
				clearTraffic1();
 8000e78:	f001 fa42 	bl	8002300 <clearTraffic1>
				clearTraffic2();
 8000e7c:	f001 fa88 	bl	8002390 <clearTraffic2>
				break;
 8000e80:	e106      	b.n	8001090 <fsm_manual_run+0x29c>
			}

			if (isButtonPressed(2)) {
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff fd58 	bl	8000938 <isButtonPressed>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80f9 	beq.w	8001082 <fsm_manual_run+0x28e>
				status = MAN_RED_YELLOW;
 8000e90:	4b80      	ldr	r3, [pc, #512]	; (8001094 <fsm_manual_run+0x2a0>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000e96:	f001 f9fb 	bl	8002290 <setTraffic1Red>
				setTraffic2Yellow();
 8000e9a:	f001 fa69 	bl	8002370 <setTraffic2Yellow>
				setTimer1(60000);
 8000e9e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000ea2:	f001 f955 	bl	8002150 <setTimer1>
			}
			break;
 8000ea6:	e0ec      	b.n	8001082 <fsm_manual_run+0x28e>

		case MAN_RED_YELLOW:
			if(isButtonPressed(3)){
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff fd45 	bl	8000938 <isButtonPressed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d007      	beq.n	8000ec4 <fsm_manual_run+0xd0>
				if(pedestrianStatus == PED_GREEN){
 8000eb4:	4b7c      	ldr	r3, [pc, #496]	; (80010a8 <fsm_manual_run+0x2b4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d103      	bne.n	8000ec4 <fsm_manual_run+0xd0>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,63);
 8000ebc:	4b7b      	ldr	r3, [pc, #492]	; (80010ac <fsm_manual_run+0x2b8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	223f      	movs	r2, #63	; 0x3f
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
				}
			}
			if(timer1_flag) {
 8000ec4:	4b74      	ldr	r3, [pc, #464]	; (8001098 <fsm_manual_run+0x2a4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d014      	beq.n	8000ef6 <fsm_manual_run+0x102>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8000ecc:	4b77      	ldr	r3, [pc, #476]	; (80010ac <fsm_manual_run+0x2b8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
				status = AUTO_GREEN_RED;
 8000ed4:	4b6f      	ldr	r3, [pc, #444]	; (8001094 <fsm_manual_run+0x2a0>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000eda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ede:	f001 f937 	bl	8002150 <setTimer1>
				counter = max_green1;
 8000ee2:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <fsm_manual_run+0x2bc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <fsm_manual_run+0x2ac>)
 8000ee8:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000eea:	f001 fb93 	bl	8002614 <displayCounter>
				setTraffic1Green();
 8000eee:	f001 f9f3 	bl	80022d8 <setTraffic1Green>
				setTraffic2Red();
 8000ef2:	f001 f9e1 	bl	80022b8 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff fd1e 	bl	8000938 <isButtonPressed>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01a      	beq.n	8000f38 <fsm_manual_run+0x144>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8000f02:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <fsm_manual_run+0x2b8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2200      	movs	r2, #0
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
				isButtonPressed(2);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff fd14 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000f10:	4b60      	ldr	r3, [pc, #384]	; (8001094 <fsm_manual_run+0x2a0>)
 8000f12:	2215      	movs	r2, #21
 8000f14:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1a:	f001 f919 	bl	8002150 <setTimer1>
				counter = max_red1;
 8000f1e:	4b61      	ldr	r3, [pc, #388]	; (80010a4 <fsm_manual_run+0x2b0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5f      	ldr	r2, [pc, #380]	; (80010a0 <fsm_manual_run+0x2ac>)
 8000f24:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f26:	f001 fb75 	bl	8002614 <displayCounter>
				clearTraffic1();
 8000f2a:	f001 f9e9 	bl	8002300 <clearTraffic1>
				clearTraffic2();
 8000f2e:	f001 fa2f 	bl	8002390 <clearTraffic2>
				isButtonPressed(2);
 8000f32:	2002      	movs	r0, #2
 8000f34:	f7ff fd00 	bl	8000938 <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f7ff fcfd 	bl	8000938 <isButtonPressed>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a0 	beq.w	8001086 <fsm_manual_run+0x292>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8000f46:	4b59      	ldr	r3, [pc, #356]	; (80010ac <fsm_manual_run+0x2b8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
				status = MAN_GREEN_RED;
 8000f4e:	4b51      	ldr	r3, [pc, #324]	; (8001094 <fsm_manual_run+0x2a0>)
 8000f50:	220d      	movs	r2, #13
 8000f52:	601a      	str	r2, [r3, #0]
				setTraffic1Green();
 8000f54:	f001 f9c0 	bl	80022d8 <setTraffic1Green>
				setTraffic2Red();
 8000f58:	f001 f9ae 	bl	80022b8 <setTraffic2Red>
				setTimer1(60000);
 8000f5c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000f60:	f001 f8f6 	bl	8002150 <setTimer1>
			}
			break;
 8000f64:	e08f      	b.n	8001086 <fsm_manual_run+0x292>

		case MAN_GREEN_RED:
			isButtonPressed(3);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f7ff fce6 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000f6c:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <fsm_manual_run+0x2a4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d010      	beq.n	8000f96 <fsm_manual_run+0x1a2>
				status = AUTO_YELLOW_RED;
 8000f74:	4b47      	ldr	r3, [pc, #284]	; (8001094 <fsm_manual_run+0x2a0>)
 8000f76:	2205      	movs	r2, #5
 8000f78:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7e:	f001 f8e7 	bl	8002150 <setTimer1>
				counter = max_yellow1;
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <fsm_manual_run+0x2c0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <fsm_manual_run+0x2ac>)
 8000f88:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f8a:	f001 fb43 	bl	8002614 <displayCounter>
				setTraffic1Yellow();
 8000f8e:	f001 f9db 	bl	8002348 <setTraffic1Yellow>
				setTraffic2Red();
 8000f92:	f001 f991 	bl	80022b8 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fcce 	bl	8000938 <isButtonPressed>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d016      	beq.n	8000fd0 <fsm_manual_run+0x1dc>
				isButtonPressed(2);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f7ff fcc8 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <fsm_manual_run+0x2a0>)
 8000faa:	2215      	movs	r2, #21
 8000fac:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb2:	f001 f8cd 	bl	8002150 <setTimer1>
				counter = max_red1;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <fsm_manual_run+0x2b0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a39      	ldr	r2, [pc, #228]	; (80010a0 <fsm_manual_run+0x2ac>)
 8000fbc:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000fbe:	f001 fb29 	bl	8002614 <displayCounter>
				clearTraffic1();
 8000fc2:	f001 f99d 	bl	8002300 <clearTraffic1>
				clearTraffic2();
 8000fc6:	f001 f9e3 	bl	8002390 <clearTraffic2>
				isButtonPressed(2);
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f7ff fcb4 	bl	8000938 <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff fcb1 	bl	8000938 <isButtonPressed>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d056      	beq.n	800108a <fsm_manual_run+0x296>
				status = MAN_YELLOW_RED;
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <fsm_manual_run+0x2a0>)
 8000fde:	220e      	movs	r2, #14
 8000fe0:	601a      	str	r2, [r3, #0]
				setTraffic1Yellow();
 8000fe2:	f001 f9b1 	bl	8002348 <setTraffic1Yellow>
				setTraffic2Red();
 8000fe6:	f001 f967 	bl	80022b8 <setTraffic2Red>
				setTimer1(60000);
 8000fea:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000fee:	f001 f8af 	bl	8002150 <setTimer1>
			}

			break;
 8000ff2:	e04a      	b.n	800108a <fsm_manual_run+0x296>

		case MAN_YELLOW_RED:
			isButtonPressed(3);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f7ff fc9f 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <fsm_manual_run+0x2a4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d010      	beq.n	8001024 <fsm_manual_run+0x230>
				status = AUTO_RED_GREEN;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <fsm_manual_run+0x2a0>)
 8001004:	2202      	movs	r2, #2
 8001006:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100c:	f001 f8a0 	bl	8002150 <setTimer1>
				counter = max_red1;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <fsm_manual_run+0x2b0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <fsm_manual_run+0x2ac>)
 8001016:	6013      	str	r3, [r2, #0]
				displayCounter();
 8001018:	f001 fafc 	bl	8002614 <displayCounter>
				setTraffic1Red();
 800101c:	f001 f938 	bl	8002290 <setTraffic1Red>
				setTraffic2Green();
 8001020:	f001 f982 	bl	8002328 <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fc87 	bl	8000938 <isButtonPressed>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d014      	beq.n	800105a <fsm_manual_run+0x266>
				isButtonPressed(2);
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff fc81 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <fsm_manual_run+0x2a0>)
 8001038:	2215      	movs	r2, #21
 800103a:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001040:	f001 f886 	bl	8002150 <setTimer1>
				counter = max_red1;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <fsm_manual_run+0x2b0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <fsm_manual_run+0x2ac>)
 800104a:	6013      	str	r3, [r2, #0]
				displayCounter();
 800104c:	f001 fae2 	bl	8002614 <displayCounter>
				clearTraffic1();
 8001050:	f001 f956 	bl	8002300 <clearTraffic1>
				clearTraffic2();
 8001054:	f001 f99c 	bl	8002390 <clearTraffic2>
				break;
 8001058:	e01a      	b.n	8001090 <fsm_manual_run+0x29c>
			}

			if (isButtonPressed(2)) {
 800105a:	2002      	movs	r0, #2
 800105c:	f7ff fc6c 	bl	8000938 <isButtonPressed>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d013      	beq.n	800108e <fsm_manual_run+0x29a>
				status = MAN_RED_GREEN;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <fsm_manual_run+0x2a0>)
 8001068:	220b      	movs	r2, #11
 800106a:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 800106c:	f001 f910 	bl	8002290 <setTraffic1Red>
				setTraffic2Green();
 8001070:	f001 f95a 	bl	8002328 <setTraffic2Green>
				setTimer1(60000);
 8001074:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001078:	f001 f86a 	bl	8002150 <setTimer1>
			}


			break;
 800107c:	e007      	b.n	800108e <fsm_manual_run+0x29a>
		default:
			break;
 800107e:	bf00      	nop
 8001080:	e006      	b.n	8001090 <fsm_manual_run+0x29c>
			break;
 8001082:	bf00      	nop
 8001084:	e004      	b.n	8001090 <fsm_manual_run+0x29c>
			break;
 8001086:	bf00      	nop
 8001088:	e002      	b.n	8001090 <fsm_manual_run+0x29c>
			break;
 800108a:	bf00      	nop
 800108c:	e000      	b.n	8001090 <fsm_manual_run+0x29c>
			break;
 800108e:	bf00      	nop
	}
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000118 	.word	0x20000118
 8001098:	20000134 	.word	0x20000134
 800109c:	20000024 	.word	0x20000024
 80010a0:	20000120 	.word	0x20000120
 80010a4:	20000010 	.word	0x20000010
 80010a8:	2000011c 	.word	0x2000011c
 80010ac:	20000154 	.word	0x20000154
 80010b0:	20000014 	.word	0x20000014
 80010b4:	20000018 	.word	0x20000018

080010b8 <fsm_pedestrian_run>:

#include "fsm_pedestrian.h"

int PWM = 0;

void fsm_pedestrian_run(){
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 80010bc:	4b72      	ldr	r3, [pc, #456]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	f200 80d6 	bhi.w	8001274 <fsm_pedestrian_run+0x1bc>
 80010c8:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <fsm_pedestrian_run+0x18>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	080010ed 	.word	0x080010ed
 80010d8:	0800116f 	.word	0x0800116f
 80010dc:	080011bd 	.word	0x080011bd
		case INIT:
			clearPedestrian();
 80010e0:	f001 f98e 	bl	8002400 <clearPedestrian>
			pedestrianStatus = PED_NONE;
 80010e4:	4b68      	ldr	r3, [pc, #416]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	601a      	str	r2, [r3, #0]
			break;
 80010ea:	e0ca      	b.n	8001282 <fsm_pedestrian_run+0x1ca>
		case PED_NONE:
			if(isButtonPressed(0)){
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fc23 	bl	8000938 <isButtonPressed>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80bf 	beq.w	8001278 <fsm_pedestrian_run+0x1c0>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW){
 80010fa:	4b64      	ldr	r3, [pc, #400]	; (800128c <fsm_pedestrian_run+0x1d4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d003      	beq.n	800110a <fsm_pedestrian_run+0x52>
 8001102:	4b62      	ldr	r3, [pc, #392]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d108      	bne.n	800111c <fsm_pedestrian_run+0x64>
					pedestrianStatus = PED_GREEN;
 800110a:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 800110c:	2204      	movs	r2, #4
 800110e:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 8001110:	f001 f962 	bl	80023d8 <setPedestrianGreen>
					setTimer2(250);
 8001114:	20fa      	movs	r0, #250	; 0xfa
 8001116:	f001 f837 	bl	8002188 <setTimer2>
 800111a:	e027      	b.n	800116c <fsm_pedestrian_run+0xb4>
				} else if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW ){
 800111c:	4b5b      	ldr	r3, [pc, #364]	; (800128c <fsm_pedestrian_run+0x1d4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b0b      	cmp	r3, #11
 8001122:	d003      	beq.n	800112c <fsm_pedestrian_run+0x74>
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b0c      	cmp	r3, #12
 800112a:	d108      	bne.n	800113e <fsm_pedestrian_run+0x86>
					pedestrianStatus = PED_GREEN;
 800112c:	4b56      	ldr	r3, [pc, #344]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 800112e:	2204      	movs	r2, #4
 8001130:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 8001132:	f001 f951 	bl	80023d8 <setPedestrianGreen>
					setTimer2(0);
 8001136:	2000      	movs	r0, #0
 8001138:	f001 f826 	bl	8002188 <setTimer2>
 800113c:	e016      	b.n	800116c <fsm_pedestrian_run+0xb4>
				}
				else if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 800113e:	4b53      	ldr	r3, [pc, #332]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d00c      	beq.n	8001160 <fsm_pedestrian_run+0xa8>
 8001146:	4b51      	ldr	r3, [pc, #324]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b0d      	cmp	r3, #13
 800114c:	d008      	beq.n	8001160 <fsm_pedestrian_run+0xa8>
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d004      	beq.n	8001160 <fsm_pedestrian_run+0xa8>
 8001156:	4b4d      	ldr	r3, [pc, #308]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b0e      	cmp	r3, #14
 800115c:	f040 808c 	bne.w	8001278 <fsm_pedestrian_run+0x1c0>
					pedestrianStatus = PED_RED;
 8001160:	4b49      	ldr	r3, [pc, #292]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 8001162:	2203      	movs	r2, #3
 8001164:	601a      	str	r2, [r3, #0]
					setPedestrianRed();
 8001166:	f001 f923 	bl	80023b0 <setPedestrianRed>
				}
			}
			break;
 800116a:	e085      	b.n	8001278 <fsm_pedestrian_run+0x1c0>
 800116c:	e084      	b.n	8001278 <fsm_pedestrian_run+0x1c0>
		case PED_RED:
			if(timer3_flag){
 800116e:	4b48      	ldr	r3, [pc, #288]	; (8001290 <fsm_pedestrian_run+0x1d8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <fsm_pedestrian_run+0xd0>
				timer3_flag = 0;
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <fsm_pedestrian_run+0x1d8>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 800117c:	4b42      	ldr	r3, [pc, #264]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 800117e:	2202      	movs	r2, #2
 8001180:	601a      	str	r2, [r3, #0]
				clearPedestrian();
 8001182:	f001 f93d 	bl	8002400 <clearPedestrian>
				break;
 8001186:	e07c      	b.n	8001282 <fsm_pedestrian_run+0x1ca>
			}
			else if(status == AUTO_RED_GREEN){
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <fsm_pedestrian_run+0x1d4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d108      	bne.n	80011a2 <fsm_pedestrian_run+0xea>
				pedestrianStatus = PED_GREEN;
 8001190:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 8001192:	2204      	movs	r2, #4
 8001194:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 8001196:	f001 f91f 	bl	80023d8 <setPedestrianGreen>
				setTimer2(250);
 800119a:	20fa      	movs	r0, #250	; 0xfa
 800119c:	f000 fff4 	bl	8002188 <setTimer2>
			else if (status == MAN_RED_GREEN){
				pedestrianStatus = PED_GREEN;
				setPedestrianGreen();
				setTimer2(0);
			}
			break;
 80011a0:	e06c      	b.n	800127c <fsm_pedestrian_run+0x1c4>
			else if (status == MAN_RED_GREEN){
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <fsm_pedestrian_run+0x1d4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b0b      	cmp	r3, #11
 80011a8:	d168      	bne.n	800127c <fsm_pedestrian_run+0x1c4>
				pedestrianStatus = PED_GREEN;
 80011aa:	4b37      	ldr	r3, [pc, #220]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 80011b0:	f001 f912 	bl	80023d8 <setPedestrianGreen>
				setTimer2(0);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 ffe7 	bl	8002188 <setTimer2>
			break;
 80011ba:	e05f      	b.n	800127c <fsm_pedestrian_run+0x1c4>
		case PED_GREEN:
			if(timer2_flag){
 80011bc:	4b35      	ldr	r3, [pc, #212]	; (8001294 <fsm_pedestrian_run+0x1dc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d039      	beq.n	8001238 <fsm_pedestrian_run+0x180>
				if(PWM == 0){
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <fsm_pedestrian_run+0x1e0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d12a      	bne.n	8001222 <fsm_pedestrian_run+0x16a>
					PWM = 63-63*counter/(double)max_red1;
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <fsm_pedestrian_run+0x1e4>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4613      	mov	r3, r2
 80011d2:	019b      	lsls	r3, r3, #6
 80011d4:	1a9b      	subs	r3, r3, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f90a 	bl	80003f0 <__aeabi_i2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <fsm_pedestrian_run+0x1e8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f903 	bl	80003f0 <__aeabi_i2d>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff fa91 	bl	8000718 <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4929      	ldr	r1, [pc, #164]	; (80012a4 <fsm_pedestrian_run+0x1ec>)
 8001200:	f7fe ffa8 	bl	8000154 <__aeabi_dsub>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fb6c 	bl	80008e8 <__aeabi_d2iz>
 8001210:	4603      	mov	r3, r0
 8001212:	4a21      	ldr	r2, [pc, #132]	; (8001298 <fsm_pedestrian_run+0x1e0>)
 8001214:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <fsm_pedestrian_run+0x1e0>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <fsm_pedestrian_run+0x1f0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
 8001220:	e007      	b.n	8001232 <fsm_pedestrian_run+0x17a>
				} else {
					PWM = 0;
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <fsm_pedestrian_run+0x1e0>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <fsm_pedestrian_run+0x1e0>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <fsm_pedestrian_run+0x1f0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 8001232:	20fa      	movs	r0, #250	; 0xfa
 8001234:	f000 ffa8 	bl	8002188 <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <fsm_pedestrian_run+0x1d4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00b      	beq.n	8001258 <fsm_pedestrian_run+0x1a0>
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b0d      	cmp	r3, #13
 8001246:	d007      	beq.n	8001258 <fsm_pedestrian_run+0x1a0>
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <fsm_pedestrian_run+0x1d4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d003      	beq.n	8001258 <fsm_pedestrian_run+0x1a0>
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <fsm_pedestrian_run+0x1d4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b0e      	cmp	r3, #14
 8001256:	d113      	bne.n	8001280 <fsm_pedestrian_run+0x1c8>
				pedestrianStatus = PED_RED;
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <fsm_pedestrian_run+0x1d0>)
 800125a:	2203      	movs	r2, #3
 800125c:	601a      	str	r2, [r3, #0]
				setTimer3(2000);
 800125e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001262:	f000 ffad 	bl	80021c0 <setTimer3>
				setPedestrianRed();
 8001266:	f001 f8a3 	bl	80023b0 <setPedestrianRed>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <fsm_pedestrian_run+0x1f0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8001272:	e005      	b.n	8001280 <fsm_pedestrian_run+0x1c8>
		default:
			break;
 8001274:	bf00      	nop
 8001276:	e004      	b.n	8001282 <fsm_pedestrian_run+0x1ca>
			break;
 8001278:	bf00      	nop
 800127a:	e002      	b.n	8001282 <fsm_pedestrian_run+0x1ca>
			break;
 800127c:	bf00      	nop
 800127e:	e000      	b.n	8001282 <fsm_pedestrian_run+0x1ca>
			break;
 8001280:	bf00      	nop
	}
}
 8001282:	bf00      	nop
 8001284:	bdb0      	pop	{r4, r5, r7, pc}
 8001286:	bf00      	nop
 8001288:	2000011c 	.word	0x2000011c
 800128c:	20000118 	.word	0x20000118
 8001290:	2000013c 	.word	0x2000013c
 8001294:	20000138 	.word	0x20000138
 8001298:	20000114 	.word	0x20000114
 800129c:	20000120 	.word	0x20000120
 80012a0:	20000010 	.word	0x20000010
 80012a4:	404f8000 	.word	0x404f8000
 80012a8:	20000154 	.word	0x20000154

080012ac <fsm_tuning_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_tuning.h"

void fsm_tuning_run(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	switch(status){
 80012b0:	4bb6      	ldr	r3, [pc, #728]	; (800158c <fsm_tuning_run+0x2e0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b15      	subs	r3, #21
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	f200 8276 	bhi.w	80017a8 <fsm_tuning_run+0x4fc>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <fsm_tuning_run+0x18>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	08001469 	.word	0x08001469
 80012d0:	08001533 	.word	0x08001533
 80012d4:	08001619 	.word	0x08001619
 80012d8:	080016e1 	.word	0x080016e1
	case TUNING_RED1:

		if(timer1_flag){
 80012dc:	4bac      	ldr	r3, [pc, #688]	; (8001590 <fsm_tuning_run+0x2e4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 80012e4:	4baa      	ldr	r3, [pc, #680]	; (8001590 <fsm_tuning_run+0x2e4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80012ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ee:	f000 ff2f 	bl	8002150 <setTimer1>
			toggleTraffic1Red();
 80012f2:	f001 f899 	bl	8002428 <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff fb1e 	bl	8000938 <isButtonPressed>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d019      	beq.n	8001336 <fsm_tuning_run+0x8a>
			isButtonPressed(2);
 8001302:	2002      	movs	r0, #2
 8001304:	f7ff fb18 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff fb15 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 800130e:	4b9f      	ldr	r3, [pc, #636]	; (800158c <fsm_tuning_run+0x2e0>)
 8001310:	2202      	movs	r2, #2
 8001312:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 8001314:	f001 f8d2 	bl	80024bc <acceptTraffic1Red>
			setTimer1(1000);
 8001318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131c:	f000 ff18 	bl	8002150 <setTimer1>
			counter = max_red1;
 8001320:	4b9c      	ldr	r3, [pc, #624]	; (8001594 <fsm_tuning_run+0x2e8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a9c      	ldr	r2, [pc, #624]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001326:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001328:	f001 f974 	bl	8002614 <displayCounter>
			setTraffic1Red();
 800132c:	f000 ffb0 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 8001330:	f000 fffa 	bl	8002328 <setTraffic2Green>
			break;
 8001334:	e245      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fafe 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fafb 	bl	8000938 <isButtonPressed>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d016      	beq.n	8001376 <fsm_tuning_run+0xca>
			isButtonPressed(3);
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff faf5 	bl	8000938 <isButtonPressed>
			status = TUNING_RED2;
 800134e:	4b8f      	ldr	r3, [pc, #572]	; (800158c <fsm_tuning_run+0x2e0>)
 8001350:	2216      	movs	r2, #22
 8001352:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001358:	f000 fefa 	bl	8002150 <setTimer1>
			acceptTraffic1Red();
 800135c:	f001 f8ae 	bl	80024bc <acceptTraffic1Red>
			counter = max_red2;
 8001360:	4b8e      	ldr	r3, [pc, #568]	; (800159c <fsm_tuning_run+0x2f0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a8c      	ldr	r2, [pc, #560]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001366:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001368:	f001 f954 	bl	8002614 <displayCounter>
			clearTraffic1();
 800136c:	f000 ffc8 	bl	8002300 <clearTraffic1>
			clearTraffic2();
 8001370:	f001 f80e 	bl	8002390 <clearTraffic2>
			break;
 8001374:	e225      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001376:	2003      	movs	r0, #3
 8001378:	f7ff fade 	bl	8000938 <isButtonPressed>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8214 	beq.w	80017ac <fsm_tuning_run+0x500>
			counter++;
 8001384:	4b84      	ldr	r3, [pc, #528]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	4a83      	ldr	r2, [pc, #524]	; (8001598 <fsm_tuning_run+0x2ec>)
 800138c:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b63      	cmp	r3, #99	; 0x63
 8001394:	dd02      	ble.n	800139c <fsm_tuning_run+0xf0>
				counter = 2;
 8001396:	4b80      	ldr	r3, [pc, #512]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001398:	2202      	movs	r2, #2
 800139a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800139c:	f001 f93a 	bl	8002614 <displayCounter>
		}

		break;
 80013a0:	e204      	b.n	80017ac <fsm_tuning_run+0x500>
	case TUNING_RED2:
		if(timer1_flag){
 80013a2:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <fsm_tuning_run+0x2e4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <fsm_tuning_run+0x110>
			timer1_flag = 0;
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <fsm_tuning_run+0x2e4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80013b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b4:	f000 fecc 	bl	8002150 <setTimer1>
			toggleTraffic2Red();
 80013b8:	f001 f842 	bl	8002440 <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fabb 	bl	8000938 <isButtonPressed>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d019      	beq.n	80013fc <fsm_tuning_run+0x150>
			isButtonPressed(2);
 80013c8:	2002      	movs	r0, #2
 80013ca:	f7ff fab5 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f7ff fab2 	bl	8000938 <isButtonPressed>
			acceptTraffic2Red();
 80013d4:	f001 f894 	bl	8002500 <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 80013d8:	4b6c      	ldr	r3, [pc, #432]	; (800158c <fsm_tuning_run+0x2e0>)
 80013da:	2202      	movs	r2, #2
 80013dc:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80013de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e2:	f000 feb5 	bl	8002150 <setTimer1>
			counter = max_red1;
 80013e6:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <fsm_tuning_run+0x2e8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6b      	ldr	r2, [pc, #428]	; (8001598 <fsm_tuning_run+0x2ec>)
 80013ec:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013ee:	f001 f911 	bl	8002614 <displayCounter>
			setTraffic2Red();
 80013f2:	f000 ff61 	bl	80022b8 <setTraffic2Red>
			setTraffic2Green();
 80013f6:	f000 ff97 	bl	8002328 <setTraffic2Green>
			break;
 80013fa:	e1e2      	b.n	80017c2 <fsm_tuning_run+0x516>
		}
		if(isButtonPressed(0)){
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fa9b 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001402:	2002      	movs	r0, #2
 8001404:	f7ff fa98 	bl	8000938 <isButtonPressed>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d016      	beq.n	800143c <fsm_tuning_run+0x190>
			isButtonPressed(3);
 800140e:	2003      	movs	r0, #3
 8001410:	f7ff fa92 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN1;
 8001414:	4b5d      	ldr	r3, [pc, #372]	; (800158c <fsm_tuning_run+0x2e0>)
 8001416:	2217      	movs	r2, #23
 8001418:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800141a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141e:	f000 fe97 	bl	8002150 <setTimer1>
			acceptTraffic2Red();
 8001422:	f001 f86d 	bl	8002500 <acceptTraffic2Red>
			counter = max_green1;
 8001426:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <fsm_tuning_run+0x2f4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a5b      	ldr	r2, [pc, #364]	; (8001598 <fsm_tuning_run+0x2ec>)
 800142c:	6013      	str	r3, [r2, #0]
			displayCounter();
 800142e:	f001 f8f1 	bl	8002614 <displayCounter>
			clearTraffic1();
 8001432:	f000 ff65 	bl	8002300 <clearTraffic1>
			clearTraffic2();
 8001436:	f000 ffab 	bl	8002390 <clearTraffic2>
			break;
 800143a:	e1c2      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 800143c:	2003      	movs	r0, #3
 800143e:	f7ff fa7b 	bl	8000938 <isButtonPressed>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 81b3 	beq.w	80017b0 <fsm_tuning_run+0x504>
			counter++;
 800144a:	4b53      	ldr	r3, [pc, #332]	; (8001598 <fsm_tuning_run+0x2ec>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a51      	ldr	r2, [pc, #324]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001452:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8001454:	4b50      	ldr	r3, [pc, #320]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b63      	cmp	r3, #99	; 0x63
 800145a:	dd02      	ble.n	8001462 <fsm_tuning_run+0x1b6>
				counter = 2;
 800145c:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <fsm_tuning_run+0x2ec>)
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001462:	f001 f8d7 	bl	8002614 <displayCounter>
		}
		break;
 8001466:	e1a3      	b.n	80017b0 <fsm_tuning_run+0x504>
	case TUNING_GREEN1:

		if(timer1_flag){
 8001468:	4b49      	ldr	r3, [pc, #292]	; (8001590 <fsm_tuning_run+0x2e4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <fsm_tuning_run+0x1d6>
			timer1_flag = 0;
 8001470:	4b47      	ldr	r3, [pc, #284]	; (8001590 <fsm_tuning_run+0x2e4>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147a:	f000 fe69 	bl	8002150 <setTimer1>
			toggleTraffic1Green();
 800147e:	f000 ffe9 	bl	8002454 <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fa58 	bl	8000938 <isButtonPressed>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d019      	beq.n	80014c2 <fsm_tuning_run+0x216>
			isButtonPressed(2);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fa52 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001494:	2003      	movs	r0, #3
 8001496:	f7ff fa4f 	bl	8000938 <isButtonPressed>
			acceptTraffic1Green();
 800149a:	f001 f853 	bl	8002544 <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <fsm_tuning_run+0x2e0>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f000 fe52 	bl	8002150 <setTimer1>
			counter = max_red1;
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <fsm_tuning_run+0x2e8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a39      	ldr	r2, [pc, #228]	; (8001598 <fsm_tuning_run+0x2ec>)
 80014b2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80014b4:	f001 f8ae 	bl	8002614 <displayCounter>
			setTraffic1Red();
 80014b8:	f000 feea 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 80014bc:	f000 ff34 	bl	8002328 <setTraffic2Green>
			break;
 80014c0:	e17f      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff fa38 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff fa35 	bl	8000938 <isButtonPressed>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d016      	beq.n	8001502 <fsm_tuning_run+0x256>
			isButtonPressed(3);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f7ff fa2f 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN2;
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <fsm_tuning_run+0x2e0>)
 80014dc:	2218      	movs	r2, #24
 80014de:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f000 fe34 	bl	8002150 <setTimer1>
			acceptTraffic1Green();
 80014e8:	f001 f82c 	bl	8002544 <acceptTraffic1Green>
			counter = max_green2;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <fsm_tuning_run+0x2f8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <fsm_tuning_run+0x2ec>)
 80014f2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80014f4:	f001 f88e 	bl	8002614 <displayCounter>
			clearTraffic1();
 80014f8:	f000 ff02 	bl	8002300 <clearTraffic1>
			clearTraffic2();
 80014fc:	f000 ff48 	bl	8002390 <clearTraffic2>
			break;
 8001500:	e15f      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001502:	2003      	movs	r0, #3
 8001504:	f7ff fa18 	bl	8000938 <isButtonPressed>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8152 	beq.w	80017b4 <fsm_tuning_run+0x508>
			counter++;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001518:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <fsm_tuning_run+0x2f0>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	dc02      	bgt.n	800152c <fsm_tuning_run+0x280>
				counter = 1;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <fsm_tuning_run+0x2ec>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800152c:	f001 f872 	bl	8002614 <displayCounter>
		}
		break;
 8001530:	e140      	b.n	80017b4 <fsm_tuning_run+0x508>
	case TUNING_GREEN2:

		if(timer1_flag){
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <fsm_tuning_run+0x2e4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <fsm_tuning_run+0x2a0>
			timer1_flag = 0;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <fsm_tuning_run+0x2e4>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001544:	f000 fe04 	bl	8002150 <setTimer1>
			toggleTraffic2Green();
 8001548:	f000 ff8e 	bl	8002468 <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff f9f3 	bl	8000938 <isButtonPressed>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d027      	beq.n	80015a8 <fsm_tuning_run+0x2fc>
			isButtonPressed(2);
 8001558:	2002      	movs	r0, #2
 800155a:	f7ff f9ed 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 800155e:	2003      	movs	r0, #3
 8001560:	f7ff f9ea 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <fsm_tuning_run+0x2e0>)
 8001566:	2202      	movs	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 800156a:	f001 f805 	bl	8002578 <acceptTraffic2Green>
			setTimer1(1000);
 800156e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001572:	f000 fded 	bl	8002150 <setTimer1>
			counter = max_red1;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <fsm_tuning_run+0x2e8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <fsm_tuning_run+0x2ec>)
 800157c:	6013      	str	r3, [r2, #0]
			displayCounter();
 800157e:	f001 f849 	bl	8002614 <displayCounter>
			setTraffic1Red();
 8001582:	f000 fe85 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 8001586:	f000 fecf 	bl	8002328 <setTraffic2Green>
			break;
 800158a:	e11a      	b.n	80017c2 <fsm_tuning_run+0x516>
 800158c:	20000118 	.word	0x20000118
 8001590:	20000134 	.word	0x20000134
 8001594:	20000010 	.word	0x20000010
 8001598:	20000120 	.word	0x20000120
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000014 	.word	0x20000014
 80015a4:	20000020 	.word	0x20000020
		}

		if(isButtonPressed(0)){
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff f9c5 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80015ae:	2002      	movs	r0, #2
 80015b0:	f7ff f9c2 	bl	8000938 <isButtonPressed>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d016      	beq.n	80015e8 <fsm_tuning_run+0x33c>
			isButtonPressed(3);
 80015ba:	2003      	movs	r0, #3
 80015bc:	f7ff f9bc 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW1;
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <fsm_tuning_run+0x51c>)
 80015c2:	2219      	movs	r2, #25
 80015c4:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80015c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ca:	f000 fdc1 	bl	8002150 <setTimer1>
			acceptTraffic2Green();
 80015ce:	f000 ffd3 	bl	8002578 <acceptTraffic2Green>
			counter = max_yellow1;
 80015d2:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <fsm_tuning_run+0x520>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <fsm_tuning_run+0x524>)
 80015d8:	6013      	str	r3, [r2, #0]
			displayCounter();
 80015da:	f001 f81b 	bl	8002614 <displayCounter>
			clearTraffic1();
 80015de:	f000 fe8f 	bl	8002300 <clearTraffic1>
			clearTraffic2();
 80015e2:	f000 fed5 	bl	8002390 <clearTraffic2>
			break;
 80015e6:	e0ec      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80015e8:	2003      	movs	r0, #3
 80015ea:	f7ff f9a5 	bl	8000938 <isButtonPressed>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80e1 	beq.w	80017b8 <fsm_tuning_run+0x50c>
			counter++;
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <fsm_tuning_run+0x524>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <fsm_tuning_run+0x524>)
 80015fe:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8001600:	4b74      	ldr	r3, [pc, #464]	; (80017d4 <fsm_tuning_run+0x528>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b72      	ldr	r3, [pc, #456]	; (80017d0 <fsm_tuning_run+0x524>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	dc02      	bgt.n	8001612 <fsm_tuning_run+0x366>
				counter = 1;
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <fsm_tuning_run+0x524>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001612:	f000 ffff 	bl	8002614 <displayCounter>
		}
		break;
 8001616:	e0cf      	b.n	80017b8 <fsm_tuning_run+0x50c>
	case TUNING_YELLOW1:
		if(timer1_flag){
 8001618:	4b6f      	ldr	r3, [pc, #444]	; (80017d8 <fsm_tuning_run+0x52c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <fsm_tuning_run+0x386>
			timer1_flag = 0;
 8001620:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <fsm_tuning_run+0x52c>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800162a:	f000 fd91 	bl	8002150 <setTimer1>
			toggleTraffic1Yellow();
 800162e:	f000 ff25 	bl	800247c <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff f980 	bl	8000938 <isButtonPressed>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d019      	beq.n	8001672 <fsm_tuning_run+0x3c6>
			isButtonPressed(2);
 800163e:	2002      	movs	r0, #2
 8001640:	f7ff f97a 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001644:	2003      	movs	r0, #3
 8001646:	f7ff f977 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <fsm_tuning_run+0x51c>)
 800164c:	2202      	movs	r2, #2
 800164e:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 8001650:	f000 ffac 	bl	80025ac <acceptTraffic1Yellow>
			setTimer1(1000);
 8001654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001658:	f000 fd7a 	bl	8002150 <setTimer1>
			counter = max_red1;
 800165c:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <fsm_tuning_run+0x528>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <fsm_tuning_run+0x524>)
 8001662:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001664:	f000 ffd6 	bl	8002614 <displayCounter>
			setTraffic1Red();
 8001668:	f000 fe12 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 800166c:	f000 fe5c 	bl	8002328 <setTraffic2Green>
			break;
 8001670:	e0a7      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff f960 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001678:	2002      	movs	r0, #2
 800167a:	f7ff f95d 	bl	8000938 <isButtonPressed>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d016      	beq.n	80016b2 <fsm_tuning_run+0x406>
			isButtonPressed(3);
 8001684:	2003      	movs	r0, #3
 8001686:	f7ff f957 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW2;
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <fsm_tuning_run+0x51c>)
 800168c:	221a      	movs	r2, #26
 800168e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001694:	f000 fd5c 	bl	8002150 <setTimer1>
			acceptTraffic1Yellow();
 8001698:	f000 ff88 	bl	80025ac <acceptTraffic1Yellow>
			counter = max_yellow2;
 800169c:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <fsm_tuning_run+0x530>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a4b      	ldr	r2, [pc, #300]	; (80017d0 <fsm_tuning_run+0x524>)
 80016a2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80016a4:	f000 ffb6 	bl	8002614 <displayCounter>
			clearTraffic1();
 80016a8:	f000 fe2a 	bl	8002300 <clearTraffic1>
			clearTraffic2();
 80016ac:	f000 fe70 	bl	8002390 <clearTraffic2>
			break;
 80016b0:	e087      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80016b2:	2003      	movs	r0, #3
 80016b4:	f7ff f940 	bl	8000938 <isButtonPressed>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d07e      	beq.n	80017bc <fsm_tuning_run+0x510>
			counter++;
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <fsm_tuning_run+0x524>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a42      	ldr	r2, [pc, #264]	; (80017d0 <fsm_tuning_run+0x524>)
 80016c6:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 80016c8:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <fsm_tuning_run+0x534>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <fsm_tuning_run+0x524>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dc02      	bgt.n	80016da <fsm_tuning_run+0x42e>
				counter = 1;
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <fsm_tuning_run+0x524>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80016da:	f000 ff9b 	bl	8002614 <displayCounter>
		}
		break;
 80016de:	e06d      	b.n	80017bc <fsm_tuning_run+0x510>
	case TUNING_YELLOW2:
		if(timer1_flag){
 80016e0:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <fsm_tuning_run+0x52c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <fsm_tuning_run+0x44e>
			timer1_flag = 0;
 80016e8:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <fsm_tuning_run+0x52c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80016ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f2:	f000 fd2d 	bl	8002150 <setTimer1>
			toggleTraffic2Yellow();
 80016f6:	f000 fed3 	bl	80024a0 <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff f91c 	bl	8000938 <isButtonPressed>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d019      	beq.n	800173a <fsm_tuning_run+0x48e>
			isButtonPressed(2);
 8001706:	2002      	movs	r0, #2
 8001708:	f7ff f916 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 800170c:	2003      	movs	r0, #3
 800170e:	f7ff f913 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <fsm_tuning_run+0x51c>)
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 8001718:	f000 ff62 	bl	80025e0 <acceptTraffic2Yellow>
			setTimer1(1000);
 800171c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001720:	f000 fd16 	bl	8002150 <setTimer1>
			counter = max_red1;
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <fsm_tuning_run+0x528>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <fsm_tuning_run+0x524>)
 800172a:	6013      	str	r3, [r2, #0]
			displayCounter();
 800172c:	f000 ff72 	bl	8002614 <displayCounter>
			setTraffic1Red();
 8001730:	f000 fdae 	bl	8002290 <setTraffic1Red>
			setTraffic2Green();
 8001734:	f000 fdf8 	bl	8002328 <setTraffic2Green>
			break;
 8001738:	e043      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff f8fc 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001740:	2002      	movs	r0, #2
 8001742:	f7ff f8f9 	bl	8000938 <isButtonPressed>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d016      	beq.n	800177a <fsm_tuning_run+0x4ce>
			isButtonPressed(3);
 800174c:	2003      	movs	r0, #3
 800174e:	f7ff f8f3 	bl	8000938 <isButtonPressed>
			status = TUNING_RED1;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <fsm_tuning_run+0x51c>)
 8001754:	2215      	movs	r2, #21
 8001756:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175c:	f000 fcf8 	bl	8002150 <setTimer1>
			acceptTraffic2Yellow();
 8001760:	f000 ff3e 	bl	80025e0 <acceptTraffic2Yellow>
			counter = max_red1;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <fsm_tuning_run+0x528>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <fsm_tuning_run+0x524>)
 800176a:	6013      	str	r3, [r2, #0]
			displayCounter();
 800176c:	f000 ff52 	bl	8002614 <displayCounter>
			clearTraffic1();
 8001770:	f000 fdc6 	bl	8002300 <clearTraffic1>
			clearTraffic2();
 8001774:	f000 fe0c 	bl	8002390 <clearTraffic2>
			break;
 8001778:	e023      	b.n	80017c2 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 800177a:	2003      	movs	r0, #3
 800177c:	f7ff f8dc 	bl	8000938 <isButtonPressed>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01c      	beq.n	80017c0 <fsm_tuning_run+0x514>
			counter++;
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <fsm_tuning_run+0x524>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <fsm_tuning_run+0x524>)
 800178e:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <fsm_tuning_run+0x528>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <fsm_tuning_run+0x524>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	dc02      	bgt.n	80017a2 <fsm_tuning_run+0x4f6>
				counter = 1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <fsm_tuning_run+0x524>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80017a2:	f000 ff37 	bl	8002614 <displayCounter>
		}
		break;
 80017a6:	e00b      	b.n	80017c0 <fsm_tuning_run+0x514>
	default:
		break;
 80017a8:	bf00      	nop
 80017aa:	e00a      	b.n	80017c2 <fsm_tuning_run+0x516>
		break;
 80017ac:	bf00      	nop
 80017ae:	e008      	b.n	80017c2 <fsm_tuning_run+0x516>
		break;
 80017b0:	bf00      	nop
 80017b2:	e006      	b.n	80017c2 <fsm_tuning_run+0x516>
		break;
 80017b4:	bf00      	nop
 80017b6:	e004      	b.n	80017c2 <fsm_tuning_run+0x516>
		break;
 80017b8:	bf00      	nop
 80017ba:	e002      	b.n	80017c2 <fsm_tuning_run+0x516>
		break;
 80017bc:	bf00      	nop
 80017be:	e000      	b.n	80017c2 <fsm_tuning_run+0x516>
		break;
 80017c0:	bf00      	nop
	}
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000118 	.word	0x20000118
 80017cc:	20000018 	.word	0x20000018
 80017d0:	20000120 	.word	0x20000120
 80017d4:	20000010 	.word	0x20000010
 80017d8:	20000134 	.word	0x20000134
 80017dc:	20000024 	.word	0x20000024
 80017e0:	2000001c 	.word	0x2000001c

080017e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e8:	f000 ff68 	bl	80026bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ec:	f000 f84c 	bl	8001888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f0:	f000 f978 	bl	8001ae4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017f4:	f000 f88a 	bl	800190c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80017f8:	f000 f94a 	bl	8001a90 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80017fc:	f000 f8d2 	bl	80019a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8001800:	f000 f9e3 	bl	8001bca <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 8001804:	4816      	ldr	r0, [pc, #88]	; (8001860 <main+0x7c>)
 8001806:	f001 ffaf 	bl	8003768 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800180a:	2100      	movs	r1, #0
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <main+0x80>)
 800180e:	f002 f855 	bl	80038bc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <main+0x84>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <main+0x88>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timer_run, 1, 1);
 800181e:	2201      	movs	r2, #1
 8001820:	2101      	movs	r1, #1
 8001822:	4813      	ldr	r0, [pc, #76]	; (8001870 <main+0x8c>)
 8001824:	f000 fa4a 	bl	8001cbc <SCH_Add_Task>
  SCH_Add_Task(button_reading, 1, 1);
 8001828:	2201      	movs	r2, #1
 800182a:	2101      	movs	r1, #1
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <main+0x90>)
 800182e:	f000 fa45 	bl	8001cbc <SCH_Add_Task>
  SCH_Add_Task(fsm_auto_run, 2, 10);
 8001832:	220a      	movs	r2, #10
 8001834:	2102      	movs	r1, #2
 8001836:	4810      	ldr	r0, [pc, #64]	; (8001878 <main+0x94>)
 8001838:	f000 fa40 	bl	8001cbc <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 3, 10);
 800183c:	220a      	movs	r2, #10
 800183e:	2103      	movs	r1, #3
 8001840:	480e      	ldr	r0, [pc, #56]	; (800187c <main+0x98>)
 8001842:	f000 fa3b 	bl	8001cbc <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 4, 10);
 8001846:	220a      	movs	r2, #10
 8001848:	2104      	movs	r1, #4
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <main+0x9c>)
 800184c:	f000 fa36 	bl	8001cbc <SCH_Add_Task>
  SCH_Add_Task(fsm_pedestrian_run, 5, 10);
 8001850:	220a      	movs	r2, #10
 8001852:	2105      	movs	r1, #5
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <main+0xa0>)
 8001856:	f000 fa31 	bl	8001cbc <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800185a:	f000 fa87 	bl	8001d6c <SCH_Dispatch_Tasks>
 800185e:	e7fc      	b.n	800185a <main+0x76>
 8001860:	2000019c 	.word	0x2000019c
 8001864:	20000154 	.word	0x20000154
 8001868:	20000118 	.word	0x20000118
 800186c:	2000011c 	.word	0x2000011c
 8001870:	080021f9 	.word	0x080021f9
 8001874:	08000999 	.word	0x08000999
 8001878:	08000ba5 	.word	0x08000ba5
 800187c:	08000df5 	.word	0x08000df5
 8001880:	080012ad 	.word	0x080012ad
 8001884:	080010b9 	.word	0x080010b9

08001888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	; 0x40
 800188c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	2228      	movs	r2, #40	; 0x28
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fade 	bl	8004e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ae:	2301      	movs	r3, #1
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b2:	2310      	movs	r3, #16
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b6:	2302      	movs	r3, #2
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018be:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fae3 	bl	8002e94 <HAL_RCC_OscConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018d4:	f000 f974 	bl	8001bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	230f      	movs	r3, #15
 80018da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018dc:	2302      	movs	r3, #2
 80018de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fd4e 	bl	8003394 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018fe:	f000 f95f 	bl	8001bc0 <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3740      	adds	r7, #64	; 0x40
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_TIM2_Init+0x94>)
 800192a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001932:	f242 720f 	movw	r2, #9999	; 0x270f
 8001936:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <MX_TIM2_Init+0x94>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001940:	223f      	movs	r2, #63	; 0x3f
 8001942:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_TIM2_Init+0x94>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <MX_TIM2_Init+0x94>)
 8001952:	f001 feb9 	bl	80036c8 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800195c:	f000 f930 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	4619      	mov	r1, r3
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <MX_TIM2_Init+0x94>)
 800196e:	f002 fa0d 	bl	8003d8c <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001978:	f000 f922 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_TIM2_Init+0x94>)
 800198a:	f002 fd8b 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001994:	f000 f914 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000019c 	.word	0x2000019c

080019a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	f107 0320 	add.w	r3, r7, #32
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <MX_TIM3_Init+0xe8>)
 80019d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019ea:	223f      	movs	r2, #63	; 0x3f
 80019ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019fa:	4823      	ldr	r0, [pc, #140]	; (8001a88 <MX_TIM3_Init+0xe4>)
 80019fc:	f001 fe64 	bl	80036c8 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a06:	f000 f8db 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a14:	4619      	mov	r1, r3
 8001a16:	481c      	ldr	r0, [pc, #112]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a18:	f002 f9b8 	bl	8003d8c <HAL_TIM_ConfigClockSource>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a22:	f000 f8cd 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a26:	4818      	ldr	r0, [pc, #96]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a28:	f001 fef0 	bl	800380c <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a32:	f000 f8c5 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	4619      	mov	r1, r3
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a46:	f002 fd2d 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a50:	f000 f8b6 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a54:	2360      	movs	r3, #96	; 0x60
 8001a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a6c:	f002 f8d0 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a76:	f000 f8a3 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM3_Init+0xe4>)
 8001a7c:	f000 fa6c 	bl	8001f58 <HAL_TIM_MspPostInit>

}
 8001a80:	bf00      	nop
 8001a82:	3738      	adds	r7, #56	; 0x38
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000154 	.word	0x20000154
 8001a8c:	40000400 	.word	0x40000400

08001a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_USART2_UART_Init+0x50>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART2_UART_Init+0x4c>)
 8001ac8:	f002 fd5c 	bl	8004584 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ad2:	f000 f875 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200001e4 	.word	0x200001e4
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <MX_GPIO_Init+0xd0>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <MX_GPIO_Init+0xd0>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <MX_GPIO_Init+0xd0>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <MX_GPIO_Init+0xd0>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <MX_GPIO_Init+0xd0>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <MX_GPIO_Init+0xd0>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001b2e:	4822      	ldr	r0, [pc, #136]	; (8001bb8 <MX_GPIO_Init+0xd4>)
 8001b30:	f001 f97f 	bl	8002e32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001b3a:	4820      	ldr	r0, [pc, #128]	; (8001bbc <MX_GPIO_Init+0xd8>)
 8001b3c:	f001 f979 	bl	8002e32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8001b40:	2313      	movs	r3, #19
 8001b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	4619      	mov	r1, r3
 8001b52:	481a      	ldr	r0, [pc, #104]	; (8001bbc <MX_GPIO_Init+0xd8>)
 8001b54:	f000 ffd2 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <MX_GPIO_Init+0xd4>)
 8001b6c:	f000 ffc6 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001b70:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	4619      	mov	r1, r3
 8001b88:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <MX_GPIO_Init+0xd4>)
 8001b8a:	f000 ffb7 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8001b8e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_GPIO_Init+0xd8>)
 8001ba8:	f000 ffa8 	bl	8002afc <HAL_GPIO_Init>

}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	40010800 	.word	0x40010800

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <Error_Handler+0x8>

08001bca <SCH_Init>:
 */
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	71fb      	strb	r3, [r7, #7]
 8001bd4:	e006      	b.n	8001be4 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f913 	bl	8001e04 <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3301      	adds	r3, #1
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b13      	cmp	r3, #19
 8001be8:	d9f5      	bls.n	8001bd6 <SCH_Init+0xc>
	}
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <SCH_Update>:

void SCH_Update(void){
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
	uint32_t index;
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	e052      	b.n	8001ca6 <SCH_Update+0xb2>
		if(SCH_tasks_G[index].pTask){
 8001c00:	492d      	ldr	r1, [pc, #180]	; (8001cb8 <SCH_Update+0xc4>)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d045      	beq.n	8001ca0 <SCH_Update+0xac>
			if(SCH_tasks_G[index].Delay > 0){
 8001c14:	4928      	ldr	r1, [pc, #160]	; (8001cb8 <SCH_Update+0xc4>)
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d013      	beq.n	8001c52 <SCH_Update+0x5e>
				SCH_tasks_G[index].Delay--;
 8001c2a:	4923      	ldr	r1, [pc, #140]	; (8001cb8 <SCH_Update+0xc4>)
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	3304      	adds	r3, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1e59      	subs	r1, r3, #1
 8001c3e:	481e      	ldr	r0, [pc, #120]	; (8001cb8 <SCH_Update+0xc4>)
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4403      	add	r3, r0
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	6019      	str	r1, [r3, #0]
 8001c50:	e026      	b.n	8001ca0 <SCH_Update+0xac>
			} else {
				SCH_tasks_G[index].RunMe += 1;
 8001c52:	4919      	ldr	r1, [pc, #100]	; (8001cb8 <SCH_Update+0xc4>)
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	330c      	adds	r3, #12
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	b2d8      	uxtb	r0, r3
 8001c68:	4913      	ldr	r1, [pc, #76]	; (8001cb8 <SCH_Update+0xc4>)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	330c      	adds	r3, #12
 8001c78:	4602      	mov	r2, r0
 8001c7a:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <SCH_Update+0xc4>)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	6819      	ldr	r1, [r3, #0]
 8001c8e:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <SCH_Update+0xc4>)
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4403      	add	r3, r0
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	6019      	str	r1, [r3, #0]
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b13      	cmp	r3, #19
 8001caa:	d9a9      	bls.n	8001c00 <SCH_Update+0xc>
			}
		}
	}
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000228 	.word	0x20000228

08001cbc <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunc)(), uint32_t delay, uint32_t period){
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
	while(SCH_tasks_G[index].pTask != 0 && index < SCH_MAX_TASKS) index++;
 8001ccc:	e002      	b.n	8001cd4 <SCH_Add_Task+0x18>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	4924      	ldr	r1, [pc, #144]	; (8001d68 <SCH_Add_Task+0xac>)
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <SCH_Add_Task+0x32>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b13      	cmp	r3, #19
 8001cec:	d9ef      	bls.n	8001cce <SCH_Add_Task+0x12>
	if(index == SCH_MAX_TASKS){
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b14      	cmp	r3, #20
 8001cf2:	d101      	bne.n	8001cf8 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASKS;
 8001cf4:	2314      	movs	r3, #20
 8001cf6:	e031      	b.n	8001d5c <SCH_Add_Task+0xa0>
	}
	SCH_tasks_G[index].pTask = pFunc;
 8001cf8:	491b      	ldr	r1, [pc, #108]	; (8001d68 <SCH_Add_Task+0xac>)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = period;
 8001d0a:	4917      	ldr	r1, [pc, #92]	; (8001d68 <SCH_Add_Task+0xac>)
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3308      	adds	r3, #8
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay = delay;
 8001d1e:	4912      	ldr	r1, [pc, #72]	; (8001d68 <SCH_Add_Task+0xac>)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe = 0;
 8001d32:	490d      	ldr	r1, [pc, #52]	; (8001d68 <SCH_Add_Task+0xac>)
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	330c      	adds	r3, #12
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskID = index;
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <SCH_Add_Task+0xac>)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3310      	adds	r3, #16
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]
	return index;
 8001d5a:	697b      	ldr	r3, [r7, #20]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000228 	.word	0x20000228

08001d6c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
	for(int index = 0; index < SCH_MAX_TASKS; index++){
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	e03a      	b.n	8001dee <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[index].RunMe > 0){
 8001d78:	4921      	ldr	r1, [pc, #132]	; (8001e00 <SCH_Dispatch_Tasks+0x94>)
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	330c      	adds	r3, #12
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02c      	beq.n	8001de8 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[index].RunMe--;
 8001d8e:	491c      	ldr	r1, [pc, #112]	; (8001e00 <SCH_Dispatch_Tasks+0x94>)
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	330c      	adds	r3, #12
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b2d8      	uxtb	r0, r3
 8001da4:	4916      	ldr	r1, [pc, #88]	; (8001e00 <SCH_Dispatch_Tasks+0x94>)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	330c      	adds	r3, #12
 8001db4:	4602      	mov	r2, r0
 8001db6:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[index].pTask)();
 8001db8:	4911      	ldr	r1, [pc, #68]	; (8001e00 <SCH_Dispatch_Tasks+0x94>)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4798      	blx	r3
			if(SCH_tasks_G[index].Period == 0) SCH_Delete_Task(index);
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <SCH_Dispatch_Tasks+0x94>)
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3308      	adds	r3, #8
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <SCH_Dispatch_Tasks+0x7c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f80e 	bl	8001e04 <SCH_Delete_Task>
	for(int index = 0; index < SCH_MAX_TASKS; index++){
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3301      	adds	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b13      	cmp	r3, #19
 8001df2:	ddc1      	ble.n	8001d78 <SCH_Dispatch_Tasks+0xc>
		}
	}
//	SCH_Go_To_Sleep();
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000228 	.word	0x20000228

08001e04 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t index){
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 8001e0c:	491c      	ldr	r1, [pc, #112]	; (8001e80 <SCH_Delete_Task+0x7c>)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <SCH_Delete_Task+0x20>
		return 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e027      	b.n	8001e74 <SCH_Delete_Task+0x70>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <SCH_Delete_Task+0x7c>)
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8001e36:	4912      	ldr	r1, [pc, #72]	; (8001e80 <SCH_Delete_Task+0x7c>)
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3304      	adds	r3, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 8001e4a:	490d      	ldr	r1, [pc, #52]	; (8001e80 <SCH_Delete_Task+0x7c>)
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3308      	adds	r3, #8
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <SCH_Delete_Task+0x7c>)
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
		return 1;
 8001e72:	2301      	movs	r3, #1
	}
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000228 	.word	0x20000228

08001e84 <HAL_MspInit>:
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61d3      	str	r3, [r2, #28]
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_MspInit+0x60>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_MspInit+0x60>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6053      	str	r3, [r2, #4]
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000

08001ee8 <HAL_TIM_Base_MspInit>:
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d114      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0x3c>
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_TIM_Base_MspInit+0x68>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_TIM_Base_MspInit+0x68>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_TIM_Base_MspInit+0x68>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	201c      	movs	r0, #28
 8001f18:	f000 fd09 	bl	800292e <HAL_NVIC_SetPriority>
 8001f1c:	201c      	movs	r0, #28
 8001f1e:	f000 fd22 	bl	8002966 <HAL_NVIC_EnableIRQ>
 8001f22:	e010      	b.n	8001f46 <HAL_TIM_Base_MspInit+0x5e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_TIM_Base_MspInit+0x6c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10b      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0x5e>
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_TIM_Base_MspInit+0x68>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_TIM_Base_MspInit+0x68>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_TIM_Base_MspInit+0x68>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40000400 	.word	0x40000400

08001f58 <HAL_TIM_MspPostInit>:
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_TIM_MspPostInit+0x58>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d117      	bne.n	8001fa8 <HAL_TIM_MspPostInit+0x50>
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_TIM_MspPostInit+0x5c>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_TIM_MspPostInit+0x5c>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_TIM_MspPostInit+0x5c>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2340      	movs	r3, #64	; 0x40
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	2302      	movs	r3, #2
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <HAL_TIM_MspPostInit+0x60>)
 8001fa4:	f000 fdaa 	bl	8002afc <HAL_GPIO_Init>
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010800 	.word	0x40010800

08001fbc <HAL_UART_MspInit>:
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <HAL_UART_MspInit+0x98>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d137      	bne.n	800204c <HAL_UART_MspInit+0x90>
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_UART_MspInit+0x9c>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_UART_MspInit+0x9c>)
 8001fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_UART_MspInit+0x9c>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_UART_MspInit+0x9c>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_UART_MspInit+0x9c>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_UART_MspInit+0x9c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2304      	movs	r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	2302      	movs	r3, #2
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	2303      	movs	r3, #3
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4619      	mov	r1, r3
 800201e:	480f      	ldr	r0, [pc, #60]	; (800205c <HAL_UART_MspInit+0xa0>)
 8002020:	f000 fd6c 	bl	8002afc <HAL_GPIO_Init>
 8002024:	2308      	movs	r3, #8
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4619      	mov	r1, r3
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <HAL_UART_MspInit+0xa0>)
 8002038:	f000 fd60 	bl	8002afc <HAL_GPIO_Init>
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2026      	movs	r0, #38	; 0x26
 8002042:	f000 fc74 	bl	800292e <HAL_NVIC_SetPriority>
 8002046:	2026      	movs	r0, #38	; 0x26
 8002048:	f000 fc8d 	bl	8002966 <HAL_NVIC_EnableIRQ>
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40004400 	.word	0x40004400
 8002058:	40021000 	.word	0x40021000
 800205c:	40010800 	.word	0x40010800

08002060 <NMI_Handler>:
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
 8002064:	e7fe      	b.n	8002064 <NMI_Handler+0x4>

08002066 <HardFault_Handler>:
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <DebugMon_Handler>:
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <PendSV_Handler>:
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <SysTick_Handler>:
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	f000 fb4f 	bl	8002748 <HAL_IncTick>
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <TIM2_IRQHandler>:
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f001 fca3 	bl	8003a00 <HAL_TIM_IRQHandler>
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000019c 	.word	0x2000019c

080020c4 <USART2_IRQHandler>:
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <USART2_IRQHandler+0x10>)
 80020ca:	f002 faed 	bl	80046a8 <HAL_UART_IRQHandler>
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200001e4 	.word	0x200001e4

080020d8 <_sbrk>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <_sbrk+0x5c>)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <_sbrk+0x60>)
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <_sbrk+0x22>
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x64>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_sbrk+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d207      	bcs.n	8002118 <_sbrk+0x40>
 8002108:	f002 fe7c 	bl	8004e04 <__errno>
 800210c:	4603      	mov	r3, r0
 800210e:	220c      	movs	r2, #12
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e009      	b.n	800212c <_sbrk+0x54>
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_sbrk+0x64>)
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20005000 	.word	0x20005000
 8002138:	00000400 	.word	0x00000400
 800213c:	20000130 	.word	0x20000130
 8002140:	200003d0 	.word	0x200003d0

08002144 <SystemInit>:
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <setTimer1+0x2c>)
 800215c:	fb82 1203 	smull	r1, r2, r2, r3
 8002160:	1092      	asrs	r2, r2, #2
 8002162:	17db      	asrs	r3, r3, #31
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <setTimer1+0x30>)
 8002168:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <setTimer1+0x34>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	66666667 	.word	0x66666667
 8002180:	20000140 	.word	0x20000140
 8002184:	20000134 	.word	0x20000134

08002188 <setTimer2>:

void setTimer2(int duration){
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <setTimer2+0x2c>)
 8002194:	fb82 1203 	smull	r1, r2, r2, r3
 8002198:	1092      	asrs	r2, r2, #2
 800219a:	17db      	asrs	r3, r3, #31
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <setTimer2+0x30>)
 80021a0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <setTimer2+0x34>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	66666667 	.word	0x66666667
 80021b8:	20000144 	.word	0x20000144
 80021bc:	20000138 	.word	0x20000138

080021c0 <setTimer3>:

void setTimer3(int duration){
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a08      	ldr	r2, [pc, #32]	; (80021ec <setTimer3+0x2c>)
 80021cc:	fb82 1203 	smull	r1, r2, r2, r3
 80021d0:	1092      	asrs	r2, r2, #2
 80021d2:	17db      	asrs	r3, r3, #31
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <setTimer3+0x30>)
 80021d8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <setTimer3+0x34>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	66666667 	.word	0x66666667
 80021f0:	20000148 	.word	0x20000148
 80021f4:	2000013c 	.word	0x2000013c

080021f8 <timer_run>:

void timer_run(){
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <timer_run+0x6c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	dd0b      	ble.n	800221c <timer_run+0x24>
		timer1_counter--;
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <timer_run+0x6c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3b01      	subs	r3, #1
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <timer_run+0x6c>)
 800220c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <timer_run+0x6c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <timer_run+0x24>
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <timer_run+0x70>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <timer_run+0x74>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	dd0b      	ble.n	800223c <timer_run+0x44>
		timer2_counter--;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <timer_run+0x74>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3b01      	subs	r3, #1
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <timer_run+0x74>)
 800222c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <timer_run+0x74>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <timer_run+0x44>
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <timer_run+0x78>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <timer_run+0x7c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	dd0b      	ble.n	800225c <timer_run+0x64>
		timer3_counter--;
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <timer_run+0x7c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <timer_run+0x7c>)
 800224c:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <timer_run+0x7c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <timer_run+0x64>
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <timer_run+0x80>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
	}
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000140 	.word	0x20000140
 8002268:	20000134 	.word	0x20000134
 800226c:	20000144 	.word	0x20000144
 8002270:	20000138 	.word	0x20000138
 8002274:	20000148 	.word	0x20000148
 8002278:	2000013c 	.word	0x2000013c

0800227c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8002284:	f7ff fcb6 	bl	8001bf4 <SCH_Update>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <setTraffic1Red>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "traffic.h"

void setTraffic1Red(){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <setTraffic1Red+0x20>)
 800229c:	f000 fdc9 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2108      	movs	r1, #8
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <setTraffic1Red+0x24>)
 80022a6:	f000 fdc4 	bl	8002e32 <HAL_GPIO_WritePin>

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40010c00 	.word	0x40010c00

080022b8 <setTraffic2Red>:

void setTraffic2Red(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	2120      	movs	r1, #32
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <setTraffic2Red+0x1c>)
 80022c2:	f000 fdb6 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2110      	movs	r1, #16
 80022ca:	4802      	ldr	r0, [pc, #8]	; (80022d4 <setTraffic2Red+0x1c>)
 80022cc:	f000 fdb1 	bl	8002e32 <HAL_GPIO_WritePin>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40010c00 	.word	0x40010c00

080022d8 <setTraffic1Green>:

void setTraffic1Green(){
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <setTraffic1Green+0x20>)
 80022e4:	f000 fda5 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	2108      	movs	r1, #8
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <setTraffic1Green+0x24>)
 80022ee:	f000 fda0 	bl	8002e32 <HAL_GPIO_WritePin>
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40010c00 	.word	0x40010c00

08002300 <clearTraffic1>:

void clearTraffic1(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <clearTraffic1+0x20>)
 800230c:	f000 fd91 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	2108      	movs	r1, #8
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <clearTraffic1+0x24>)
 8002316:	f000 fd8c 	bl	8002e32 <HAL_GPIO_WritePin>
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00

08002328 <setTraffic2Green>:


void setTraffic2Green(){
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2120      	movs	r1, #32
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <setTraffic2Green+0x1c>)
 8002332:	f000 fd7e 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2110      	movs	r1, #16
 800233a:	4802      	ldr	r0, [pc, #8]	; (8002344 <setTraffic2Green+0x1c>)
 800233c:	f000 fd79 	bl	8002e32 <HAL_GPIO_WritePin>
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40010c00 	.word	0x40010c00

08002348 <setTraffic1Yellow>:

void setTraffic1Yellow(){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <setTraffic1Yellow+0x20>)
 8002354:	f000 fd6d 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	2108      	movs	r1, #8
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <setTraffic1Yellow+0x24>)
 800235e:	f000 fd68 	bl	8002e32 <HAL_GPIO_WritePin>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40010800 	.word	0x40010800
 800236c:	40010c00 	.word	0x40010c00

08002370 <setTraffic2Yellow>:

void setTraffic2Yellow(){
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	2120      	movs	r1, #32
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <setTraffic2Yellow+0x1c>)
 800237a:	f000 fd5a 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800237e:	2201      	movs	r2, #1
 8002380:	2110      	movs	r1, #16
 8002382:	4802      	ldr	r0, [pc, #8]	; (800238c <setTraffic2Yellow+0x1c>)
 8002384:	f000 fd55 	bl	8002e32 <HAL_GPIO_WritePin>
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40010c00 	.word	0x40010c00

08002390 <clearTraffic2>:

void clearTraffic2(){
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	2120      	movs	r1, #32
 8002398:	4804      	ldr	r0, [pc, #16]	; (80023ac <clearTraffic2+0x1c>)
 800239a:	f000 fd4a 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	2110      	movs	r1, #16
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <clearTraffic2+0x1c>)
 80023a4:	f000 fd45 	bl	8002e32 <HAL_GPIO_WritePin>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40010c00 	.word	0x40010c00

080023b0 <setPedestrianRed>:

void setPedestrianRed(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <setPedestrianRed+0x20>)
 80023bc:	f000 fd39 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c6:	4803      	ldr	r0, [pc, #12]	; (80023d4 <setPedestrianRed+0x24>)
 80023c8:	f000 fd33 	bl	8002e32 <HAL_GPIO_WritePin>
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40010c00 	.word	0x40010c00
 80023d4:	40010800 	.word	0x40010800

080023d8 <setPedestrianGreen>:

void setPedestrianGreen(){
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <setPedestrianGreen+0x20>)
 80023e4:	f000 fd25 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <setPedestrianGreen+0x24>)
 80023f0:	f000 fd1f 	bl	8002e32 <HAL_GPIO_WritePin>
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40010c00 	.word	0x40010c00
 80023fc:	40010800 	.word	0x40010800

08002400 <clearPedestrian>:
void setPedestrianYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void clearPedestrian(){
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <clearPedestrian+0x20>)
 800240c:	f000 fd11 	bl	8002e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <clearPedestrian+0x24>)
 8002418:	f000 fd0b 	bl	8002e32 <HAL_GPIO_WritePin>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40010c00 	.word	0x40010c00
 8002424:	40010800 	.word	0x40010800

08002428 <toggleTraffic1Red>:

void toggleTraffic1Red(){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 800242c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <toggleTraffic1Red+0x14>)
 8002432:	f000 fd16 	bl	8002e62 <HAL_GPIO_TogglePin>
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40010800 	.word	0x40010800

08002440 <toggleTraffic2Red>:

void toggleTraffic2Red(){
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8002444:	2120      	movs	r1, #32
 8002446:	4802      	ldr	r0, [pc, #8]	; (8002450 <toggleTraffic2Red+0x10>)
 8002448:	f000 fd0b 	bl	8002e62 <HAL_GPIO_TogglePin>
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40010c00 	.word	0x40010c00

08002454 <toggleTraffic1Green>:

void toggleTraffic1Green(){
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8002458:	2108      	movs	r1, #8
 800245a:	4802      	ldr	r0, [pc, #8]	; (8002464 <toggleTraffic1Green+0x10>)
 800245c:	f000 fd01 	bl	8002e62 <HAL_GPIO_TogglePin>
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010c00 	.word	0x40010c00

08002468 <toggleTraffic2Green>:

void toggleTraffic2Green(){
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 800246c:	2110      	movs	r1, #16
 800246e:	4802      	ldr	r0, [pc, #8]	; (8002478 <toggleTraffic2Green+0x10>)
 8002470:	f000 fcf7 	bl	8002e62 <HAL_GPIO_TogglePin>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40010c00 	.word	0x40010c00

0800247c <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8002480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002484:	4804      	ldr	r0, [pc, #16]	; (8002498 <toggleTraffic1Yellow+0x1c>)
 8002486:	f000 fcec 	bl	8002e62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 800248a:	2108      	movs	r1, #8
 800248c:	4803      	ldr	r0, [pc, #12]	; (800249c <toggleTraffic1Yellow+0x20>)
 800248e:	f000 fce8 	bl	8002e62 <HAL_GPIO_TogglePin>
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40010800 	.word	0x40010800
 800249c:	40010c00 	.word	0x40010c00

080024a0 <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 80024a4:	2120      	movs	r1, #32
 80024a6:	4804      	ldr	r0, [pc, #16]	; (80024b8 <toggleTraffic2Yellow+0x18>)
 80024a8:	f000 fcdb 	bl	8002e62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 80024ac:	2110      	movs	r1, #16
 80024ae:	4802      	ldr	r0, [pc, #8]	; (80024b8 <toggleTraffic2Yellow+0x18>)
 80024b0:	f000 fcd7 	bl	8002e62 <HAL_GPIO_TogglePin>
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40010c00 	.word	0x40010c00

080024bc <acceptTraffic1Red>:

void acceptTraffic1Red(){
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
	max_red1 = counter;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <acceptTraffic1Red+0x34>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <acceptTraffic1Red+0x38>)
 80024c6:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <acceptTraffic1Red+0x38>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <acceptTraffic1Red+0x3c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dc02      	bgt.n	80024da <acceptTraffic1Red+0x1e>
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <acceptTraffic1Red+0x3c>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <acceptTraffic1Red+0x38>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <acceptTraffic1Red+0x3c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4a05      	ldr	r2, [pc, #20]	; (80024fc <acceptTraffic1Red+0x40>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	20000120 	.word	0x20000120
 80024f4:	20000010 	.word	0x20000010
 80024f8:	20000024 	.word	0x20000024
 80024fc:	20000020 	.word	0x20000020

08002500 <acceptTraffic2Red>:

void acceptTraffic2Red(){
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
	max_red2 = counter;
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <acceptTraffic2Red+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <acceptTraffic2Red+0x38>)
 800250a:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <acceptTraffic2Red+0x38>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <acceptTraffic2Red+0x3c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	dc02      	bgt.n	800251e <acceptTraffic2Red+0x1e>
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <acceptTraffic2Red+0x3c>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <acceptTraffic2Red+0x38>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <acceptTraffic2Red+0x3c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <acceptTraffic2Red+0x40>)
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	20000120 	.word	0x20000120
 8002538:	2000001c 	.word	0x2000001c
 800253c:	20000018 	.word	0x20000018
 8002540:	20000014 	.word	0x20000014

08002544 <acceptTraffic1Green>:

void acceptTraffic1Green(){
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	max_green1 = counter;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <acceptTraffic1Green+0x24>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <acceptTraffic1Green+0x28>)
 800254e:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <acceptTraffic1Green+0x2c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <acceptTraffic1Green+0x28>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	4a06      	ldr	r2, [pc, #24]	; (8002574 <acceptTraffic1Green+0x30>)
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000120 	.word	0x20000120
 800256c:	20000014 	.word	0x20000014
 8002570:	2000001c 	.word	0x2000001c
 8002574:	20000018 	.word	0x20000018

08002578 <acceptTraffic2Green>:

void acceptTraffic2Green(){
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
	max_green2 = counter;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <acceptTraffic2Green+0x24>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <acceptTraffic2Green+0x28>)
 8002582:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <acceptTraffic2Green+0x2c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <acceptTraffic2Green+0x28>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <acceptTraffic2Green+0x30>)
 8002590:	6013      	str	r3, [r2, #0]
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000120 	.word	0x20000120
 80025a0:	20000020 	.word	0x20000020
 80025a4:	20000010 	.word	0x20000010
 80025a8:	20000024 	.word	0x20000024

080025ac <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <acceptTraffic1Yellow+0x24>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <acceptTraffic1Yellow+0x28>)
 80025b6:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <acceptTraffic1Yellow+0x2c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <acceptTraffic1Yellow+0x28>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	4a06      	ldr	r2, [pc, #24]	; (80025dc <acceptTraffic1Yellow+0x30>)
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000120 	.word	0x20000120
 80025d4:	20000018 	.word	0x20000018
 80025d8:	2000001c 	.word	0x2000001c
 80025dc:	20000014 	.word	0x20000014

080025e0 <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <acceptTraffic2Yellow+0x24>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <acceptTraffic2Yellow+0x28>)
 80025ea:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <acceptTraffic2Yellow+0x2c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <acceptTraffic2Yellow+0x28>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	4a06      	ldr	r2, [pc, #24]	; (8002610 <acceptTraffic2Yellow+0x30>)
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000120 	.word	0x20000120
 8002608:	20000024 	.word	0x20000024
 800260c:	20000010 	.word	0x20000010
 8002610:	20000020 	.word	0x20000020

08002614 <displayCounter>:

void displayCounter(){
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#", counter/10, counter%10);
 8002618:	4b10      	ldr	r3, [pc, #64]	; (800265c <displayCounter+0x48>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a10      	ldr	r2, [pc, #64]	; (8002660 <displayCounter+0x4c>)
 800261e:	fb82 1203 	smull	r1, r2, r2, r3
 8002622:	1092      	asrs	r2, r2, #2
 8002624:	17db      	asrs	r3, r3, #31
 8002626:	1ad0      	subs	r0, r2, r3
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <displayCounter+0x48>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <displayCounter+0x4c>)
 800262e:	fb83 1302 	smull	r1, r3, r3, r2
 8002632:	1099      	asrs	r1, r3, #2
 8002634:	17d3      	asrs	r3, r2, #31
 8002636:	1ac9      	subs	r1, r1, r3
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	1ad1      	subs	r1, r2, r3
 8002642:	460b      	mov	r3, r1
 8002644:	4602      	mov	r2, r0
 8002646:	4907      	ldr	r1, [pc, #28]	; (8002664 <displayCounter+0x50>)
 8002648:	4807      	ldr	r0, [pc, #28]	; (8002668 <displayCounter+0x54>)
 800264a:	f002 fc0d 	bl	8004e68 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 9);
 800264e:	2209      	movs	r2, #9
 8002650:	4905      	ldr	r1, [pc, #20]	; (8002668 <displayCounter+0x54>)
 8002652:	4806      	ldr	r0, [pc, #24]	; (800266c <displayCounter+0x58>)
 8002654:	f001 ffe3 	bl	800461e <HAL_UART_Transmit_IT>
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000120 	.word	0x20000120
 8002660:	66666667 	.word	0x66666667
 8002664:	080056f4 	.word	0x080056f4
 8002668:	20000124 	.word	0x20000124
 800266c:	200001e4 	.word	0x200001e4

08002670 <Reset_Handler>:
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <LoopFillZerobss+0x12>)
 8002672:	490d      	ldr	r1, [pc, #52]	; (80026a8 <LoopFillZerobss+0x16>)
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <LoopFillZerobss+0x1a>)
 8002676:	2300      	movs	r3, #0
 8002678:	e002      	b.n	8002680 <LoopCopyDataInit>

0800267a <CopyDataInit>:
 800267a:	58d4      	ldr	r4, [r2, r3]
 800267c:	50c4      	str	r4, [r0, r3]
 800267e:	3304      	adds	r3, #4

08002680 <LoopCopyDataInit>:
 8002680:	18c4      	adds	r4, r0, r3
 8002682:	428c      	cmp	r4, r1
 8002684:	d3f9      	bcc.n	800267a <CopyDataInit>
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <LoopFillZerobss+0x1e>)
 8002688:	4c0a      	ldr	r4, [pc, #40]	; (80026b4 <LoopFillZerobss+0x22>)
 800268a:	2300      	movs	r3, #0
 800268c:	e001      	b.n	8002692 <LoopFillZerobss>

0800268e <FillZerobss>:
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	3204      	adds	r2, #4

08002692 <LoopFillZerobss>:
 8002692:	42a2      	cmp	r2, r4
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>
 8002696:	f7ff fd55 	bl	8002144 <SystemInit>
 800269a:	f002 fbb9 	bl	8004e10 <__libc_init_array>
 800269e:	f7ff f8a1 	bl	80017e4 <main>
 80026a2:	4770      	bx	lr
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000098 	.word	0x20000098
 80026ac:	08005764 	.word	0x08005764
 80026b0:	20000098 	.word	0x20000098
 80026b4:	200003cc 	.word	0x200003cc

080026b8 <ADC1_2_IRQHandler>:
 80026b8:	e7fe      	b.n	80026b8 <ADC1_2_IRQHandler>
	...

080026bc <HAL_Init>:
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_Init+0x28>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <HAL_Init+0x28>)
 80026c6:	f043 0310 	orr.w	r3, r3, #16
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	2003      	movs	r0, #3
 80026ce:	f000 f923 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>
 80026d2:	200f      	movs	r0, #15
 80026d4:	f000 f808 	bl	80026e8 <HAL_InitTick>
 80026d8:	f7ff fbd4 	bl	8001e84 <HAL_MspInit>
 80026dc:	2300      	movs	r3, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40022000 	.word	0x40022000

080026e8 <HAL_InitTick>:
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_InitTick+0x54>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x58>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f93b 	bl	8002982 <HAL_SYSTICK_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_InitTick+0x2e>
 8002712:	2301      	movs	r3, #1
 8002714:	e00e      	b.n	8002734 <HAL_InitTick+0x4c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d80a      	bhi.n	8002732 <HAL_InitTick+0x4a>
 800271c:	2200      	movs	r2, #0
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f000 f903 	bl	800292e <HAL_NVIC_SetPriority>
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_InitTick+0x5c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_InitTick+0x4c>
 8002732:	2301      	movs	r3, #1
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000028 	.word	0x20000028
 8002740:	20000030 	.word	0x20000030
 8002744:	2000002c 	.word	0x2000002c

08002748 <HAL_IncTick>:
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_IncTick+0x1c>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_IncTick+0x20>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a03      	ldr	r2, [pc, #12]	; (8002768 <HAL_IncTick+0x20>)
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	20000030 	.word	0x20000030
 8002768:	200003b8 	.word	0x200003b8

0800276c <HAL_GetTick>:
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
 8002770:	4b02      	ldr	r3, [pc, #8]	; (800277c <HAL_GetTick+0x10>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	200003b8 	.word	0x200003b8

08002780 <__NVIC_SetPriorityGrouping>:
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60d3      	str	r3, [r2, #12]
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_GetPriorityGrouping>:
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_EnableIRQ>:
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db0b      	blt.n	800280e <__NVIC_EnableIRQ+0x2a>
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4906      	ldr	r1, [pc, #24]	; (8002818 <__NVIC_EnableIRQ+0x34>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	; (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
 80028c8:	4313      	orrs	r3, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <SysTick_Config>:
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff90 	bl	800281c <__NVIC_SetPriority>
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	2300      	movs	r3, #0
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff2d 	bl	8002780 <__NVIC_SetPriorityGrouping>
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f7ff ff42 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff90 	bl	8002870 <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5f 	bl	800281c <__NVIC_SetPriority>
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff35 	bl	80027e4 <__NVIC_EnableIRQ>
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_DMA_Abort>:
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d008      	beq.n	80029c2 <HAL_DMA_Abort+0x28>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2204      	movs	r2, #4
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2020 	strb.w	r2, [r3, #32]
 80029be:	2301      	movs	r3, #1
 80029c0:	e020      	b.n	8002a04 <HAL_DMA_Abort+0x6a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 020e 	bic.w	r2, r2, #14
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_DMA_Abort_IT>:
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d005      	beq.n	8002a32 <HAL_DMA_Abort_IT+0x22>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e051      	b.n	8002ad6 <HAL_DMA_Abort_IT+0xc6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 020e 	bic.w	r2, r2, #14
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <HAL_DMA_Abort_IT+0xd0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d029      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0xa0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <HAL_DMA_Abort_IT+0xd4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <HAL_DMA_Abort_IT+0x9c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ae8 <HAL_DMA_Abort_IT+0xd8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01a      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x96>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_DMA_Abort_IT+0xdc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d012      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x90>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_DMA_Abort_IT+0xe0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00a      	beq.n	8002a9a <HAL_DMA_Abort_IT+0x8a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <HAL_DMA_Abort_IT+0xe4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d102      	bne.n	8002a94 <HAL_DMA_Abort_IT+0x84>
 8002a8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a92:	e00e      	b.n	8002ab2 <HAL_DMA_Abort_IT+0xa2>
 8002a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a98:	e00b      	b.n	8002ab2 <HAL_DMA_Abort_IT+0xa2>
 8002a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a9e:	e008      	b.n	8002ab2 <HAL_DMA_Abort_IT+0xa2>
 8002aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa4:	e005      	b.n	8002ab2 <HAL_DMA_Abort_IT+0xa2>
 8002aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aaa:	e002      	b.n	8002ab2 <HAL_DMA_Abort_IT+0xa2>
 8002aac:	2310      	movs	r3, #16
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_Abort_IT+0xa2>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_DMA_Abort_IT+0xe8>)
 8002ab4:	6053      	str	r3, [r2, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2020 	strb.w	r2, [r3, #32]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0xc6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40020008 	.word	0x40020008
 8002ae4:	4002001c 	.word	0x4002001c
 8002ae8:	40020030 	.word	0x40020030
 8002aec:	40020044 	.word	0x40020044
 8002af0:	40020058 	.word	0x40020058
 8002af4:	4002006c 	.word	0x4002006c
 8002af8:	40020000 	.word	0x40020000

08002afc <HAL_GPIO_Init>:
 8002afc:	b480      	push	{r7}
 8002afe:	b08b      	sub	sp, #44	; 0x2c
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	e169      	b.n	8002de4 <HAL_GPIO_Init+0x2e8>
 8002b10:	2201      	movs	r2, #1
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f040 8158 	bne.w	8002dde <HAL_GPIO_Init+0x2e2>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4a9a      	ldr	r2, [pc, #616]	; (8002d9c <HAL_GPIO_Init+0x2a0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d05e      	beq.n	8002bf6 <HAL_GPIO_Init+0xfa>
 8002b38:	4a98      	ldr	r2, [pc, #608]	; (8002d9c <HAL_GPIO_Init+0x2a0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d875      	bhi.n	8002c2a <HAL_GPIO_Init+0x12e>
 8002b3e:	4a98      	ldr	r2, [pc, #608]	; (8002da0 <HAL_GPIO_Init+0x2a4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d058      	beq.n	8002bf6 <HAL_GPIO_Init+0xfa>
 8002b44:	4a96      	ldr	r2, [pc, #600]	; (8002da0 <HAL_GPIO_Init+0x2a4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d86f      	bhi.n	8002c2a <HAL_GPIO_Init+0x12e>
 8002b4a:	4a96      	ldr	r2, [pc, #600]	; (8002da4 <HAL_GPIO_Init+0x2a8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d052      	beq.n	8002bf6 <HAL_GPIO_Init+0xfa>
 8002b50:	4a94      	ldr	r2, [pc, #592]	; (8002da4 <HAL_GPIO_Init+0x2a8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d869      	bhi.n	8002c2a <HAL_GPIO_Init+0x12e>
 8002b56:	4a94      	ldr	r2, [pc, #592]	; (8002da8 <HAL_GPIO_Init+0x2ac>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d04c      	beq.n	8002bf6 <HAL_GPIO_Init+0xfa>
 8002b5c:	4a92      	ldr	r2, [pc, #584]	; (8002da8 <HAL_GPIO_Init+0x2ac>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d863      	bhi.n	8002c2a <HAL_GPIO_Init+0x12e>
 8002b62:	4a92      	ldr	r2, [pc, #584]	; (8002dac <HAL_GPIO_Init+0x2b0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d046      	beq.n	8002bf6 <HAL_GPIO_Init+0xfa>
 8002b68:	4a90      	ldr	r2, [pc, #576]	; (8002dac <HAL_GPIO_Init+0x2b0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d85d      	bhi.n	8002c2a <HAL_GPIO_Init+0x12e>
 8002b6e:	2b12      	cmp	r3, #18
 8002b70:	d82a      	bhi.n	8002bc8 <HAL_GPIO_Init+0xcc>
 8002b72:	2b12      	cmp	r3, #18
 8002b74:	d859      	bhi.n	8002c2a <HAL_GPIO_Init+0x12e>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <HAL_GPIO_Init+0x80>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002bf7 	.word	0x08002bf7
 8002b80:	08002bd1 	.word	0x08002bd1
 8002b84:	08002be3 	.word	0x08002be3
 8002b88:	08002c25 	.word	0x08002c25
 8002b8c:	08002c2b 	.word	0x08002c2b
 8002b90:	08002c2b 	.word	0x08002c2b
 8002b94:	08002c2b 	.word	0x08002c2b
 8002b98:	08002c2b 	.word	0x08002c2b
 8002b9c:	08002c2b 	.word	0x08002c2b
 8002ba0:	08002c2b 	.word	0x08002c2b
 8002ba4:	08002c2b 	.word	0x08002c2b
 8002ba8:	08002c2b 	.word	0x08002c2b
 8002bac:	08002c2b 	.word	0x08002c2b
 8002bb0:	08002c2b 	.word	0x08002c2b
 8002bb4:	08002c2b 	.word	0x08002c2b
 8002bb8:	08002c2b 	.word	0x08002c2b
 8002bbc:	08002c2b 	.word	0x08002c2b
 8002bc0:	08002bd9 	.word	0x08002bd9
 8002bc4:	08002bed 	.word	0x08002bed
 8002bc8:	4a79      	ldr	r2, [pc, #484]	; (8002db0 <HAL_GPIO_Init+0x2b4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0xfa>
 8002bce:	e02c      	b.n	8002c2a <HAL_GPIO_Init+0x12e>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	e029      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	e024      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	3308      	adds	r3, #8
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	e01f      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	e01a      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_GPIO_Init+0x108>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	e013      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_GPIO_Init+0x11c>
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	611a      	str	r2, [r3, #16]
 8002c16:	e009      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002c18:	2308      	movs	r3, #8
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	e003      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x130>
 8002c2a:	bf00      	nop
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2bff      	cmp	r3, #255	; 0xff
 8002c30:	d801      	bhi.n	8002c36 <HAL_GPIO_Init+0x13a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	e001      	b.n	8002c3a <HAL_GPIO_Init+0x13e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2bff      	cmp	r3, #255	; 0xff
 8002c40:	d802      	bhi.n	8002c48 <HAL_GPIO_Init+0x14c>
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	e002      	b.n	8002c4e <HAL_GPIO_Init+0x152>
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	3b08      	subs	r3, #8
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	210f      	movs	r1, #15
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	6a39      	ldr	r1, [r7, #32]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80b1 	beq.w	8002dde <HAL_GPIO_Init+0x2e2>
 8002c7c:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4a4c      	ldr	r2, [pc, #304]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6193      	str	r3, [r2, #24]
 8002c88:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_GPIO_Init+0x2b8>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a48      	ldr	r2, [pc, #288]	; (8002db8 <HAL_GPIO_Init+0x2bc>)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a40      	ldr	r2, [pc, #256]	; (8002dbc <HAL_GPIO_Init+0x2c0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_GPIO_Init+0x1ec>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <HAL_GPIO_Init+0x2c4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_GPIO_Init+0x1e8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3e      	ldr	r2, [pc, #248]	; (8002dc4 <HAL_GPIO_Init+0x2c8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <HAL_GPIO_Init+0x1e4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3d      	ldr	r2, [pc, #244]	; (8002dc8 <HAL_GPIO_Init+0x2cc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_GPIO_Init+0x1e0>
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e006      	b.n	8002cea <HAL_GPIO_Init+0x1ee>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	e004      	b.n	8002cea <HAL_GPIO_Init+0x1ee>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e002      	b.n	8002cea <HAL_GPIO_Init+0x1ee>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_GPIO_Init+0x1ee>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	f002 0203 	and.w	r2, r2, #3
 8002cf0:	0092      	lsls	r2, r2, #2
 8002cf2:	4093      	lsls	r3, r2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	492f      	ldr	r1, [pc, #188]	; (8002db8 <HAL_GPIO_Init+0x2bc>)
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002d14:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	492c      	ldr	r1, [pc, #176]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x234>
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	4928      	ldr	r1, [pc, #160]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x24e>
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4922      	ldr	r1, [pc, #136]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x25c>
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	491e      	ldr	r1, [pc, #120]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_GPIO_Init+0x276>
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4918      	ldr	r1, [pc, #96]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x284>
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	4914      	ldr	r1, [pc, #80]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d021      	beq.n	8002dd0 <HAL_GPIO_Init+0x2d4>
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
 8002d98:	e021      	b.n	8002dde <HAL_GPIO_Init+0x2e2>
 8002d9a:	bf00      	nop
 8002d9c:	10320000 	.word	0x10320000
 8002da0:	10310000 	.word	0x10310000
 8002da4:	10220000 	.word	0x10220000
 8002da8:	10210000 	.word	0x10210000
 8002dac:	10120000 	.word	0x10120000
 8002db0:	10110000 	.word	0x10110000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40010800 	.word	0x40010800
 8002dc0:	40010c00 	.word	0x40010c00
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	40010400 	.word	0x40010400
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_GPIO_Init+0x304>)
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	4909      	ldr	r1, [pc, #36]	; (8002e00 <HAL_GPIO_Init+0x304>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	3301      	adds	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f47f ae8e 	bne.w	8002b10 <HAL_GPIO_Init+0x14>
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	372c      	adds	r7, #44	; 0x2c
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	40010400 	.word	0x40010400

08002e04 <HAL_GPIO_ReadPin>:
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_GPIO_ReadPin+0x1e>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	e001      	b.n	8002e26 <HAL_GPIO_ReadPin+0x22>
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_GPIO_WritePin>:
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	707b      	strb	r3, [r7, #1]
 8002e42:	787b      	ldrb	r3, [r7, #1]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_WritePin+0x1e>
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	611a      	str	r2, [r3, #16]
 8002e4e:	e003      	b.n	8002e58 <HAL_GPIO_WritePin+0x26>
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	611a      	str	r2, [r3, #16]
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_GPIO_TogglePin>:
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	807b      	strh	r3, [r7, #2]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	887a      	ldrh	r2, [r7, #2]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	041a      	lsls	r2, r3, #16
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	400b      	ands	r3, r1
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_RCC_OscConfig>:
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e26c      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8087 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x12e>
 8002eb4:	4b92      	ldr	r3, [pc, #584]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d00c      	beq.n	8002eda <HAL_RCC_OscConfig+0x46>
 8002ec0:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d112      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x5e>
 8002ecc:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x5e>
 8002eda:	4b89      	ldr	r3, [pc, #548]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d06c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x12c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d168      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x12c>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e246      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x76>
 8002efc:	4b80      	ldr	r3, [pc, #512]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a7f      	ldr	r2, [pc, #508]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e02e      	b.n	8002f68 <HAL_RCC_OscConfig+0xd4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x98>
 8002f12:	4b7b      	ldr	r3, [pc, #492]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7a      	ldr	r2, [pc, #488]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b78      	ldr	r3, [pc, #480]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a77      	ldr	r2, [pc, #476]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xd4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0xbc>
 8002f36:	4b72      	ldr	r3, [pc, #456]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a71      	ldr	r2, [pc, #452]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6e      	ldr	r2, [pc, #440]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xd4>
 8002f50:	4b6b      	ldr	r3, [pc, #428]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6a      	ldr	r2, [pc, #424]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a67      	ldr	r2, [pc, #412]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0x104>
 8002f70:	f7ff fbfc 	bl	800276c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xf6>
 8002f78:	f7ff fbf8 	bl	800276c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xf6>
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1fa      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8002f8a:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xe4>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x12e>
 8002f98:	f7ff fbe8 	bl	800276c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x11e>
 8002fa0:	f7ff fbe4 	bl	800276c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x11e>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1e6      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8002fb2:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x10c>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x12e>
 8002fc0:	bf00      	nop
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_OscConfig+0x202>
 8002fce:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x15e>
 8002fda:	4b49      	ldr	r3, [pc, #292]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x18c>
 8002fe6:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <HAL_RCC_OscConfig+0x18c>
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x176>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x176>
 8003006:	2301      	movs	r3, #1
 8003008:	e1ba      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4939      	ldr	r1, [pc, #228]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
 800301e:	e03a      	b.n	8003096 <HAL_RCC_OscConfig+0x202>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_OscConfig+0x1d6>
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f7ff fb9d 	bl	800276c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x1b4>
 8003036:	f7ff fb99 	bl	800276c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x1b4>
 8003044:	2303      	movs	r3, #3
 8003046:	e19b      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x1a2>
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4927      	ldr	r1, [pc, #156]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x202>
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f7ff fb7c 	bl	800276c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1f6>
 8003078:	f7ff fb78 	bl	800276c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1f6>
 8003086:	2303      	movs	r3, #3
 8003088:	e17a      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1e4>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d03a      	beq.n	8003118 <HAL_RCC_OscConfig+0x284>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d019      	beq.n	80030de <HAL_RCC_OscConfig+0x24a>
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f7ff fb5c 	bl	800276c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x236>
 80030b8:	f7ff fb58 	bl	800276c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x236>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e15a      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x224>
 80030d6:	2001      	movs	r0, #1
 80030d8:	f000 fad8 	bl	800368c <RCC_Delay>
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x284>
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f7ff fb42 	bl	800276c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]
 80030ea:	e00f      	b.n	800310c <HAL_RCC_OscConfig+0x278>
 80030ec:	f7ff fb3e 	bl	800276c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d908      	bls.n	800310c <HAL_RCC_OscConfig+0x278>
 80030fa:	2303      	movs	r3, #3
 80030fc:	e140      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	42420000 	.word	0x42420000
 8003108:	42420480 	.word	0x42420480
 800310c:	4b9e      	ldr	r3, [pc, #632]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e9      	bne.n	80030ec <HAL_RCC_OscConfig+0x258>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a6 	beq.w	8003272 <HAL_RCC_OscConfig+0x3de>
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
 800312a:	4b97      	ldr	r3, [pc, #604]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_RCC_OscConfig+0x2be>
 8003136:	4b94      	ldr	r3, [pc, #592]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4a93      	ldr	r2, [pc, #588]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	61d3      	str	r3, [r2, #28]
 8003142:	4b91      	ldr	r3, [pc, #580]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
 8003152:	4b8e      	ldr	r3, [pc, #568]	; (800338c <HAL_RCC_OscConfig+0x4f8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d118      	bne.n	8003190 <HAL_RCC_OscConfig+0x2fc>
 800315e:	4b8b      	ldr	r3, [pc, #556]	; (800338c <HAL_RCC_OscConfig+0x4f8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a8a      	ldr	r2, [pc, #552]	; (800338c <HAL_RCC_OscConfig+0x4f8>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	f7ff faff 	bl	800276c <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x2f0>
 8003172:	f7ff fafb 	bl	800276c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x2f0>
 8003180:	2303      	movs	r3, #3
 8003182:	e0fd      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8003184:	4b81      	ldr	r3, [pc, #516]	; (800338c <HAL_RCC_OscConfig+0x4f8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x2de>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x312>
 8003198:	4b7b      	ldr	r3, [pc, #492]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4a7a      	ldr	r2, [pc, #488]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6213      	str	r3, [r2, #32]
 80031a4:	e02d      	b.n	8003202 <HAL_RCC_OscConfig+0x36e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x334>
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a75      	ldr	r2, [pc, #468]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	4b73      	ldr	r3, [pc, #460]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a72      	ldr	r2, [pc, #456]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	6213      	str	r3, [r2, #32]
 80031c6:	e01c      	b.n	8003202 <HAL_RCC_OscConfig+0x36e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d10c      	bne.n	80031ea <HAL_RCC_OscConfig+0x356>
 80031d0:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a6c      	ldr	r2, [pc, #432]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4a69      	ldr	r2, [pc, #420]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6213      	str	r3, [r2, #32]
 80031e8:	e00b      	b.n	8003202 <HAL_RCC_OscConfig+0x36e>
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a66      	ldr	r2, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	4b64      	ldr	r3, [pc, #400]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a63      	ldr	r2, [pc, #396]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d015      	beq.n	8003236 <HAL_RCC_OscConfig+0x3a2>
 800320a:	f7ff faaf 	bl	800276c <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]
 8003210:	e00a      	b.n	8003228 <HAL_RCC_OscConfig+0x394>
 8003212:	f7ff faab 	bl	800276c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x394>
 8003224:	2303      	movs	r3, #3
 8003226:	e0ab      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8003228:	4b57      	ldr	r3, [pc, #348]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ee      	beq.n	8003212 <HAL_RCC_OscConfig+0x37e>
 8003234:	e014      	b.n	8003260 <HAL_RCC_OscConfig+0x3cc>
 8003236:	f7ff fa99 	bl	800276c <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
 800323e:	f7ff fa95 	bl	800276c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3c0>
 8003250:	2303      	movs	r3, #3
 8003252:	e095      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8003254:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ee      	bne.n	800323e <HAL_RCC_OscConfig+0x3aa>
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <HAL_RCC_OscConfig+0x3de>
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003270:	61d3      	str	r3, [r2, #28]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8081 	beq.w	800337e <HAL_RCC_OscConfig+0x4ea>
 800327c:	4b42      	ldr	r3, [pc, #264]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d061      	beq.n	800334c <HAL_RCC_OscConfig+0x4b8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d146      	bne.n	800331e <HAL_RCC_OscConfig+0x48a>
 8003290:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCC_OscConfig+0x4fc>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	f7ff fa69 	bl	800276c <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x41c>
 800329e:	f7ff fa65 	bl	800276c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x41c>
 80032ac:	2303      	movs	r3, #3
 80032ae:	e067      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x40a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d108      	bne.n	80032d8 <HAL_RCC_OscConfig+0x444>
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	492d      	ldr	r1, [pc, #180]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a19      	ldr	r1, [r3, #32]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	430b      	orrs	r3, r1
 80032ea:	4927      	ldr	r1, [pc, #156]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_RCC_OscConfig+0x4fc>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f7ff fa39 	bl	800276c <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x47c>
 80032fe:	f7ff fa35 	bl	800276c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x47c>
 800330c:	2303      	movs	r3, #3
 800330e:	e037      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x46a>
 800331c:	e02f      	b.n	800337e <HAL_RCC_OscConfig+0x4ea>
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <HAL_RCC_OscConfig+0x4fc>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f7ff fa22 	bl	800276c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x4aa>
 800332c:	f7ff fa1e 	bl	800276c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x4aa>
 800333a:	2303      	movs	r3, #3
 800333c:	e020      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x498>
 800334a:	e018      	b.n	800337e <HAL_RCC_OscConfig+0x4ea>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_RCC_OscConfig+0x4c4>
 8003354:	2301      	movs	r3, #1
 8003356:	e013      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	429a      	cmp	r2, r3
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x4e6>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x4ea>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x4ec>
 800337e:	2300      	movs	r3, #0
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	42420060 	.word	0x42420060

08003394 <HAL_RCC_ClockConfig>:
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0d0      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x44>
 80033b6:	4b67      	ldr	r3, [pc, #412]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	4965      	ldr	r1, [pc, #404]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x44>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b8      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_ClockConfig+0x92>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x68>
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033fa:	6053      	str	r3, [r2, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x80>
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003412:	6053      	str	r3, [r2, #4]
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494d      	ldr	r1, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d040      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x120>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xb6>
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d115      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xce>
 8003452:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
 800345e:	2301      	movs	r3, #1
 8003460:	e073      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
 800346e:	2301      	movs	r3, #1
 8003470:	e06b      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
 8003472:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4936      	ldr	r1, [pc, #216]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
 8003484:	f7ff f972 	bl	800276c <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
 800348c:	f7ff f96e 	bl	800276c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
 800349e:	2303      	movs	r3, #3
 80034a0:	e053      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
 80034a2:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 020c 	and.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1eb      	bne.n	800348c <HAL_RCC_ClockConfig+0xf8>
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d210      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x150>
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4922      	ldr	r1, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x150>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e032      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x16e>
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x18e>
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	f000 f821 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1cc>)
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1d0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f8d0 	bl	80026e8 <HAL_InitTick>
 8003548:	2300      	movs	r3, #0
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40022000 	.word	0x40022000
 8003558:	40021000 	.word	0x40021000
 800355c:	08005710 	.word	0x08005710
 8003560:	20000028 	.word	0x20000028
 8003564:	2000002c 	.word	0x2000002c

08003568 <HAL_RCC_GetSysClockFreq>:
 8003568:	b490      	push	{r4, r7}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003570:	1d3c      	adds	r4, r7, #4
 8003572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003578:	f240 2301 	movw	r3, #513	; 0x201
 800357c:	803b      	strh	r3, [r7, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x40>
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x46>
 80035a6:	e02d      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x9c>
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	e02d      	b.n	800360a <HAL_RCC_GetSysClockFreq+0xa2>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	0c9b      	lsrs	r3, r3, #18
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ba:	4413      	add	r3, r2
 80035bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x8c>
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	0c5b      	lsrs	r3, r3, #17
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035da:	4413      	add	r3, r2
 80035dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e6:	fb02 f203 	mul.w	r2, r2, r3
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	e004      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x96>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	e002      	b.n	800360a <HAL_RCC_GetSysClockFreq+0xa2>
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	bf00      	nop
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	4618      	mov	r0, r3
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bc90      	pop	{r4, r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	08005700 	.word	0x08005700
 800361c:	40021000 	.word	0x40021000
 8003620:	007a1200 	.word	0x007a1200
 8003624:	003d0900 	.word	0x003d0900

08003628 <HAL_RCC_GetHCLKFreq>:
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <HAL_RCC_GetHCLKFreq+0x10>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	20000028 	.word	0x20000028

0800363c <HAL_RCC_GetPCLK1Freq>:
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
 8003640:	f7ff fff2 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	08005720 	.word	0x08005720

08003664 <HAL_RCC_GetPCLK2Freq>:
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
 8003668:	f7ff ffde 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	0adb      	lsrs	r3, r3, #11
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08005720 	.word	0x08005720

0800368c <RCC_Delay>:
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <RCC_Delay+0x34>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <RCC_Delay+0x38>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0a5b      	lsrs	r3, r3, #9
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	bf00      	nop
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	60fa      	str	r2, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f9      	bne.n	80036a8 <RCC_Delay+0x1c>
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	20000028 	.word	0x20000028
 80036c4:	10624dd3 	.word	0x10624dd3

080036c8 <HAL_TIM_Base_Init>:
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_Base_Init+0x12>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e041      	b.n	800375e <HAL_TIM_Base_Init+0x96>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_TIM_Base_Init+0x2c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe fbfa 	bl	8001ee8 <HAL_TIM_Base_MspInit>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 fc28 	bl	8003f5c <TIM_Base_SetConfig>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800375c:	2300      	movs	r3, #0
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_TIM_Base_Start_IT>:
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d001      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x18>
 800377c:	2301      	movs	r3, #1
 800377e:	e03a      	b.n	80037f6 <HAL_TIM_Base_Start_IT+0x8e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_TIM_Base_Start_IT+0x98>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00e      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x58>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037aa:	d009      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x58>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_TIM_Base_Start_IT+0x9c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x58>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a13      	ldr	r2, [pc, #76]	; (8003808 <HAL_TIM_Base_Start_IT+0xa0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_TIM_Base_Start_IT+0x7c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d010      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x8c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e007      	b.n	80037f4 <HAL_TIM_Base_Start_IT+0x8c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	2300      	movs	r3, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800

0800380c <HAL_TIM_PWM_Init>:
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_TIM_PWM_Init+0x12>
 800381a:	2301      	movs	r3, #1
 800381c:	e041      	b.n	80038a2 <HAL_TIM_PWM_Init+0x96>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_TIM_PWM_Init+0x2c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f839 	bl	80038aa <HAL_TIM_PWM_MspInit>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f000 fb86 	bl	8003f5c <TIM_Base_SetConfig>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038a0:	2300      	movs	r3, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_TIM_PWM_MspInit>:
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_PWM_Start>:
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_TIM_PWM_Start+0x24>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e022      	b.n	8003926 <HAL_TIM_PWM_Start+0x6a>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d109      	bne.n	80038fa <HAL_TIM_PWM_Start+0x3e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e015      	b.n	8003926 <HAL_TIM_PWM_Start+0x6a>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d109      	bne.n	8003914 <HAL_TIM_PWM_Start+0x58>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e008      	b.n	8003926 <HAL_TIM_PWM_Start+0x6a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_TIM_PWM_Start+0x72>
 800392a:	2301      	movs	r3, #1
 800392c:	e05e      	b.n	80039ec <HAL_TIM_PWM_Start+0x130>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <HAL_TIM_PWM_Start+0x82>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393c:	e013      	b.n	8003966 <HAL_TIM_PWM_Start+0xaa>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d104      	bne.n	800394e <HAL_TIM_PWM_Start+0x92>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	e00b      	b.n	8003966 <HAL_TIM_PWM_Start+0xaa>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d104      	bne.n	800395e <HAL_TIM_PWM_Start+0xa2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395c:	e003      	b.n	8003966 <HAL_TIM_PWM_Start+0xaa>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2201      	movs	r2, #1
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fd74 	bl	800445c <TIM_CCxChannelCmd>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_TIM_PWM_Start+0x138>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d107      	bne.n	800398e <HAL_TIM_PWM_Start+0xd2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <HAL_TIM_PWM_Start+0x138>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00e      	beq.n	80039b6 <HAL_TIM_PWM_Start+0xfa>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d009      	beq.n	80039b6 <HAL_TIM_PWM_Start+0xfa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <HAL_TIM_PWM_Start+0x13c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_TIM_PWM_Start+0xfa>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a12      	ldr	r2, [pc, #72]	; (80039fc <HAL_TIM_PWM_Start+0x140>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d111      	bne.n	80039da <HAL_TIM_PWM_Start+0x11e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b06      	cmp	r3, #6
 80039c6:	d010      	beq.n	80039ea <HAL_TIM_PWM_Start+0x12e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e007      	b.n	80039ea <HAL_TIM_PWM_Start+0x12e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800

08003a00 <HAL_TIM_IRQHandler>:
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0202 	mvn.w	r2, #2
 8003a2c:	611a      	str	r2, [r3, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	771a      	strb	r2, [r3, #28]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x4a>
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fa6f 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x56>
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa62 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa71 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0204 	mvn.w	r2, #4
 8003a80:	611a      	str	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	771a      	strb	r2, [r3, #28]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x9e>
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa45 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0xaa>
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa38 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa47 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0208 	mvn.w	r2, #8
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	771a      	strb	r2, [r3, #28]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xf2>
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa1b 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xfe>
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa0e 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fa1d 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0210 	mvn.w	r2, #16
 8003b28:	611a      	str	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	771a      	strb	r2, [r3, #28]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x146>
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9f1 	bl	8003f26 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x152>
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9e4 	bl	8003f14 <HAL_TIM_OC_DelayElapsedCallback>
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9f3 	bl	8003f38 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0201 	mvn.w	r2, #1
 8003b7c:	611a      	str	r2, [r3, #16]
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe fb7c 	bl	800227c <HAL_TIM_PeriodElapsedCallback>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fce1 	bl	8004572 <HAL_TIMEx_BreakCallback>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1dc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1dc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd4:	611a      	str	r2, [r3, #16]
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9b7 	bl	8003f4a <HAL_TIM_TriggerCallback>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x208>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x208>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0220 	mvn.w	r2, #32
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fcac 	bl	8004560 <HAL_TIMEx_CommutCallback>
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_TIM_PWM_ConfigChannel>:
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0ac      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	f200 809f 	bhi.w	8003d78 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003d79 	.word	0x08003d79
 8003c48:	08003d79 	.word	0x08003d79
 8003c4c:	08003d79 	.word	0x08003d79
 8003c50:	08003cb5 	.word	0x08003cb5
 8003c54:	08003d79 	.word	0x08003d79
 8003c58:	08003d79 	.word	0x08003d79
 8003c5c:	08003d79 	.word	0x08003d79
 8003c60:	08003cf7 	.word	0x08003cf7
 8003c64:	08003d79 	.word	0x08003d79
 8003c68:	08003d79 	.word	0x08003d79
 8003c6c:	08003d79 	.word	0x08003d79
 8003c70:	08003d37 	.word	0x08003d37
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f9d0 	bl	8004020 <TIM_OC1_SetConfig>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	619a      	str	r2, [r3, #24]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	619a      	str	r2, [r3, #24]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	619a      	str	r2, [r3, #24]
 8003cb2:	e062      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa16 	bl	80040ec <TIM_OC2_SetConfig>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cce:	619a      	str	r2, [r3, #24]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cde:	619a      	str	r2, [r3, #24]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
 8003cf4:	e041      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fa5f 	bl	80041c0 <TIM_OC3_SetConfig>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0208 	orr.w	r2, r2, #8
 8003d10:	61da      	str	r2, [r3, #28]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0204 	bic.w	r2, r2, #4
 8003d20:	61da      	str	r2, [r3, #28]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69d9      	ldr	r1, [r3, #28]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
 8003d34:	e021      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 faa9 	bl	8004294 <TIM_OC4_SetConfig>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d50:	61da      	str	r2, [r3, #28]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d60:	61da      	str	r2, [r3, #28]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	021a      	lsls	r2, r3, #8
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	61da      	str	r2, [r3, #28]
 8003d76:	e000      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003d78:	bf00      	nop
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d82:	2300      	movs	r3, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_ConfigClockSource>:
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIM_ConfigClockSource+0x18>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0b3      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x180>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d03e      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0xd0>
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de2:	f200 8087 	bhi.w	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	f000 8085 	beq.w	8003ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df2:	d87f      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003df4:	2b70      	cmp	r3, #112	; 0x70
 8003df6:	d01a      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xa2>
 8003df8:	2b70      	cmp	r3, #112	; 0x70
 8003dfa:	d87b      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d050      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x116>
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d877      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003e04:	2b50      	cmp	r3, #80	; 0x50
 8003e06:	d03c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0xf6>
 8003e08:	2b50      	cmp	r3, #80	; 0x50
 8003e0a:	d873      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d058      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x136>
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d86f      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003e14:	2b30      	cmp	r3, #48	; 0x30
 8003e16:	d064      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x156>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d86b      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d060      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x156>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d867      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d05c      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x156>
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d05a      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x156>
 8003e2c:	e062      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x168>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6899      	ldr	r1, [r3, #8]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f000 faee 	bl	800441e <TIM_ETR_SetConfig>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	e04e      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x16e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f000 fad7 	bl	800441e <TIM_ETR_SetConfig>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e03b      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x16e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 fa4e 	bl	8004330 <TIM_TI1_ConfigInputStage>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2150      	movs	r1, #80	; 0x50
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 faa5 	bl	80043ea <TIM_ITRx_SetConfig>
 8003ea0:	e02b      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x16e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f000 fa6c 	bl	800438c <TIM_TI2_ConfigInputStage>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2160      	movs	r1, #96	; 0x60
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa95 	bl	80043ea <TIM_ITRx_SetConfig>
 8003ec0:	e01b      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x16e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f000 fa2e 	bl	8004330 <TIM_TI1_ConfigInputStage>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fa85 	bl	80043ea <TIM_ITRx_SetConfig>
 8003ee0:	e00b      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x16e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f000 fa7c 	bl	80043ea <TIM_ITRx_SetConfig>
 8003ef2:	e002      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x16e>
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x16e>
 8003ef8:	bf00      	nop
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_OC_DelayElapsedCallback>:
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <HAL_TIM_IC_CaptureCallback>:
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIM_TriggerCallback>:
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <TIM_Base_SetConfig>:
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a29      	ldr	r2, [pc, #164]	; (8004014 <TIM_Base_SetConfig+0xb8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x30>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x30>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a26      	ldr	r2, [pc, #152]	; (8004018 <TIM_Base_SetConfig+0xbc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x30>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a25      	ldr	r2, [pc, #148]	; (800401c <TIM_Base_SetConfig+0xc0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x42>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <TIM_Base_SetConfig+0xb8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <TIM_Base_SetConfig+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d007      	beq.n	8003fbe <TIM_Base_SetConfig+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	; (8004018 <TIM_Base_SetConfig+0xbc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_Base_SetConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	; (800401c <TIM_Base_SetConfig+0xc0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d108      	bne.n	8003fd0 <TIM_Base_SetConfig+0x74>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a07      	ldr	r2, [pc, #28]	; (8004014 <TIM_Base_SetConfig+0xb8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d103      	bne.n	8004004 <TIM_Base_SetConfig+0xa8>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800

08004020 <TIM_OC1_SetConfig>:
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0201 	bic.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 0302 	bic.w	r3, r3, #2
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <TIM_OC1_SetConfig+0xc8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10c      	bne.n	8004096 <TIM_OC1_SetConfig+0x76>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0308 	bic.w	r3, r3, #8
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <TIM_OC1_SetConfig+0xc8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d111      	bne.n	80040c2 <TIM_OC1_SetConfig+0xa2>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	619a      	str	r2, [r3, #24]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00

080040ec <TIM_OC2_SetConfig>:
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0210 	bic.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0320 	bic.w	r3, r3, #32
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <TIM_OC2_SetConfig+0xd0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d10d      	bne.n	8004168 <TIM_OC2_SetConfig+0x7c>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a14      	ldr	r2, [pc, #80]	; (80041bc <TIM_OC2_SetConfig+0xd0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d113      	bne.n	8004198 <TIM_OC2_SetConfig+0xac>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	619a      	str	r2, [r3, #24]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	621a      	str	r2, [r3, #32]
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	40012c00 	.word	0x40012c00

080041c0 <TIM_OC3_SetConfig>:
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <TIM_OC3_SetConfig+0xd0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d10d      	bne.n	800423a <TIM_OC3_SetConfig+0x7a>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <TIM_OC3_SetConfig+0xd0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d113      	bne.n	800426a <TIM_OC3_SetConfig+0xaa>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	61da      	str	r2, [r3, #28]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	63da      	str	r2, [r3, #60]	; 0x3c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	621a      	str	r2, [r3, #32]
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40012c00 	.word	0x40012c00

08004294 <TIM_OC4_SetConfig>:
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	621a      	str	r2, [r3, #32]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	031b      	lsls	r3, r3, #12
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a0f      	ldr	r2, [pc, #60]	; (800432c <TIM_OC4_SetConfig+0x98>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d109      	bne.n	8004308 <TIM_OC4_SetConfig+0x74>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	61da      	str	r2, [r3, #28]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	621a      	str	r2, [r3, #32]
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00

08004330 <TIM_TI1_ConfigInputStage>:
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <TIM_TI2_ConfigInputStage>:
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f023 0210 	bic.w	r2, r3, #16
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	621a      	str	r2, [r3, #32]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	031b      	lsls	r3, r3, #12
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	619a      	str	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	621a      	str	r2, [r3, #32]
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <TIM_ETR_SetConfig>:
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	021a      	lsls	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4313      	orrs	r3, r2
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	609a      	str	r2, [r3, #8]
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <TIM_CCxChannelCmd>:
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2201      	movs	r2, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1a      	ldr	r2, [r3, #32]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	43db      	mvns	r3, r3
 800447e:	401a      	ands	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	621a      	str	r2, [r3, #32]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1a      	ldr	r2, [r3, #32]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_MasterConfigSynchronization>:
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e046      	b.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d009      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a10      	ldr	r2, [pc, #64]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10c      	bne.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4313      	orrs	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004548:	2300      	movs	r3, #0
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800

08004560 <HAL_TIMEx_CommutCallback>:
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <HAL_TIMEx_BreakCallback>:
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <HAL_UART_Init>:
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
 8004592:	2301      	movs	r3, #1
 8004594:	e03f      	b.n	8004616 <HAL_UART_Init+0x92>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_Init+0x2c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fd06 	bl	8001fbc <HAL_UART_MspInit>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb8d 	bl	8004ce8 <UART_SetConfig>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045dc:	611a      	str	r2, [r3, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ec:	615a      	str	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004614:	2300      	movs	r3, #0
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_UART_Transmit_IT>:
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	4613      	mov	r3, r2
 800462a:	80fb      	strh	r3, [r7, #6]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b20      	cmp	r3, #32
 8004636:	d130      	bne.n	800469a <HAL_UART_Transmit_IT+0x7c>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Transmit_IT+0x26>
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_UART_Transmit_IT+0x2a>
 8004644:	2301      	movs	r3, #1
 8004646:	e029      	b.n	800469c <HAL_UART_Transmit_IT+0x7e>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_UART_Transmit_IT+0x38>
 8004652:	2302      	movs	r3, #2
 8004654:	e022      	b.n	800469c <HAL_UART_Transmit_IT+0x7e>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	621a      	str	r2, [r3, #32]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	849a      	strh	r2, [r3, #36]	; 0x24
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	88fa      	ldrh	r2, [r7, #6]
 800466e:	84da      	strh	r2, [r3, #38]	; 0x26
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2221      	movs	r2, #33	; 0x21
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_UART_Transmit_IT+0x7e>
 800469a:	2302      	movs	r3, #2
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_UART_IRQHandler>:
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	623b      	str	r3, [r7, #32]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10d      	bne.n	80046fa <HAL_UART_IRQHandler+0x52>
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_UART_IRQHandler+0x52>
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_UART_IRQHandler+0x52>
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa4f 	bl	8004b96 <UART_Receive_IT>
 80046f8:	e17b      	b.n	80049f2 <HAL_UART_IRQHandler+0x34a>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80b1 	beq.w	8004864 <HAL_UART_IRQHandler+0x1bc>
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_UART_IRQHandler+0x70>
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80a6 	beq.w	8004864 <HAL_UART_IRQHandler+0x1bc>
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_UART_IRQHandler+0x90>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_UART_IRQHandler+0x90>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0201 	orr.w	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_UART_IRQHandler+0xb0>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_UART_IRQHandler+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f043 0202 	orr.w	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_UART_IRQHandler+0xd0>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_UART_IRQHandler+0xd0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f043 0204 	orr.w	r2, r3, #4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00f      	beq.n	80047a2 <HAL_UART_IRQHandler+0xfa>
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_UART_IRQHandler+0xee>
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0xfa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0208 	orr.w	r2, r3, #8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 811e 	beq.w	80049e8 <HAL_UART_IRQHandler+0x340>
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_UART_IRQHandler+0x11e>
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_UART_IRQHandler+0x11e>
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f9e8 	bl	8004b96 <UART_Receive_IT>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_UART_IRQHandler+0x146>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d031      	beq.n	8004852 <HAL_UART_IRQHandler+0x1aa>
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f92a 	bl	8004a48 <UART_EndRxTransfer>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <HAL_UART_IRQHandler+0x1a2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	615a      	str	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	2b00      	cmp	r3, #0
 8004818:	d013      	beq.n	8004842 <HAL_UART_IRQHandler+0x19a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	4a76      	ldr	r2, [pc, #472]	; (80049f8 <HAL_UART_IRQHandler+0x350>)
 8004820:	635a      	str	r2, [r3, #52]	; 0x34
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe f8f2 	bl	8002a10 <HAL_DMA_Abort_IT>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_UART_IRQHandler+0x1b8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800483c:	4610      	mov	r0, r2
 800483e:	4798      	blx	r3
 8004840:	e00e      	b.n	8004860 <HAL_UART_IRQHandler+0x1b8>
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8ec 	bl	8004a20 <HAL_UART_ErrorCallback>
 8004848:	e00a      	b.n	8004860 <HAL_UART_IRQHandler+0x1b8>
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f8e8 	bl	8004a20 <HAL_UART_ErrorCallback>
 8004850:	e006      	b.n	8004860 <HAL_UART_IRQHandler+0x1b8>
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8e4 	bl	8004a20 <HAL_UART_ErrorCallback>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
 800485e:	e0c3      	b.n	80049e8 <HAL_UART_IRQHandler+0x340>
 8004860:	bf00      	nop
 8004862:	e0c1      	b.n	80049e8 <HAL_UART_IRQHandler+0x340>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 80a1 	bne.w	80049b0 <HAL_UART_IRQHandler+0x308>
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 809b 	beq.w	80049b0 <HAL_UART_IRQHandler+0x308>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8095 	beq.w	80049b0 <HAL_UART_IRQHandler+0x308>
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d04e      	beq.n	8004948 <HAL_UART_IRQHandler+0x2a0>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	823b      	strh	r3, [r7, #16]
 80048b4:	8a3b      	ldrh	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8098 	beq.w	80049ec <HAL_UART_IRQHandler+0x344>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c0:	8a3a      	ldrh	r2, [r7, #16]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f080 8092 	bcs.w	80049ec <HAL_UART_IRQHandler+0x344>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8a3a      	ldrh	r2, [r7, #16]
 80048cc:	85da      	strh	r2, [r3, #46]	; 0x2e
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d02b      	beq.n	8004930 <HAL_UART_IRQHandler+0x288>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	615a      	str	r2, [r3, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	615a      	str	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0210 	bic.w	r2, r2, #16
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f835 	bl	800299a <HAL_DMA_Abort>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004938:	b29b      	uxth	r3, r3
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	b29b      	uxth	r3, r3
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f876 	bl	8004a32 <HAL_UARTEx_RxEventCallback>
 8004946:	e051      	b.n	80049ec <HAL_UART_IRQHandler+0x344>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004950:	b29b      	uxth	r3, r3
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	827b      	strh	r3, [r7, #18]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d047      	beq.n	80049f0 <HAL_UART_IRQHandler+0x348>
 8004960:	8a7b      	ldrh	r3, [r7, #18]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d044      	beq.n	80049f0 <HAL_UART_IRQHandler+0x348>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	615a      	str	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0210 	bic.w	r2, r2, #16
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	8a7b      	ldrh	r3, [r7, #18]
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f842 	bl	8004a32 <HAL_UARTEx_RxEventCallback>
 80049ae:	e01f      	b.n	80049f0 <HAL_UART_IRQHandler+0x348>
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_UART_IRQHandler+0x324>
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_UART_IRQHandler+0x324>
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f87f 	bl	8004ac8 <UART_Transmit_IT>
 80049ca:	e012      	b.n	80049f2 <HAL_UART_IRQHandler+0x34a>
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00d      	beq.n	80049f2 <HAL_UART_IRQHandler+0x34a>
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_UART_IRQHandler+0x34a>
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f8c0 	bl	8004b66 <UART_EndTransmit_IT>
 80049e6:	e004      	b.n	80049f2 <HAL_UART_IRQHandler+0x34a>
 80049e8:	bf00      	nop
 80049ea:	e002      	b.n	80049f2 <HAL_UART_IRQHandler+0x34a>
 80049ec:	bf00      	nop
 80049ee:	e000      	b.n	80049f2 <HAL_UART_IRQHandler+0x34a>
 80049f0:	bf00      	nop
 80049f2:	3728      	adds	r7, #40	; 0x28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08004aa1 	.word	0x08004aa1

080049fc <HAL_UART_TxCpltCallback>:
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <HAL_UART_RxCpltCallback>:
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_UART_ErrorCallback>:
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <HAL_UARTEx_RxEventCallback>:
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	807b      	strh	r3, [r7, #2]
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <UART_EndRxTransfer>:
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	615a      	str	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <UART_EndRxTransfer+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0210 	bic.w	r2, r2, #16
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <UART_DMAAbortOnError>:
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	84da      	strh	r2, [r3, #38]	; 0x26
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff ffb0 	bl	8004a20 <HAL_UART_ErrorCallback>
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UART_Transmit_IT>:
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b21      	cmp	r3, #33	; 0x21
 8004ada:	d13e      	bne.n	8004b5a <UART_Transmit_IT+0x92>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae4:	d114      	bne.n	8004b10 <UART_Transmit_IT+0x48>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d110      	bne.n	8004b10 <UART_Transmit_IT+0x48>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	621a      	str	r2, [r3, #32]
 8004b0e:	e008      	b.n	8004b22 <UART_Transmit_IT+0x5a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	1c59      	adds	r1, r3, #1
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6211      	str	r1, [r2, #32]
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <UART_Transmit_IT+0x8e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <UART_Transmit_IT+0x94>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <UART_EndTransmit_IT>:
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff ff38 	bl	80049fc <HAL_UART_TxCpltCallback>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_Receive_IT>:
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b22      	cmp	r3, #34	; 0x22
 8004ba8:	f040 8099 	bne.w	8004cde <UART_Receive_IT+0x148>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	d117      	bne.n	8004be6 <UART_Receive_IT+0x50>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d113      	bne.n	8004be6 <UART_Receive_IT+0x50>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	1c9a      	adds	r2, r3, #2
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
 8004be4:	e026      	b.n	8004c34 <UART_Receive_IT+0x9e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf8:	d007      	beq.n	8004c0a <UART_Receive_IT+0x74>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <UART_Receive_IT+0x82>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <UART_Receive_IT+0x82>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e008      	b.n	8004c2a <UART_Receive_IT+0x94>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4619      	mov	r1, r3
 8004c42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d148      	bne.n	8004cda <UART_Receive_IT+0x144>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0220 	bic.w	r2, r2, #32
 8004c56:	60da      	str	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	615a      	str	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d123      	bne.n	8004cd0 <UART_Receive_IT+0x13a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0210 	bic.w	r2, r2, #16
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d10a      	bne.n	8004cc2 <UART_Receive_IT+0x12c>
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff feb2 	bl	8004a32 <HAL_UARTEx_RxEventCallback>
 8004cce:	e002      	b.n	8004cd6 <UART_Receive_IT+0x140>
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff fe9c 	bl	8004a0e <HAL_UART_RxCpltCallback>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e002      	b.n	8004ce0 <UART_Receive_IT+0x14a>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <UART_Receive_IT+0x14a>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <UART_SetConfig>:
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	611a      	str	r2, [r3, #16]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d22:	f023 030c 	bic.w	r3, r3, #12
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	60d3      	str	r3, [r2, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	615a      	str	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2c      	ldr	r2, [pc, #176]	; (8004dfc <UART_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d103      	bne.n	8004d58 <UART_SetConfig+0x70>
 8004d50:	f7fe fc88 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	e002      	b.n	8004d5e <UART_SetConfig+0x76>
 8004d58:	f7fe fc70 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009a      	lsls	r2, r3, #2
 8004d68:	441a      	add	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <UART_SetConfig+0x118>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	0119      	lsls	r1, r3, #4
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009a      	lsls	r2, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <UART_SetConfig+0x118>)
 8004d96:	fba3 0302 	umull	r0, r3, r3, r2
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2064      	movs	r0, #100	; 0x64
 8004d9e:	fb00 f303 	mul.w	r3, r0, r3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	3332      	adds	r3, #50	; 0x32
 8004da8:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <UART_SetConfig+0x118>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db4:	4419      	add	r1, r3
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009a      	lsls	r2, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <UART_SetConfig+0x118>)
 8004dce:	fba3 0302 	umull	r0, r3, r3, r2
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2064      	movs	r0, #100	; 0x64
 8004dd6:	fb00 f303 	mul.w	r3, r0, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	3332      	adds	r3, #50	; 0x32
 8004de0:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <UART_SetConfig+0x118>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	440a      	add	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40013800 	.word	0x40013800
 8004e00:	51eb851f 	.word	0x51eb851f

08004e04 <__errno>:
 8004e04:	4b01      	ldr	r3, [pc, #4]	; (8004e0c <__errno+0x8>)
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000034 	.word	0x20000034

08004e10 <__libc_init_array>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	2600      	movs	r6, #0
 8004e14:	4d0c      	ldr	r5, [pc, #48]	; (8004e48 <__libc_init_array+0x38>)
 8004e16:	4c0d      	ldr	r4, [pc, #52]	; (8004e4c <__libc_init_array+0x3c>)
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	42a6      	cmp	r6, r4
 8004e1e:	d109      	bne.n	8004e34 <__libc_init_array+0x24>
 8004e20:	f000 fc5c 	bl	80056dc <_init>
 8004e24:	2600      	movs	r6, #0
 8004e26:	4d0a      	ldr	r5, [pc, #40]	; (8004e50 <__libc_init_array+0x40>)
 8004e28:	4c0a      	ldr	r4, [pc, #40]	; (8004e54 <__libc_init_array+0x44>)
 8004e2a:	1b64      	subs	r4, r4, r5
 8004e2c:	10a4      	asrs	r4, r4, #2
 8004e2e:	42a6      	cmp	r6, r4
 8004e30:	d105      	bne.n	8004e3e <__libc_init_array+0x2e>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e38:	4798      	blx	r3
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7ee      	b.n	8004e1c <__libc_init_array+0xc>
 8004e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e42:	4798      	blx	r3
 8004e44:	3601      	adds	r6, #1
 8004e46:	e7f2      	b.n	8004e2e <__libc_init_array+0x1e>
 8004e48:	0800575c 	.word	0x0800575c
 8004e4c:	0800575c 	.word	0x0800575c
 8004e50:	0800575c 	.word	0x0800575c
 8004e54:	08005760 	.word	0x08005760

08004e58 <memset>:
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4402      	add	r2, r0
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d100      	bne.n	8004e62 <memset+0xa>
 8004e60:	4770      	bx	lr
 8004e62:	f803 1b01 	strb.w	r1, [r3], #1
 8004e66:	e7f9      	b.n	8004e5c <memset+0x4>

08004e68 <siprintf>:
 8004e68:	b40e      	push	{r1, r2, r3}
 8004e6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e6e:	b500      	push	{lr}
 8004e70:	b09c      	sub	sp, #112	; 0x70
 8004e72:	ab1d      	add	r3, sp, #116	; 0x74
 8004e74:	9002      	str	r0, [sp, #8]
 8004e76:	9006      	str	r0, [sp, #24]
 8004e78:	9107      	str	r1, [sp, #28]
 8004e7a:	9104      	str	r1, [sp, #16]
 8004e7c:	4808      	ldr	r0, [pc, #32]	; (8004ea0 <siprintf+0x38>)
 8004e7e:	4909      	ldr	r1, [pc, #36]	; (8004ea4 <siprintf+0x3c>)
 8004e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e84:	9105      	str	r1, [sp, #20]
 8004e86:	6800      	ldr	r0, [r0, #0]
 8004e88:	a902      	add	r1, sp, #8
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	f000 f868 	bl	8004f60 <_svfiprintf_r>
 8004e90:	2200      	movs	r2, #0
 8004e92:	9b02      	ldr	r3, [sp, #8]
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	b01c      	add	sp, #112	; 0x70
 8004e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e9c:	b003      	add	sp, #12
 8004e9e:	4770      	bx	lr
 8004ea0:	20000034 	.word	0x20000034
 8004ea4:	ffff0208 	.word	0xffff0208

08004ea8 <__ssputs_r>:
 8004ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eac:	688e      	ldr	r6, [r1, #8]
 8004eae:	4682      	mov	sl, r0
 8004eb0:	429e      	cmp	r6, r3
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	4690      	mov	r8, r2
 8004eb6:	461f      	mov	r7, r3
 8004eb8:	d838      	bhi.n	8004f2c <__ssputs_r+0x84>
 8004eba:	898a      	ldrh	r2, [r1, #12]
 8004ebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ec0:	d032      	beq.n	8004f28 <__ssputs_r+0x80>
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	6909      	ldr	r1, [r1, #16]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	eba5 0901 	sub.w	r9, r5, r1
 8004ecc:	6965      	ldr	r5, [r4, #20]
 8004ece:	444b      	add	r3, r9
 8004ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ed8:	106d      	asrs	r5, r5, #1
 8004eda:	429d      	cmp	r5, r3
 8004edc:	bf38      	it	cc
 8004ede:	461d      	movcc	r5, r3
 8004ee0:	0553      	lsls	r3, r2, #21
 8004ee2:	d531      	bpl.n	8004f48 <__ssputs_r+0xa0>
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	f000 fb53 	bl	8005590 <_malloc_r>
 8004eea:	4606      	mov	r6, r0
 8004eec:	b950      	cbnz	r0, 8004f04 <__ssputs_r+0x5c>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	f8ca 3000 	str.w	r3, [sl]
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efe:	81a3      	strh	r3, [r4, #12]
 8004f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f04:	464a      	mov	r2, r9
 8004f06:	6921      	ldr	r1, [r4, #16]
 8004f08:	f000 face 	bl	80054a8 <memcpy>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	6126      	str	r6, [r4, #16]
 8004f1a:	444e      	add	r6, r9
 8004f1c:	6026      	str	r6, [r4, #0]
 8004f1e:	463e      	mov	r6, r7
 8004f20:	6165      	str	r5, [r4, #20]
 8004f22:	eba5 0509 	sub.w	r5, r5, r9
 8004f26:	60a5      	str	r5, [r4, #8]
 8004f28:	42be      	cmp	r6, r7
 8004f2a:	d900      	bls.n	8004f2e <__ssputs_r+0x86>
 8004f2c:	463e      	mov	r6, r7
 8004f2e:	4632      	mov	r2, r6
 8004f30:	4641      	mov	r1, r8
 8004f32:	6820      	ldr	r0, [r4, #0]
 8004f34:	f000 fac6 	bl	80054c4 <memmove>
 8004f38:	68a3      	ldr	r3, [r4, #8]
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	1b9b      	subs	r3, r3, r6
 8004f3e:	4432      	add	r2, r6
 8004f40:	2000      	movs	r0, #0
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	6022      	str	r2, [r4, #0]
 8004f46:	e7db      	b.n	8004f00 <__ssputs_r+0x58>
 8004f48:	462a      	mov	r2, r5
 8004f4a:	f000 fb7b 	bl	8005644 <_realloc_r>
 8004f4e:	4606      	mov	r6, r0
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d1e1      	bne.n	8004f18 <__ssputs_r+0x70>
 8004f54:	4650      	mov	r0, sl
 8004f56:	6921      	ldr	r1, [r4, #16]
 8004f58:	f000 face 	bl	80054f8 <_free_r>
 8004f5c:	e7c7      	b.n	8004eee <__ssputs_r+0x46>
	...

08004f60 <_svfiprintf_r>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	4698      	mov	r8, r3
 8004f66:	898b      	ldrh	r3, [r1, #12]
 8004f68:	4607      	mov	r7, r0
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	4614      	mov	r4, r2
 8004f70:	b09d      	sub	sp, #116	; 0x74
 8004f72:	d50e      	bpl.n	8004f92 <_svfiprintf_r+0x32>
 8004f74:	690b      	ldr	r3, [r1, #16]
 8004f76:	b963      	cbnz	r3, 8004f92 <_svfiprintf_r+0x32>
 8004f78:	2140      	movs	r1, #64	; 0x40
 8004f7a:	f000 fb09 	bl	8005590 <_malloc_r>
 8004f7e:	6028      	str	r0, [r5, #0]
 8004f80:	6128      	str	r0, [r5, #16]
 8004f82:	b920      	cbnz	r0, 8004f8e <_svfiprintf_r+0x2e>
 8004f84:	230c      	movs	r3, #12
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	e0d1      	b.n	8005132 <_svfiprintf_r+0x1d2>
 8004f8e:	2340      	movs	r3, #64	; 0x40
 8004f90:	616b      	str	r3, [r5, #20]
 8004f92:	2300      	movs	r3, #0
 8004f94:	9309      	str	r3, [sp, #36]	; 0x24
 8004f96:	2320      	movs	r3, #32
 8004f98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f9c:	2330      	movs	r3, #48	; 0x30
 8004f9e:	f04f 0901 	mov.w	r9, #1
 8004fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800514c <_svfiprintf_r+0x1ec>
 8004faa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fae:	4623      	mov	r3, r4
 8004fb0:	469a      	mov	sl, r3
 8004fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fb6:	b10a      	cbz	r2, 8004fbc <_svfiprintf_r+0x5c>
 8004fb8:	2a25      	cmp	r2, #37	; 0x25
 8004fba:	d1f9      	bne.n	8004fb0 <_svfiprintf_r+0x50>
 8004fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8004fc0:	d00b      	beq.n	8004fda <_svfiprintf_r+0x7a>
 8004fc2:	465b      	mov	r3, fp
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4638      	mov	r0, r7
 8004fca:	f7ff ff6d 	bl	8004ea8 <__ssputs_r>
 8004fce:	3001      	adds	r0, #1
 8004fd0:	f000 80aa 	beq.w	8005128 <_svfiprintf_r+0x1c8>
 8004fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fd6:	445a      	add	r2, fp
 8004fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8004fda:	f89a 3000 	ldrb.w	r3, [sl]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80a2 	beq.w	8005128 <_svfiprintf_r+0x1c8>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fee:	f10a 0a01 	add.w	sl, sl, #1
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	9307      	str	r3, [sp, #28]
 8004ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8004ffc:	4654      	mov	r4, sl
 8004ffe:	2205      	movs	r2, #5
 8005000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005004:	4851      	ldr	r0, [pc, #324]	; (800514c <_svfiprintf_r+0x1ec>)
 8005006:	f000 fa41 	bl	800548c <memchr>
 800500a:	9a04      	ldr	r2, [sp, #16]
 800500c:	b9d8      	cbnz	r0, 8005046 <_svfiprintf_r+0xe6>
 800500e:	06d0      	lsls	r0, r2, #27
 8005010:	bf44      	itt	mi
 8005012:	2320      	movmi	r3, #32
 8005014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005018:	0711      	lsls	r1, r2, #28
 800501a:	bf44      	itt	mi
 800501c:	232b      	movmi	r3, #43	; 0x2b
 800501e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005022:	f89a 3000 	ldrb.w	r3, [sl]
 8005026:	2b2a      	cmp	r3, #42	; 0x2a
 8005028:	d015      	beq.n	8005056 <_svfiprintf_r+0xf6>
 800502a:	4654      	mov	r4, sl
 800502c:	2000      	movs	r0, #0
 800502e:	f04f 0c0a 	mov.w	ip, #10
 8005032:	9a07      	ldr	r2, [sp, #28]
 8005034:	4621      	mov	r1, r4
 8005036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800503a:	3b30      	subs	r3, #48	; 0x30
 800503c:	2b09      	cmp	r3, #9
 800503e:	d94e      	bls.n	80050de <_svfiprintf_r+0x17e>
 8005040:	b1b0      	cbz	r0, 8005070 <_svfiprintf_r+0x110>
 8005042:	9207      	str	r2, [sp, #28]
 8005044:	e014      	b.n	8005070 <_svfiprintf_r+0x110>
 8005046:	eba0 0308 	sub.w	r3, r0, r8
 800504a:	fa09 f303 	lsl.w	r3, r9, r3
 800504e:	4313      	orrs	r3, r2
 8005050:	46a2      	mov	sl, r4
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	e7d2      	b.n	8004ffc <_svfiprintf_r+0x9c>
 8005056:	9b03      	ldr	r3, [sp, #12]
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	9103      	str	r1, [sp, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	bfbb      	ittet	lt
 8005062:	425b      	neglt	r3, r3
 8005064:	f042 0202 	orrlt.w	r2, r2, #2
 8005068:	9307      	strge	r3, [sp, #28]
 800506a:	9307      	strlt	r3, [sp, #28]
 800506c:	bfb8      	it	lt
 800506e:	9204      	strlt	r2, [sp, #16]
 8005070:	7823      	ldrb	r3, [r4, #0]
 8005072:	2b2e      	cmp	r3, #46	; 0x2e
 8005074:	d10c      	bne.n	8005090 <_svfiprintf_r+0x130>
 8005076:	7863      	ldrb	r3, [r4, #1]
 8005078:	2b2a      	cmp	r3, #42	; 0x2a
 800507a:	d135      	bne.n	80050e8 <_svfiprintf_r+0x188>
 800507c:	9b03      	ldr	r3, [sp, #12]
 800507e:	3402      	adds	r4, #2
 8005080:	1d1a      	adds	r2, r3, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	9203      	str	r2, [sp, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfb8      	it	lt
 800508a:	f04f 33ff 	movlt.w	r3, #4294967295
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800515c <_svfiprintf_r+0x1fc>
 8005094:	2203      	movs	r2, #3
 8005096:	4650      	mov	r0, sl
 8005098:	7821      	ldrb	r1, [r4, #0]
 800509a:	f000 f9f7 	bl	800548c <memchr>
 800509e:	b140      	cbz	r0, 80050b2 <_svfiprintf_r+0x152>
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	eba0 000a 	sub.w	r0, r0, sl
 80050a6:	fa03 f000 	lsl.w	r0, r3, r0
 80050aa:	9b04      	ldr	r3, [sp, #16]
 80050ac:	3401      	adds	r4, #1
 80050ae:	4303      	orrs	r3, r0
 80050b0:	9304      	str	r3, [sp, #16]
 80050b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b6:	2206      	movs	r2, #6
 80050b8:	4825      	ldr	r0, [pc, #148]	; (8005150 <_svfiprintf_r+0x1f0>)
 80050ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050be:	f000 f9e5 	bl	800548c <memchr>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d038      	beq.n	8005138 <_svfiprintf_r+0x1d8>
 80050c6:	4b23      	ldr	r3, [pc, #140]	; (8005154 <_svfiprintf_r+0x1f4>)
 80050c8:	bb1b      	cbnz	r3, 8005112 <_svfiprintf_r+0x1b2>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	3307      	adds	r3, #7
 80050ce:	f023 0307 	bic.w	r3, r3, #7
 80050d2:	3308      	adds	r3, #8
 80050d4:	9303      	str	r3, [sp, #12]
 80050d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d8:	4433      	add	r3, r6
 80050da:	9309      	str	r3, [sp, #36]	; 0x24
 80050dc:	e767      	b.n	8004fae <_svfiprintf_r+0x4e>
 80050de:	460c      	mov	r4, r1
 80050e0:	2001      	movs	r0, #1
 80050e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050e6:	e7a5      	b.n	8005034 <_svfiprintf_r+0xd4>
 80050e8:	2300      	movs	r3, #0
 80050ea:	f04f 0c0a 	mov.w	ip, #10
 80050ee:	4619      	mov	r1, r3
 80050f0:	3401      	adds	r4, #1
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	4620      	mov	r0, r4
 80050f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050fa:	3a30      	subs	r2, #48	; 0x30
 80050fc:	2a09      	cmp	r2, #9
 80050fe:	d903      	bls.n	8005108 <_svfiprintf_r+0x1a8>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0c5      	beq.n	8005090 <_svfiprintf_r+0x130>
 8005104:	9105      	str	r1, [sp, #20]
 8005106:	e7c3      	b.n	8005090 <_svfiprintf_r+0x130>
 8005108:	4604      	mov	r4, r0
 800510a:	2301      	movs	r3, #1
 800510c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005110:	e7f0      	b.n	80050f4 <_svfiprintf_r+0x194>
 8005112:	ab03      	add	r3, sp, #12
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	462a      	mov	r2, r5
 8005118:	4638      	mov	r0, r7
 800511a:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <_svfiprintf_r+0x1f8>)
 800511c:	a904      	add	r1, sp, #16
 800511e:	f3af 8000 	nop.w
 8005122:	1c42      	adds	r2, r0, #1
 8005124:	4606      	mov	r6, r0
 8005126:	d1d6      	bne.n	80050d6 <_svfiprintf_r+0x176>
 8005128:	89ab      	ldrh	r3, [r5, #12]
 800512a:	065b      	lsls	r3, r3, #25
 800512c:	f53f af2c 	bmi.w	8004f88 <_svfiprintf_r+0x28>
 8005130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005132:	b01d      	add	sp, #116	; 0x74
 8005134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005138:	ab03      	add	r3, sp, #12
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	462a      	mov	r2, r5
 800513e:	4638      	mov	r0, r7
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <_svfiprintf_r+0x1f8>)
 8005142:	a904      	add	r1, sp, #16
 8005144:	f000 f87c 	bl	8005240 <_printf_i>
 8005148:	e7eb      	b.n	8005122 <_svfiprintf_r+0x1c2>
 800514a:	bf00      	nop
 800514c:	08005728 	.word	0x08005728
 8005150:	08005732 	.word	0x08005732
 8005154:	00000000 	.word	0x00000000
 8005158:	08004ea9 	.word	0x08004ea9
 800515c:	0800572e 	.word	0x0800572e

08005160 <_printf_common>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	4616      	mov	r6, r2
 8005166:	4699      	mov	r9, r3
 8005168:	688a      	ldr	r2, [r1, #8]
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	4607      	mov	r7, r0
 800516e:	4293      	cmp	r3, r2
 8005170:	bfb8      	it	lt
 8005172:	4613      	movlt	r3, r2
 8005174:	6033      	str	r3, [r6, #0]
 8005176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800517a:	460c      	mov	r4, r1
 800517c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005180:	b10a      	cbz	r2, 8005186 <_printf_common+0x26>
 8005182:	3301      	adds	r3, #1
 8005184:	6033      	str	r3, [r6, #0]
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	0699      	lsls	r1, r3, #26
 800518a:	bf42      	ittt	mi
 800518c:	6833      	ldrmi	r3, [r6, #0]
 800518e:	3302      	addmi	r3, #2
 8005190:	6033      	strmi	r3, [r6, #0]
 8005192:	6825      	ldr	r5, [r4, #0]
 8005194:	f015 0506 	ands.w	r5, r5, #6
 8005198:	d106      	bne.n	80051a8 <_printf_common+0x48>
 800519a:	f104 0a19 	add.w	sl, r4, #25
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	6832      	ldr	r2, [r6, #0]
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	42ab      	cmp	r3, r5
 80051a6:	dc28      	bgt.n	80051fa <_printf_common+0x9a>
 80051a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051ac:	1e13      	subs	r3, r2, #0
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	bf18      	it	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	0692      	lsls	r2, r2, #26
 80051b6:	d42d      	bmi.n	8005214 <_printf_common+0xb4>
 80051b8:	4649      	mov	r1, r9
 80051ba:	4638      	mov	r0, r7
 80051bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c0:	47c0      	blx	r8
 80051c2:	3001      	adds	r0, #1
 80051c4:	d020      	beq.n	8005208 <_printf_common+0xa8>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	68e5      	ldr	r5, [r4, #12]
 80051ca:	f003 0306 	and.w	r3, r3, #6
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	bf18      	it	ne
 80051d2:	2500      	movne	r5, #0
 80051d4:	6832      	ldr	r2, [r6, #0]
 80051d6:	f04f 0600 	mov.w	r6, #0
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	bf08      	it	eq
 80051de:	1aad      	subeq	r5, r5, r2
 80051e0:	6922      	ldr	r2, [r4, #16]
 80051e2:	bf08      	it	eq
 80051e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e8:	4293      	cmp	r3, r2
 80051ea:	bfc4      	itt	gt
 80051ec:	1a9b      	subgt	r3, r3, r2
 80051ee:	18ed      	addgt	r5, r5, r3
 80051f0:	341a      	adds	r4, #26
 80051f2:	42b5      	cmp	r5, r6
 80051f4:	d11a      	bne.n	800522c <_printf_common+0xcc>
 80051f6:	2000      	movs	r0, #0
 80051f8:	e008      	b.n	800520c <_printf_common+0xac>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4652      	mov	r2, sl
 80051fe:	4649      	mov	r1, r9
 8005200:	4638      	mov	r0, r7
 8005202:	47c0      	blx	r8
 8005204:	3001      	adds	r0, #1
 8005206:	d103      	bne.n	8005210 <_printf_common+0xb0>
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005210:	3501      	adds	r5, #1
 8005212:	e7c4      	b.n	800519e <_printf_common+0x3e>
 8005214:	2030      	movs	r0, #48	; 0x30
 8005216:	18e1      	adds	r1, r4, r3
 8005218:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005222:	4422      	add	r2, r4
 8005224:	3302      	adds	r3, #2
 8005226:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800522a:	e7c5      	b.n	80051b8 <_printf_common+0x58>
 800522c:	2301      	movs	r3, #1
 800522e:	4622      	mov	r2, r4
 8005230:	4649      	mov	r1, r9
 8005232:	4638      	mov	r0, r7
 8005234:	47c0      	blx	r8
 8005236:	3001      	adds	r0, #1
 8005238:	d0e6      	beq.n	8005208 <_printf_common+0xa8>
 800523a:	3601      	adds	r6, #1
 800523c:	e7d9      	b.n	80051f2 <_printf_common+0x92>
	...

08005240 <_printf_i>:
 8005240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	460c      	mov	r4, r1
 8005246:	7e27      	ldrb	r7, [r4, #24]
 8005248:	4691      	mov	r9, r2
 800524a:	2f78      	cmp	r7, #120	; 0x78
 800524c:	4680      	mov	r8, r0
 800524e:	469a      	mov	sl, r3
 8005250:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005256:	d807      	bhi.n	8005268 <_printf_i+0x28>
 8005258:	2f62      	cmp	r7, #98	; 0x62
 800525a:	d80a      	bhi.n	8005272 <_printf_i+0x32>
 800525c:	2f00      	cmp	r7, #0
 800525e:	f000 80d9 	beq.w	8005414 <_printf_i+0x1d4>
 8005262:	2f58      	cmp	r7, #88	; 0x58
 8005264:	f000 80a4 	beq.w	80053b0 <_printf_i+0x170>
 8005268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800526c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005270:	e03a      	b.n	80052e8 <_printf_i+0xa8>
 8005272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005276:	2b15      	cmp	r3, #21
 8005278:	d8f6      	bhi.n	8005268 <_printf_i+0x28>
 800527a:	a001      	add	r0, pc, #4	; (adr r0, 8005280 <_printf_i+0x40>)
 800527c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005280:	080052d9 	.word	0x080052d9
 8005284:	080052ed 	.word	0x080052ed
 8005288:	08005269 	.word	0x08005269
 800528c:	08005269 	.word	0x08005269
 8005290:	08005269 	.word	0x08005269
 8005294:	08005269 	.word	0x08005269
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005269 	.word	0x08005269
 80052a0:	08005269 	.word	0x08005269
 80052a4:	08005269 	.word	0x08005269
 80052a8:	08005269 	.word	0x08005269
 80052ac:	080053fb 	.word	0x080053fb
 80052b0:	0800531d 	.word	0x0800531d
 80052b4:	080053dd 	.word	0x080053dd
 80052b8:	08005269 	.word	0x08005269
 80052bc:	08005269 	.word	0x08005269
 80052c0:	0800541d 	.word	0x0800541d
 80052c4:	08005269 	.word	0x08005269
 80052c8:	0800531d 	.word	0x0800531d
 80052cc:	08005269 	.word	0x08005269
 80052d0:	08005269 	.word	0x08005269
 80052d4:	080053e5 	.word	0x080053e5
 80052d8:	680b      	ldr	r3, [r1, #0]
 80052da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052de:	1d1a      	adds	r2, r3, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	600a      	str	r2, [r1, #0]
 80052e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0a4      	b.n	8005436 <_printf_i+0x1f6>
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	6808      	ldr	r0, [r1, #0]
 80052f0:	062e      	lsls	r6, r5, #24
 80052f2:	f100 0304 	add.w	r3, r0, #4
 80052f6:	d50a      	bpl.n	800530e <_printf_i+0xce>
 80052f8:	6805      	ldr	r5, [r0, #0]
 80052fa:	600b      	str	r3, [r1, #0]
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	da03      	bge.n	8005308 <_printf_i+0xc8>
 8005300:	232d      	movs	r3, #45	; 0x2d
 8005302:	426d      	negs	r5, r5
 8005304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005308:	230a      	movs	r3, #10
 800530a:	485e      	ldr	r0, [pc, #376]	; (8005484 <_printf_i+0x244>)
 800530c:	e019      	b.n	8005342 <_printf_i+0x102>
 800530e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005312:	6805      	ldr	r5, [r0, #0]
 8005314:	600b      	str	r3, [r1, #0]
 8005316:	bf18      	it	ne
 8005318:	b22d      	sxthne	r5, r5
 800531a:	e7ef      	b.n	80052fc <_printf_i+0xbc>
 800531c:	680b      	ldr	r3, [r1, #0]
 800531e:	6825      	ldr	r5, [r4, #0]
 8005320:	1d18      	adds	r0, r3, #4
 8005322:	6008      	str	r0, [r1, #0]
 8005324:	0628      	lsls	r0, r5, #24
 8005326:	d501      	bpl.n	800532c <_printf_i+0xec>
 8005328:	681d      	ldr	r5, [r3, #0]
 800532a:	e002      	b.n	8005332 <_printf_i+0xf2>
 800532c:	0669      	lsls	r1, r5, #25
 800532e:	d5fb      	bpl.n	8005328 <_printf_i+0xe8>
 8005330:	881d      	ldrh	r5, [r3, #0]
 8005332:	2f6f      	cmp	r7, #111	; 0x6f
 8005334:	bf0c      	ite	eq
 8005336:	2308      	moveq	r3, #8
 8005338:	230a      	movne	r3, #10
 800533a:	4852      	ldr	r0, [pc, #328]	; (8005484 <_printf_i+0x244>)
 800533c:	2100      	movs	r1, #0
 800533e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005342:	6866      	ldr	r6, [r4, #4]
 8005344:	2e00      	cmp	r6, #0
 8005346:	bfa8      	it	ge
 8005348:	6821      	ldrge	r1, [r4, #0]
 800534a:	60a6      	str	r6, [r4, #8]
 800534c:	bfa4      	itt	ge
 800534e:	f021 0104 	bicge.w	r1, r1, #4
 8005352:	6021      	strge	r1, [r4, #0]
 8005354:	b90d      	cbnz	r5, 800535a <_printf_i+0x11a>
 8005356:	2e00      	cmp	r6, #0
 8005358:	d04d      	beq.n	80053f6 <_printf_i+0x1b6>
 800535a:	4616      	mov	r6, r2
 800535c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005360:	fb03 5711 	mls	r7, r3, r1, r5
 8005364:	5dc7      	ldrb	r7, [r0, r7]
 8005366:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800536a:	462f      	mov	r7, r5
 800536c:	42bb      	cmp	r3, r7
 800536e:	460d      	mov	r5, r1
 8005370:	d9f4      	bls.n	800535c <_printf_i+0x11c>
 8005372:	2b08      	cmp	r3, #8
 8005374:	d10b      	bne.n	800538e <_printf_i+0x14e>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	07df      	lsls	r7, r3, #31
 800537a:	d508      	bpl.n	800538e <_printf_i+0x14e>
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	6861      	ldr	r1, [r4, #4]
 8005380:	4299      	cmp	r1, r3
 8005382:	bfde      	ittt	le
 8005384:	2330      	movle	r3, #48	; 0x30
 8005386:	f806 3c01 	strble.w	r3, [r6, #-1]
 800538a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800538e:	1b92      	subs	r2, r2, r6
 8005390:	6122      	str	r2, [r4, #16]
 8005392:	464b      	mov	r3, r9
 8005394:	4621      	mov	r1, r4
 8005396:	4640      	mov	r0, r8
 8005398:	f8cd a000 	str.w	sl, [sp]
 800539c:	aa03      	add	r2, sp, #12
 800539e:	f7ff fedf 	bl	8005160 <_printf_common>
 80053a2:	3001      	adds	r0, #1
 80053a4:	d14c      	bne.n	8005440 <_printf_i+0x200>
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	b004      	add	sp, #16
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	4834      	ldr	r0, [pc, #208]	; (8005484 <_printf_i+0x244>)
 80053b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053b6:	680e      	ldr	r6, [r1, #0]
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80053be:	061f      	lsls	r7, r3, #24
 80053c0:	600e      	str	r6, [r1, #0]
 80053c2:	d514      	bpl.n	80053ee <_printf_i+0x1ae>
 80053c4:	07d9      	lsls	r1, r3, #31
 80053c6:	bf44      	itt	mi
 80053c8:	f043 0320 	orrmi.w	r3, r3, #32
 80053cc:	6023      	strmi	r3, [r4, #0]
 80053ce:	b91d      	cbnz	r5, 80053d8 <_printf_i+0x198>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	f023 0320 	bic.w	r3, r3, #32
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	2310      	movs	r3, #16
 80053da:	e7af      	b.n	800533c <_printf_i+0xfc>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f043 0320 	orr.w	r3, r3, #32
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	2378      	movs	r3, #120	; 0x78
 80053e6:	4828      	ldr	r0, [pc, #160]	; (8005488 <_printf_i+0x248>)
 80053e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ec:	e7e3      	b.n	80053b6 <_printf_i+0x176>
 80053ee:	065e      	lsls	r6, r3, #25
 80053f0:	bf48      	it	mi
 80053f2:	b2ad      	uxthmi	r5, r5
 80053f4:	e7e6      	b.n	80053c4 <_printf_i+0x184>
 80053f6:	4616      	mov	r6, r2
 80053f8:	e7bb      	b.n	8005372 <_printf_i+0x132>
 80053fa:	680b      	ldr	r3, [r1, #0]
 80053fc:	6826      	ldr	r6, [r4, #0]
 80053fe:	1d1d      	adds	r5, r3, #4
 8005400:	6960      	ldr	r0, [r4, #20]
 8005402:	600d      	str	r5, [r1, #0]
 8005404:	0635      	lsls	r5, r6, #24
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	d501      	bpl.n	800540e <_printf_i+0x1ce>
 800540a:	6018      	str	r0, [r3, #0]
 800540c:	e002      	b.n	8005414 <_printf_i+0x1d4>
 800540e:	0671      	lsls	r1, r6, #25
 8005410:	d5fb      	bpl.n	800540a <_printf_i+0x1ca>
 8005412:	8018      	strh	r0, [r3, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	4616      	mov	r6, r2
 8005418:	6123      	str	r3, [r4, #16]
 800541a:	e7ba      	b.n	8005392 <_printf_i+0x152>
 800541c:	680b      	ldr	r3, [r1, #0]
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	600a      	str	r2, [r1, #0]
 8005422:	681e      	ldr	r6, [r3, #0]
 8005424:	2100      	movs	r1, #0
 8005426:	4630      	mov	r0, r6
 8005428:	6862      	ldr	r2, [r4, #4]
 800542a:	f000 f82f 	bl	800548c <memchr>
 800542e:	b108      	cbz	r0, 8005434 <_printf_i+0x1f4>
 8005430:	1b80      	subs	r0, r0, r6
 8005432:	6060      	str	r0, [r4, #4]
 8005434:	6863      	ldr	r3, [r4, #4]
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	2300      	movs	r3, #0
 800543a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543e:	e7a8      	b.n	8005392 <_printf_i+0x152>
 8005440:	4632      	mov	r2, r6
 8005442:	4649      	mov	r1, r9
 8005444:	4640      	mov	r0, r8
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	47d0      	blx	sl
 800544a:	3001      	adds	r0, #1
 800544c:	d0ab      	beq.n	80053a6 <_printf_i+0x166>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	079b      	lsls	r3, r3, #30
 8005452:	d413      	bmi.n	800547c <_printf_i+0x23c>
 8005454:	68e0      	ldr	r0, [r4, #12]
 8005456:	9b03      	ldr	r3, [sp, #12]
 8005458:	4298      	cmp	r0, r3
 800545a:	bfb8      	it	lt
 800545c:	4618      	movlt	r0, r3
 800545e:	e7a4      	b.n	80053aa <_printf_i+0x16a>
 8005460:	2301      	movs	r3, #1
 8005462:	4632      	mov	r2, r6
 8005464:	4649      	mov	r1, r9
 8005466:	4640      	mov	r0, r8
 8005468:	47d0      	blx	sl
 800546a:	3001      	adds	r0, #1
 800546c:	d09b      	beq.n	80053a6 <_printf_i+0x166>
 800546e:	3501      	adds	r5, #1
 8005470:	68e3      	ldr	r3, [r4, #12]
 8005472:	9903      	ldr	r1, [sp, #12]
 8005474:	1a5b      	subs	r3, r3, r1
 8005476:	42ab      	cmp	r3, r5
 8005478:	dcf2      	bgt.n	8005460 <_printf_i+0x220>
 800547a:	e7eb      	b.n	8005454 <_printf_i+0x214>
 800547c:	2500      	movs	r5, #0
 800547e:	f104 0619 	add.w	r6, r4, #25
 8005482:	e7f5      	b.n	8005470 <_printf_i+0x230>
 8005484:	08005739 	.word	0x08005739
 8005488:	0800574a 	.word	0x0800574a

0800548c <memchr>:
 800548c:	4603      	mov	r3, r0
 800548e:	b510      	push	{r4, lr}
 8005490:	b2c9      	uxtb	r1, r1
 8005492:	4402      	add	r2, r0
 8005494:	4293      	cmp	r3, r2
 8005496:	4618      	mov	r0, r3
 8005498:	d101      	bne.n	800549e <memchr+0x12>
 800549a:	2000      	movs	r0, #0
 800549c:	e003      	b.n	80054a6 <memchr+0x1a>
 800549e:	7804      	ldrb	r4, [r0, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	428c      	cmp	r4, r1
 80054a4:	d1f6      	bne.n	8005494 <memchr+0x8>
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <memcpy>:
 80054a8:	440a      	add	r2, r1
 80054aa:	4291      	cmp	r1, r2
 80054ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b0:	d100      	bne.n	80054b4 <memcpy+0xc>
 80054b2:	4770      	bx	lr
 80054b4:	b510      	push	{r4, lr}
 80054b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ba:	4291      	cmp	r1, r2
 80054bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c0:	d1f9      	bne.n	80054b6 <memcpy+0xe>
 80054c2:	bd10      	pop	{r4, pc}

080054c4 <memmove>:
 80054c4:	4288      	cmp	r0, r1
 80054c6:	b510      	push	{r4, lr}
 80054c8:	eb01 0402 	add.w	r4, r1, r2
 80054cc:	d902      	bls.n	80054d4 <memmove+0x10>
 80054ce:	4284      	cmp	r4, r0
 80054d0:	4623      	mov	r3, r4
 80054d2:	d807      	bhi.n	80054e4 <memmove+0x20>
 80054d4:	1e43      	subs	r3, r0, #1
 80054d6:	42a1      	cmp	r1, r4
 80054d8:	d008      	beq.n	80054ec <memmove+0x28>
 80054da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054e2:	e7f8      	b.n	80054d6 <memmove+0x12>
 80054e4:	4601      	mov	r1, r0
 80054e6:	4402      	add	r2, r0
 80054e8:	428a      	cmp	r2, r1
 80054ea:	d100      	bne.n	80054ee <memmove+0x2a>
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054f6:	e7f7      	b.n	80054e8 <memmove+0x24>

080054f8 <_free_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4605      	mov	r5, r0
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d043      	beq.n	8005588 <_free_r+0x90>
 8005500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005504:	1f0c      	subs	r4, r1, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	bfb8      	it	lt
 800550a:	18e4      	addlt	r4, r4, r3
 800550c:	f000 f8d0 	bl	80056b0 <__malloc_lock>
 8005510:	4a1e      	ldr	r2, [pc, #120]	; (800558c <_free_r+0x94>)
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	4610      	mov	r0, r2
 8005516:	b933      	cbnz	r3, 8005526 <_free_r+0x2e>
 8005518:	6063      	str	r3, [r4, #4]
 800551a:	6014      	str	r4, [r2, #0]
 800551c:	4628      	mov	r0, r5
 800551e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005522:	f000 b8cb 	b.w	80056bc <__malloc_unlock>
 8005526:	42a3      	cmp	r3, r4
 8005528:	d90a      	bls.n	8005540 <_free_r+0x48>
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	1862      	adds	r2, r4, r1
 800552e:	4293      	cmp	r3, r2
 8005530:	bf01      	itttt	eq
 8005532:	681a      	ldreq	r2, [r3, #0]
 8005534:	685b      	ldreq	r3, [r3, #4]
 8005536:	1852      	addeq	r2, r2, r1
 8005538:	6022      	streq	r2, [r4, #0]
 800553a:	6063      	str	r3, [r4, #4]
 800553c:	6004      	str	r4, [r0, #0]
 800553e:	e7ed      	b.n	800551c <_free_r+0x24>
 8005540:	461a      	mov	r2, r3
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	b10b      	cbz	r3, 800554a <_free_r+0x52>
 8005546:	42a3      	cmp	r3, r4
 8005548:	d9fa      	bls.n	8005540 <_free_r+0x48>
 800554a:	6811      	ldr	r1, [r2, #0]
 800554c:	1850      	adds	r0, r2, r1
 800554e:	42a0      	cmp	r0, r4
 8005550:	d10b      	bne.n	800556a <_free_r+0x72>
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	4401      	add	r1, r0
 8005556:	1850      	adds	r0, r2, r1
 8005558:	4283      	cmp	r3, r0
 800555a:	6011      	str	r1, [r2, #0]
 800555c:	d1de      	bne.n	800551c <_free_r+0x24>
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4401      	add	r1, r0
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	6053      	str	r3, [r2, #4]
 8005568:	e7d8      	b.n	800551c <_free_r+0x24>
 800556a:	d902      	bls.n	8005572 <_free_r+0x7a>
 800556c:	230c      	movs	r3, #12
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	e7d4      	b.n	800551c <_free_r+0x24>
 8005572:	6820      	ldr	r0, [r4, #0]
 8005574:	1821      	adds	r1, r4, r0
 8005576:	428b      	cmp	r3, r1
 8005578:	bf01      	itttt	eq
 800557a:	6819      	ldreq	r1, [r3, #0]
 800557c:	685b      	ldreq	r3, [r3, #4]
 800557e:	1809      	addeq	r1, r1, r0
 8005580:	6021      	streq	r1, [r4, #0]
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	6054      	str	r4, [r2, #4]
 8005586:	e7c9      	b.n	800551c <_free_r+0x24>
 8005588:	bd38      	pop	{r3, r4, r5, pc}
 800558a:	bf00      	nop
 800558c:	2000014c 	.word	0x2000014c

08005590 <_malloc_r>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	1ccd      	adds	r5, r1, #3
 8005594:	f025 0503 	bic.w	r5, r5, #3
 8005598:	3508      	adds	r5, #8
 800559a:	2d0c      	cmp	r5, #12
 800559c:	bf38      	it	cc
 800559e:	250c      	movcc	r5, #12
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	4606      	mov	r6, r0
 80055a4:	db01      	blt.n	80055aa <_malloc_r+0x1a>
 80055a6:	42a9      	cmp	r1, r5
 80055a8:	d903      	bls.n	80055b2 <_malloc_r+0x22>
 80055aa:	230c      	movs	r3, #12
 80055ac:	6033      	str	r3, [r6, #0]
 80055ae:	2000      	movs	r0, #0
 80055b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b2:	f000 f87d 	bl	80056b0 <__malloc_lock>
 80055b6:	4921      	ldr	r1, [pc, #132]	; (800563c <_malloc_r+0xac>)
 80055b8:	680a      	ldr	r2, [r1, #0]
 80055ba:	4614      	mov	r4, r2
 80055bc:	b99c      	cbnz	r4, 80055e6 <_malloc_r+0x56>
 80055be:	4f20      	ldr	r7, [pc, #128]	; (8005640 <_malloc_r+0xb0>)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	b923      	cbnz	r3, 80055ce <_malloc_r+0x3e>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4630      	mov	r0, r6
 80055c8:	f000 f862 	bl	8005690 <_sbrk_r>
 80055cc:	6038      	str	r0, [r7, #0]
 80055ce:	4629      	mov	r1, r5
 80055d0:	4630      	mov	r0, r6
 80055d2:	f000 f85d 	bl	8005690 <_sbrk_r>
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	d123      	bne.n	8005622 <_malloc_r+0x92>
 80055da:	230c      	movs	r3, #12
 80055dc:	4630      	mov	r0, r6
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f000 f86c 	bl	80056bc <__malloc_unlock>
 80055e4:	e7e3      	b.n	80055ae <_malloc_r+0x1e>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	1b5b      	subs	r3, r3, r5
 80055ea:	d417      	bmi.n	800561c <_malloc_r+0x8c>
 80055ec:	2b0b      	cmp	r3, #11
 80055ee:	d903      	bls.n	80055f8 <_malloc_r+0x68>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	441c      	add	r4, r3
 80055f4:	6025      	str	r5, [r4, #0]
 80055f6:	e004      	b.n	8005602 <_malloc_r+0x72>
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	42a2      	cmp	r2, r4
 80055fc:	bf0c      	ite	eq
 80055fe:	600b      	streq	r3, [r1, #0]
 8005600:	6053      	strne	r3, [r2, #4]
 8005602:	4630      	mov	r0, r6
 8005604:	f000 f85a 	bl	80056bc <__malloc_unlock>
 8005608:	f104 000b 	add.w	r0, r4, #11
 800560c:	1d23      	adds	r3, r4, #4
 800560e:	f020 0007 	bic.w	r0, r0, #7
 8005612:	1ac2      	subs	r2, r0, r3
 8005614:	d0cc      	beq.n	80055b0 <_malloc_r+0x20>
 8005616:	1a1b      	subs	r3, r3, r0
 8005618:	50a3      	str	r3, [r4, r2]
 800561a:	e7c9      	b.n	80055b0 <_malloc_r+0x20>
 800561c:	4622      	mov	r2, r4
 800561e:	6864      	ldr	r4, [r4, #4]
 8005620:	e7cc      	b.n	80055bc <_malloc_r+0x2c>
 8005622:	1cc4      	adds	r4, r0, #3
 8005624:	f024 0403 	bic.w	r4, r4, #3
 8005628:	42a0      	cmp	r0, r4
 800562a:	d0e3      	beq.n	80055f4 <_malloc_r+0x64>
 800562c:	1a21      	subs	r1, r4, r0
 800562e:	4630      	mov	r0, r6
 8005630:	f000 f82e 	bl	8005690 <_sbrk_r>
 8005634:	3001      	adds	r0, #1
 8005636:	d1dd      	bne.n	80055f4 <_malloc_r+0x64>
 8005638:	e7cf      	b.n	80055da <_malloc_r+0x4a>
 800563a:	bf00      	nop
 800563c:	2000014c 	.word	0x2000014c
 8005640:	20000150 	.word	0x20000150

08005644 <_realloc_r>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	4607      	mov	r7, r0
 8005648:	4614      	mov	r4, r2
 800564a:	460e      	mov	r6, r1
 800564c:	b921      	cbnz	r1, 8005658 <_realloc_r+0x14>
 800564e:	4611      	mov	r1, r2
 8005650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005654:	f7ff bf9c 	b.w	8005590 <_malloc_r>
 8005658:	b922      	cbnz	r2, 8005664 <_realloc_r+0x20>
 800565a:	f7ff ff4d 	bl	80054f8 <_free_r>
 800565e:	4625      	mov	r5, r4
 8005660:	4628      	mov	r0, r5
 8005662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005664:	f000 f830 	bl	80056c8 <_malloc_usable_size_r>
 8005668:	42a0      	cmp	r0, r4
 800566a:	d20f      	bcs.n	800568c <_realloc_r+0x48>
 800566c:	4621      	mov	r1, r4
 800566e:	4638      	mov	r0, r7
 8005670:	f7ff ff8e 	bl	8005590 <_malloc_r>
 8005674:	4605      	mov	r5, r0
 8005676:	2800      	cmp	r0, #0
 8005678:	d0f2      	beq.n	8005660 <_realloc_r+0x1c>
 800567a:	4631      	mov	r1, r6
 800567c:	4622      	mov	r2, r4
 800567e:	f7ff ff13 	bl	80054a8 <memcpy>
 8005682:	4631      	mov	r1, r6
 8005684:	4638      	mov	r0, r7
 8005686:	f7ff ff37 	bl	80054f8 <_free_r>
 800568a:	e7e9      	b.n	8005660 <_realloc_r+0x1c>
 800568c:	4635      	mov	r5, r6
 800568e:	e7e7      	b.n	8005660 <_realloc_r+0x1c>

08005690 <_sbrk_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	2300      	movs	r3, #0
 8005694:	4d05      	ldr	r5, [pc, #20]	; (80056ac <_sbrk_r+0x1c>)
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fc fd1c 	bl	80020d8 <_sbrk>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_sbrk_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_sbrk_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	200003bc 	.word	0x200003bc

080056b0 <__malloc_lock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <__malloc_lock+0x8>)
 80056b2:	f000 b811 	b.w	80056d8 <__retarget_lock_acquire_recursive>
 80056b6:	bf00      	nop
 80056b8:	200003c4 	.word	0x200003c4

080056bc <__malloc_unlock>:
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <__malloc_unlock+0x8>)
 80056be:	f000 b80c 	b.w	80056da <__retarget_lock_release_recursive>
 80056c2:	bf00      	nop
 80056c4:	200003c4 	.word	0x200003c4

080056c8 <_malloc_usable_size_r>:
 80056c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056cc:	1f18      	subs	r0, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfbc      	itt	lt
 80056d2:	580b      	ldrlt	r3, [r1, r0]
 80056d4:	18c0      	addlt	r0, r0, r3
 80056d6:	4770      	bx	lr

080056d8 <__retarget_lock_acquire_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_release_recursive>:
 80056da:	4770      	bx	lr

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
