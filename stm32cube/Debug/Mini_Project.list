
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d8  080057d8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080057d8  080057d8  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057d8  080057d8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080057e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000009c  0800587c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800587c  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ea9  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308e  00000000  00000000  00037f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0003b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0003be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8c  00000000  00000000  0003cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127d7  00000000  00000000  0005689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3d8  00000000  00000000  00069073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f444b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  000f44a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005758 	.word	0x08005758

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08005758 	.word	0x08005758

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <isButtonPressed+0x30>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <isButtonPressed+0x30>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2100      	movs	r1, #0
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <isButtonPressed+0x24>
	}
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000108 	.word	0x20000108

0800096c <button_process>:

void button_process(int index){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db07      	blt.n	800098a <button_process+0x1e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b03      	cmp	r3, #3
 800097e:	dc04      	bgt.n	800098a <button_process+0x1e>
		button_flag[index] = 1;
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <button_process+0x28>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000108 	.word	0x20000108

08000998 <button_reading>:

void button_reading(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e0e5      	b.n	8000b70 <button_reading+0x1d8>
        //debouncing button
		debounce_buffer3[i] = debounce_buffer2[i];
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4976      	ldr	r1, [pc, #472]	; (8000b84 <button_reading+0x1ec>)
 80009aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ae:	4976      	ldr	r1, [pc, #472]	; (8000b88 <button_reading+0x1f0>)
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4974      	ldr	r1, [pc, #464]	; (8000b8c <button_reading+0x1f4>)
 80009ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009be:	4971      	ldr	r1, [pc, #452]	; (8000b84 <button_reading+0x1ec>)
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// readpin
		//...

		if(i == 0) debounce_buffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10b      	bne.n	80009e2 <button_reading+0x4a>
 80009ca:	2101      	movs	r1, #1
 80009cc:	4870      	ldr	r0, [pc, #448]	; (8000b90 <button_reading+0x1f8>)
 80009ce:	f002 fa57 	bl	8002e80 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4611      	mov	r1, r2
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <button_reading+0x1f4>)
 80009dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009e0:	e02b      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 1) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <button_reading+0x68>
 80009e8:	2102      	movs	r1, #2
 80009ea:	4869      	ldr	r0, [pc, #420]	; (8000b90 <button_reading+0x1f8>)
 80009ec:	f002 fa48 	bl	8002e80 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a64      	ldr	r2, [pc, #400]	; (8000b8c <button_reading+0x1f4>)
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fe:	e01c      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 2) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d10b      	bne.n	8000a1e <button_reading+0x86>
 8000a06:	2110      	movs	r1, #16
 8000a08:	4861      	ldr	r0, [pc, #388]	; (8000b90 <button_reading+0x1f8>)
 8000a0a:	f002 fa39 	bl	8002e80 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <button_reading+0x1f4>)
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1c:	e00d      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 3) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d10a      	bne.n	8000a3a <button_reading+0xa2>
 8000a24:	2101      	movs	r1, #1
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <button_reading+0x1fc>)
 8000a28:	f002 fa2a 	bl	8002e80 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <button_reading+0x1f4>)
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


        //process after debouncing
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <button_reading+0x1f0>)
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	494f      	ldr	r1, [pc, #316]	; (8000b84 <button_reading+0x1ec>)
 8000a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f040 8084 	bne.w	8000b58 <button_reading+0x1c0>
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <button_reading+0x1ec>)
 8000a54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	494c      	ldr	r1, [pc, #304]	; (8000b8c <button_reading+0x1f4>)
 8000a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d179      	bne.n	8000b58 <button_reading+0x1c0>
			button_buffer[i] = debounce_buffer3[i];
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4947      	ldr	r1, [pc, #284]	; (8000b88 <button_reading+0x1f0>)
 8000a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a6e:	494a      	ldr	r1, [pc, #296]	; (8000b98 <button_reading+0x200>)
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// fsm for processing button
			switch(button_state[i]){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <button_reading+0x204>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	2b0d      	cmp	r3, #13
 8000a7e:	d043      	beq.n	8000b08 <button_reading+0x170>
 8000a80:	2b0d      	cmp	r3, #13
 8000a82:	dc6b      	bgt.n	8000b5c <button_reading+0x1c4>
 8000a84:	2b0b      	cmp	r3, #11
 8000a86:	d002      	beq.n	8000a8e <button_reading+0xf6>
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d02d      	beq.n	8000ae8 <button_reading+0x150>
					button_state[i] = BUTTON_IS_RELEASED;
					counter_for_button_pressed[i] = 0;
				}
				break;
			default:
				break;
 8000a8c:	e066      	b.n	8000b5c <button_reading+0x1c4>
				counter_for_button_pressed[i]++;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a43      	ldr	r2, [pc, #268]	; (8000ba0 <button_reading+0x208>)
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	3201      	adds	r2, #1
 8000a98:	4941      	ldr	r1, [pc, #260]	; (8000ba0 <button_reading+0x208>)
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == WAITING_TIME/TIMER_CYCLE){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <button_reading+0x208>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d10d      	bne.n	8000ac6 <button_reading+0x12e>
					button_state[i] = BUTTON_IS_LONG_PRESSED;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <button_reading+0x204>)
 8000aae:	210d      	movs	r1, #13
 8000ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <button_reading+0x208>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff53 	bl	800096c <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <button_reading+0x200>)
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d146      	bne.n	8000b60 <button_reading+0x1c8>
					button_state[i] = BUTTON_IS_RELEASED;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <button_reading+0x204>)
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <button_reading+0x208>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ae6:	e03b      	b.n	8000b60 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <button_reading+0x200>)
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d137      	bne.n	8000b64 <button_reading+0x1cc>
					button_state[i] = BUTTON_IS_PRESSED;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <button_reading+0x204>)
 8000af8:	210b      	movs	r1, #11
 8000afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff33 	bl	800096c <button_process>
				break;
 8000b06:	e02d      	b.n	8000b64 <button_reading+0x1cc>
				counter_for_button_pressed[i]++;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <button_reading+0x208>)
 8000b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b10:	3201      	adds	r2, #1
 8000b12:	4923      	ldr	r1, [pc, #140]	; (8000ba0 <button_reading+0x208>)
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <button_reading+0x208>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2b14      	cmp	r3, #20
 8000b22:	d108      	bne.n	8000b36 <button_reading+0x19e>
					button_process(i);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff20 	bl	800096c <button_process>
					counter_for_button_pressed[i] = 0;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <button_reading+0x208>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <button_reading+0x200>)
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d112      	bne.n	8000b68 <button_reading+0x1d0>
					button_state[i] = BUTTON_IS_RELEASED;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <button_reading+0x204>)
 8000b46:	210c      	movs	r1, #12
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <button_reading+0x208>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000b56:	e007      	b.n	8000b68 <button_reading+0x1d0>
			}
		}
 8000b58:	bf00      	nop
 8000b5a:	e006      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b5c:	bf00      	nop
 8000b5e:	e004      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b60:	bf00      	nop
 8000b62:	e002      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b68:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f67f af16 	bls.w	80009a4 <button_reading+0xc>
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000d8 	.word	0x200000d8
 8000b88:	200000e8 	.word	0x200000e8
 8000b8c:	200000c8 	.word	0x200000c8
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200000f8 	.word	0x200000f8

08000ba4 <fsm_auto_run>:
 *      Author: phamv
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	switch (status)
 8000ba8:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <fsm_auto_run+0x234>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	f200 810f 	bhi.w	8000dd2 <fsm_auto_run+0x22e>
 8000bb4:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <fsm_auto_run+0x18>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000bf5 	.word	0x08000bf5
 8000bc4:	08000c65 	.word	0x08000c65
 8000bc8:	08000cdd 	.word	0x08000cdd
 8000bcc:	08000d4f 	.word	0x08000d4f
	{
	case INIT:
		status=AUTO_RED_GREEN;
 8000bd0:	4b81      	ldr	r3, [pc, #516]	; (8000dd8 <fsm_auto_run+0x234>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f001 fb13 	bl	8002204 <setTimer1>
		counter = max_red1;
 8000bde:	4b7f      	ldr	r3, [pc, #508]	; (8000ddc <fsm_auto_run+0x238>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a7f      	ldr	r2, [pc, #508]	; (8000de0 <fsm_auto_run+0x23c>)
 8000be4:	6013      	str	r3, [r2, #0]
		displayCounter();
 8000be6:	f001 fd53 	bl	8002690 <displayCounter>
		setTraffic1Red();
 8000bea:	f001 fb8f 	bl	800230c <setTraffic1Red>
		setTraffic2Green();
 8000bee:	f001 fbd9 	bl	80023a4 <setTraffic2Green>
		break;
 8000bf2:	e0ee      	b.n	8000dd2 <fsm_auto_run+0x22e>
	case AUTO_RED_GREEN:
		if(timer1_flag == 1){
 8000bf4:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <fsm_auto_run+0x240>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d115      	bne.n	8000c28 <fsm_auto_run+0x84>
			counter--;
 8000bfc:	4b78      	ldr	r3, [pc, #480]	; (8000de0 <fsm_auto_run+0x23c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	4a77      	ldr	r2, [pc, #476]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c04:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 fafb 	bl	8002204 <setTimer1>
			if(counter == max_yellow2){
 8000c0e:	4b74      	ldr	r3, [pc, #464]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b75      	ldr	r3, [pc, #468]	; (8000de8 <fsm_auto_run+0x244>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d104      	bne.n	8000c24 <fsm_auto_run+0x80>
				setTraffic2Yellow();
 8000c1a:	f001 fbe7 	bl	80023ec <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 8000c1e:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c24:	f001 fd34 	bl	8002690 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fe85 	bl	8000938 <isButtonPressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80c7 	beq.w	8000dc4 <fsm_auto_run+0x220>
			isButtonPressed(2);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fe7e 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fe7b 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000c42:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c44:	220b      	movs	r2, #11
 8000c46:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000c48:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000c4c:	f001 fada 	bl	8002204 <setTimer1>
			setTraffic1Red();
 8000c50:	f001 fb5c 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 8000c54:	f001 fba6 	bl	80023a4 <setTraffic2Green>
			counter = 99;
 8000c58:	4b61      	ldr	r3, [pc, #388]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000c5e:	f001 fd17 	bl	8002690 <displayCounter>
			break;
 8000c62:	e0b6      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
	case AUTO_RED_YELLOW:
		if(timer1_flag == 1){
 8000c64:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <fsm_auto_run+0x240>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d119      	bne.n	8000ca0 <fsm_auto_run+0xfc>
			counter--;
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a5b      	ldr	r2, [pc, #364]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c74:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f001 fac3 	bl	8002204 <setTimer1>
			if(counter == 0){
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10a      	bne.n	8000c9c <fsm_auto_run+0xf8>
				counter = max_green1;
 8000c86:	4b59      	ldr	r3, [pc, #356]	; (8000dec <fsm_auto_run+0x248>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a55      	ldr	r2, [pc, #340]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c8c:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 8000c8e:	f001 fb61 	bl	8002354 <setTraffic1Green>
				setTraffic2Red();
 8000c92:	f001 fb4f 	bl	8002334 <setTraffic2Red>
				status=AUTO_GREEN_RED;
 8000c96:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c9c:	f001 fcf8 	bl	8002690 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fe49 	bl	8000938 <isButtonPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 808d 	beq.w	8000dc8 <fsm_auto_run+0x224>
			isButtonPressed(2);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fe42 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f7ff fe3f 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <fsm_auto_run+0x234>)
 8000cbc:	220b      	movs	r2, #11
 8000cbe:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000cc0:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000cc4:	f001 fa9e 	bl	8002204 <setTimer1>
			setTraffic1Red();
 8000cc8:	f001 fb20 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 8000ccc:	f001 fb6a 	bl	80023a4 <setTraffic2Green>
			counter = 99;
 8000cd0:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cd2:	2263      	movs	r2, #99	; 0x63
 8000cd4:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000cd6:	f001 fcdb 	bl	8002690 <displayCounter>
			break;
 8000cda:	e07a      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_GREEN_RED:
		if(timer1_flag == 1){
 8000cdc:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <fsm_auto_run+0x240>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d117      	bne.n	8000d14 <fsm_auto_run+0x170>
			counter--;
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <fsm_auto_run+0x23c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cec:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f001 fa87 	bl	8002204 <setTimer1>
			if(counter == 0){
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d108      	bne.n	8000d10 <fsm_auto_run+0x16c>
				counter = max_yellow1;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <fsm_auto_run+0x24c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d04:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 8000d06:	f001 fb5d 	bl	80023c4 <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d10:	f001 fcbe 	bl	8002690 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fe0f 	bl	8000938 <isButtonPressed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d055      	beq.n	8000dcc <fsm_auto_run+0x228>
			isButtonPressed(2);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fe09 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f7ff fe06 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d2e:	220b      	movs	r2, #11
 8000d30:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000d32:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000d36:	f001 fa65 	bl	8002204 <setTimer1>
			setTraffic1Red();
 8000d3a:	f001 fae7 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 8000d3e:	f001 fb31 	bl	80023a4 <setTraffic2Green>
			counter = 99;
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d44:	2263      	movs	r2, #99	; 0x63
 8000d46:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000d48:	f001 fca2 	bl	8002690 <displayCounter>
			break;
 8000d4c:	e041      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_YELLOW_RED:

		if(timer1_flag == 1){
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <fsm_auto_run+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d119      	bne.n	8000d8a <fsm_auto_run+0x1e6>
			counter--;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d5e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f001 fa4e 	bl	8002204 <setTimer1>
			if(counter == 0){
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10a      	bne.n	8000d86 <fsm_auto_run+0x1e2>
				counter = max_red1;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <fsm_auto_run+0x238>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d76:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 8000d78:	f001 fac8 	bl	800230c <setTraffic1Red>
				setTraffic2Green();
 8000d7c:	f001 fb12 	bl	80023a4 <setTraffic2Green>
				status=AUTO_RED_GREEN;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d86:	f001 fc83 	bl	8002690 <displayCounter>
		}

		if(isButtonPressed(1)==1){
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fdd4 	bl	8000938 <isButtonPressed>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11c      	bne.n	8000dd0 <fsm_auto_run+0x22c>
			isButtonPressed(2);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fdce 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fdcb 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <fsm_auto_run+0x234>)
 8000da4:	220b      	movs	r2, #11
 8000da6:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000da8:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000dac:	f001 fa2a 	bl	8002204 <setTimer1>
			setTraffic1Red();
 8000db0:	f001 faac 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 8000db4:	f001 faf6 	bl	80023a4 <setTraffic2Green>
			counter = 99;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <fsm_auto_run+0x23c>)
 8000dba:	2263      	movs	r2, #99	; 0x63
 8000dbc:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000dbe:	f001 fc67 	bl	8002690 <displayCounter>
			break;
 8000dc2:	e006      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc4:	bf00      	nop
 8000dc6:	e004      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc8:	bf00      	nop
 8000dca:	e002      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
 8000dd0:	bf00      	nop
	}

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000011c 	.word	0x2000011c
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	20000124 	.word	0x20000124
 8000de4:	2000013c 	.word	0x2000013c
 8000de8:	20000024 	.word	0x20000024
 8000dec:	20000014 	.word	0x20000014
 8000df0:	20000018 	.word	0x20000018

08000df4 <fsm_manual_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	switch (status) {
 8000df8:	4b99      	ldr	r3, [pc, #612]	; (8001060 <fsm_manual_run+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b0b      	subs	r3, #11
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f200 8122 	bhi.w	8001048 <fsm_manual_run+0x254>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <fsm_manual_run+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000ea9 	.word	0x08000ea9
 8000e14:	08000f35 	.word	0x08000f35
 8000e18:	08000fbf 	.word	0x08000fbf
		case MAN_RED_GREEN:
			isButtonPressed(3);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff fd8b 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000e22:	4b90      	ldr	r3, [pc, #576]	; (8001064 <fsm_manual_run+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d010      	beq.n	8000e4c <fsm_manual_run+0x58>
				status = AUTO_RED_YELLOW;
 8000e2a:	4b8d      	ldr	r3, [pc, #564]	; (8001060 <fsm_manual_run+0x26c>)
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f001 f9e6 	bl	8002204 <setTimer1>
				counter = max_yellow2;
 8000e38:	4b8b      	ldr	r3, [pc, #556]	; (8001068 <fsm_manual_run+0x274>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a8b      	ldr	r2, [pc, #556]	; (800106c <fsm_manual_run+0x278>)
 8000e3e:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e40:	f001 fc26 	bl	8002690 <displayCounter>
				setTraffic1Red();
 8000e44:	f001 fa62 	bl	800230c <setTraffic1Red>
				setTraffic2Yellow();
 8000e48:	f001 fad0 	bl	80023ec <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fd73 	bl	8000938 <isButtonPressed>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d014      	beq.n	8000e82 <fsm_manual_run+0x8e>
				isButtonPressed(2);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fd6d 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000e5e:	4b80      	ldr	r3, [pc, #512]	; (8001060 <fsm_manual_run+0x26c>)
 8000e60:	2215      	movs	r2, #21
 8000e62:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f001 f9cc 	bl	8002204 <setTimer1>
				counter = max_red1;
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <fsm_manual_run+0x27c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a7e      	ldr	r2, [pc, #504]	; (800106c <fsm_manual_run+0x278>)
 8000e72:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e74:	f001 fc0c 	bl	8002690 <displayCounter>
				clearTraffic1();
 8000e78:	f001 fa80 	bl	800237c <clearTraffic1>
				clearTraffic2();
 8000e7c:	f001 fac6 	bl	800240c <clearTraffic2>
				break;
 8000e80:	e0eb      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff fd58 	bl	8000938 <isButtonPressed>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80de 	beq.w	800104c <fsm_manual_run+0x258>
				status = MAN_RED_YELLOW;
 8000e90:	4b73      	ldr	r3, [pc, #460]	; (8001060 <fsm_manual_run+0x26c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000e96:	f001 fa39 	bl	800230c <setTraffic1Red>
				setTraffic2Yellow();
 8000e9a:	f001 faa7 	bl	80023ec <setTraffic2Yellow>
				setTimer1(60000);
 8000e9e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000ea2:	f001 f9af 	bl	8002204 <setTimer1>
			}
			break;
 8000ea6:	e0d1      	b.n	800104c <fsm_manual_run+0x258>

		case MAN_RED_YELLOW:
			if(isButtonPressed(3));
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff fd45 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000eae:	4b6d      	ldr	r3, [pc, #436]	; (8001064 <fsm_manual_run+0x270>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d010      	beq.n	8000ed8 <fsm_manual_run+0xe4>
				status = AUTO_GREEN_RED;
 8000eb6:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <fsm_manual_run+0x26c>)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec0:	f001 f9a0 	bl	8002204 <setTimer1>
				counter = max_green1;
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <fsm_manual_run+0x280>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a68      	ldr	r2, [pc, #416]	; (800106c <fsm_manual_run+0x278>)
 8000eca:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000ecc:	f001 fbe0 	bl	8002690 <displayCounter>
				setTraffic1Green();
 8000ed0:	f001 fa40 	bl	8002354 <setTraffic1Green>
				setTraffic2Red();
 8000ed4:	f001 fa2e 	bl	8002334 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fd2d 	bl	8000938 <isButtonPressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <fsm_manual_run+0x11a>
				isButtonPressed(2);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f7ff fd27 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <fsm_manual_run+0x26c>)
 8000eec:	2215      	movs	r2, #21
 8000eee:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f001 f986 	bl	8002204 <setTimer1>
				counter = max_red1;
 8000ef8:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <fsm_manual_run+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a5b      	ldr	r2, [pc, #364]	; (800106c <fsm_manual_run+0x278>)
 8000efe:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f00:	f001 fbc6 	bl	8002690 <displayCounter>
				clearTraffic1();
 8000f04:	f001 fa3a 	bl	800237c <clearTraffic1>
				clearTraffic2();
 8000f08:	f001 fa80 	bl	800240c <clearTraffic2>
				break;
 8000f0c:	e0a5      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fd12 	bl	8000938 <isButtonPressed>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 809a 	beq.w	8001050 <fsm_manual_run+0x25c>
				status = MAN_GREEN_RED;
 8000f1c:	4b50      	ldr	r3, [pc, #320]	; (8001060 <fsm_manual_run+0x26c>)
 8000f1e:	220d      	movs	r2, #13
 8000f20:	601a      	str	r2, [r3, #0]
				setTraffic1Green();
 8000f22:	f001 fa17 	bl	8002354 <setTraffic1Green>
				setTraffic2Red();
 8000f26:	f001 fa05 	bl	8002334 <setTraffic2Red>
				setTimer1(60000);
 8000f2a:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000f2e:	f001 f969 	bl	8002204 <setTimer1>
			}
			break;
 8000f32:	e08d      	b.n	8001050 <fsm_manual_run+0x25c>

		case MAN_GREEN_RED:
			isButtonPressed(3);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f7ff fcff 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <fsm_manual_run+0x270>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d010      	beq.n	8000f64 <fsm_manual_run+0x170>
				status = AUTO_YELLOW_RED;
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <fsm_manual_run+0x26c>)
 8000f44:	2205      	movs	r2, #5
 8000f46:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f001 f95a 	bl	8002204 <setTimer1>
				counter = max_yellow1;
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <fsm_manual_run+0x284>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <fsm_manual_run+0x278>)
 8000f56:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f58:	f001 fb9a 	bl	8002690 <displayCounter>
				setTraffic1Yellow();
 8000f5c:	f001 fa32 	bl	80023c4 <setTraffic1Yellow>
				setTraffic2Red();
 8000f60:	f001 f9e8 	bl	8002334 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fce7 	bl	8000938 <isButtonPressed>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d014      	beq.n	8000f9a <fsm_manual_run+0x1a6>
				isButtonPressed(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f7ff fce1 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <fsm_manual_run+0x26c>)
 8000f78:	2215      	movs	r2, #21
 8000f7a:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f001 f940 	bl	8002204 <setTimer1>
				counter = max_red1;
 8000f84:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <fsm_manual_run+0x27c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a38      	ldr	r2, [pc, #224]	; (800106c <fsm_manual_run+0x278>)
 8000f8a:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f8c:	f001 fb80 	bl	8002690 <displayCounter>
				clearTraffic1();
 8000f90:	f001 f9f4 	bl	800237c <clearTraffic1>
				clearTraffic2();
 8000f94:	f001 fa3a 	bl	800240c <clearTraffic2>
				break;
 8000f98:	e05f      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fccc 	bl	8000938 <isButtonPressed>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d056      	beq.n	8001054 <fsm_manual_run+0x260>
				status = MAN_YELLOW_RED;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <fsm_manual_run+0x26c>)
 8000fa8:	220e      	movs	r2, #14
 8000faa:	601a      	str	r2, [r3, #0]
				setTraffic1Yellow();
 8000fac:	f001 fa0a 	bl	80023c4 <setTraffic1Yellow>
				setTraffic2Red();
 8000fb0:	f001 f9c0 	bl	8002334 <setTraffic2Red>
				setTimer1(60000);
 8000fb4:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000fb8:	f001 f924 	bl	8002204 <setTimer1>
			}

			break;
 8000fbc:	e04a      	b.n	8001054 <fsm_manual_run+0x260>

		case MAN_YELLOW_RED:
			isButtonPressed(3);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f7ff fcba 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <fsm_manual_run+0x270>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d010      	beq.n	8000fee <fsm_manual_run+0x1fa>
				status = AUTO_RED_GREEN;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <fsm_manual_run+0x26c>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f001 f915 	bl	8002204 <setTimer1>
				counter = max_red1;
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <fsm_manual_run+0x27c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <fsm_manual_run+0x278>)
 8000fe0:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000fe2:	f001 fb55 	bl	8002690 <displayCounter>
				setTraffic1Red();
 8000fe6:	f001 f991 	bl	800230c <setTraffic1Red>
				setTraffic2Green();
 8000fea:	f001 f9db 	bl	80023a4 <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fca2 	bl	8000938 <isButtonPressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d014      	beq.n	8001024 <fsm_manual_run+0x230>
				isButtonPressed(2);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f7ff fc9c 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <fsm_manual_run+0x26c>)
 8001002:	2215      	movs	r2, #21
 8001004:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f001 f8fb 	bl	8002204 <setTimer1>
				counter = max_red1;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <fsm_manual_run+0x27c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <fsm_manual_run+0x278>)
 8001014:	6013      	str	r3, [r2, #0]
				displayCounter();
 8001016:	f001 fb3b 	bl	8002690 <displayCounter>
				clearTraffic1();
 800101a:	f001 f9af 	bl	800237c <clearTraffic1>
				clearTraffic2();
 800101e:	f001 f9f5 	bl	800240c <clearTraffic2>
				break;
 8001022:	e01a      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff fc87 	bl	8000938 <isButtonPressed>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <fsm_manual_run+0x264>
				status = MAN_RED_GREEN;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <fsm_manual_run+0x26c>)
 8001032:	220b      	movs	r2, #11
 8001034:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8001036:	f001 f969 	bl	800230c <setTraffic1Red>
				setTraffic2Green();
 800103a:	f001 f9b3 	bl	80023a4 <setTraffic2Green>
				setTimer1(60000);
 800103e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001042:	f001 f8df 	bl	8002204 <setTimer1>
			}


			break;
 8001046:	e007      	b.n	8001058 <fsm_manual_run+0x264>
		default:
			break;
 8001048:	bf00      	nop
 800104a:	e006      	b.n	800105a <fsm_manual_run+0x266>
			break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000011c 	.word	0x2000011c
 8001064:	2000013c 	.word	0x2000013c
 8001068:	20000024 	.word	0x20000024
 800106c:	20000124 	.word	0x20000124
 8001070:	20000010 	.word	0x20000010
 8001074:	20000014 	.word	0x20000014
 8001078:	20000018 	.word	0x20000018

0800107c <fsm_pedestrian_run>:

#include "fsm_pedestrian.h"

int PWM = 0;

void fsm_pedestrian_run(){
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 8001080:	4b72      	ldr	r3, [pc, #456]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	2b03      	cmp	r3, #3
 8001088:	f200 80d6 	bhi.w	8001238 <fsm_pedestrian_run+0x1bc>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <fsm_pedestrian_run+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a5 	.word	0x080010a5
 8001098:	080010b1 	.word	0x080010b1
 800109c:	08001133 	.word	0x08001133
 80010a0:	08001181 	.word	0x08001181
		case INIT:
			clearPedestrian();
 80010a4:	f001 f9ea 	bl	800247c <clearPedestrian>
			pedestrianStatus = PED_NONE;
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	601a      	str	r2, [r3, #0]
			break;
 80010ae:	e0ca      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
		case PED_NONE:
			if(isButtonPressed(0)){
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fc41 	bl	8000938 <isButtonPressed>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80bf 	beq.w	800123c <fsm_pedestrian_run+0x1c0>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW){
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <fsm_pedestrian_run+0x52>
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d108      	bne.n	80010e0 <fsm_pedestrian_run+0x64>
					pedestrianStatus = PED_GREEN;
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 80010d4:	f001 f9be 	bl	8002454 <setPedestrianGreen>
					setTimer2(250);
 80010d8:	20fa      	movs	r0, #250	; 0xfa
 80010da:	f001 f8af 	bl	800223c <setTimer2>
 80010de:	e027      	b.n	8001130 <fsm_pedestrian_run+0xb4>
				} else if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW ){
 80010e0:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b0b      	cmp	r3, #11
 80010e6:	d003      	beq.n	80010f0 <fsm_pedestrian_run+0x74>
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	d108      	bne.n	8001102 <fsm_pedestrian_run+0x86>
					pedestrianStatus = PED_GREEN;
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 80010f6:	f001 f9ad 	bl	8002454 <setPedestrianGreen>
					setTimer2(0);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f001 f89e 	bl	800223c <setTimer2>
 8001100:	e016      	b.n	8001130 <fsm_pedestrian_run+0xb4>
				}
				else if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d00c      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b0d      	cmp	r3, #13
 8001110:	d008      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 8001112:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b05      	cmp	r3, #5
 8001118:	d004      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 800111a:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b0e      	cmp	r3, #14
 8001120:	f040 808c 	bne.w	800123c <fsm_pedestrian_run+0x1c0>
					pedestrianStatus = PED_RED;
 8001124:	4b49      	ldr	r3, [pc, #292]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001126:	2203      	movs	r2, #3
 8001128:	601a      	str	r2, [r3, #0]
					setPedestrianRed();
 800112a:	f001 f97f 	bl	800242c <setPedestrianRed>
				}
			}
			break;
 800112e:	e085      	b.n	800123c <fsm_pedestrian_run+0x1c0>
 8001130:	e084      	b.n	800123c <fsm_pedestrian_run+0x1c0>
		case PED_RED:
			if(timer2_flag){
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <fsm_pedestrian_run+0xd0>
				timer2_flag = 0;
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
				clearPedestrian();
 8001146:	f001 f999 	bl	800247c <clearPedestrian>
				break;
 800114a:	e07c      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			}
			else if(status == AUTO_RED_GREEN){
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d108      	bne.n	8001166 <fsm_pedestrian_run+0xea>
				pedestrianStatus = PED_GREEN;
 8001154:	4b3d      	ldr	r3, [pc, #244]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001156:	2204      	movs	r2, #4
 8001158:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 800115a:	f001 f97b 	bl	8002454 <setPedestrianGreen>
				setTimer2(250);
 800115e:	20fa      	movs	r0, #250	; 0xfa
 8001160:	f001 f86c 	bl	800223c <setTimer2>
			else if (status == MAN_RED_GREEN){
				pedestrianStatus = PED_GREEN;
				setPedestrianGreen();
				setTimer2(0);
			}
			break;
 8001164:	e06c      	b.n	8001240 <fsm_pedestrian_run+0x1c4>
			else if (status == MAN_RED_GREEN){
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b0b      	cmp	r3, #11
 800116c:	d168      	bne.n	8001240 <fsm_pedestrian_run+0x1c4>
				pedestrianStatus = PED_GREEN;
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001170:	2204      	movs	r2, #4
 8001172:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 8001174:	f001 f96e 	bl	8002454 <setPedestrianGreen>
				setTimer2(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f001 f85f 	bl	800223c <setTimer2>
			break;
 800117e:	e05f      	b.n	8001240 <fsm_pedestrian_run+0x1c4>
		case PED_GREEN:
			if(timer2_flag){
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d039      	beq.n	80011fc <fsm_pedestrian_run+0x180>
				if(PWM == 0){
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12a      	bne.n	80011e6 <fsm_pedestrian_run+0x16a>
					PWM = 63-63*counter/(double)max_red1;
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <fsm_pedestrian_run+0x1e0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f928 	bl	80003f0 <__aeabi_i2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <fsm_pedestrian_run+0x1e4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f921 	bl	80003f0 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff faaf 	bl	8000718 <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4928      	ldr	r1, [pc, #160]	; (8001264 <fsm_pedestrian_run+0x1e8>)
 80011c4:	f7fe ffc6 	bl	8000154 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fb8a 	bl	80008e8 <__aeabi_d2iz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011d8:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <fsm_pedestrian_run+0x1ec>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
 80011e4:	e007      	b.n	80011f6 <fsm_pedestrian_run+0x17a>
				} else {
					PWM = 0;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <fsm_pedestrian_run+0x1ec>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 80011f6:	20fa      	movs	r0, #250	; 0xfa
 80011f8:	f001 f820 	bl	800223c <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d00b      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b0d      	cmp	r3, #13
 800120a:	d007      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d003      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b0e      	cmp	r3, #14
 800121a:	d113      	bne.n	8001244 <fsm_pedestrian_run+0x1c8>
				pedestrianStatus = PED_RED;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <fsm_pedestrian_run+0x1d0>)
 800121e:	2203      	movs	r2, #3
 8001220:	601a      	str	r2, [r3, #0]
				setTimer2(2000);
 8001222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001226:	f001 f809 	bl	800223c <setTimer2>
				setPedestrianRed();
 800122a:	f001 f8ff 	bl	800242c <setPedestrianRed>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <fsm_pedestrian_run+0x1ec>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8001236:	e005      	b.n	8001244 <fsm_pedestrian_run+0x1c8>
		default:
			break;
 8001238:	bf00      	nop
 800123a:	e004      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	bf00      	nop
 800124c:	20000120 	.word	0x20000120
 8001250:	2000011c 	.word	0x2000011c
 8001254:	20000140 	.word	0x20000140
 8001258:	20000118 	.word	0x20000118
 800125c:	20000124 	.word	0x20000124
 8001260:	20000010 	.word	0x20000010
 8001264:	404f8000 	.word	0x404f8000
 8001268:	2000015c 	.word	0x2000015c

0800126c <fsm_tuning_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_tuning.h"

void fsm_tuning_run(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	switch(status){
 8001270:	4bb6      	ldr	r3, [pc, #728]	; (800154c <fsm_tuning_run+0x2e0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b15      	subs	r3, #21
 8001276:	2b05      	cmp	r3, #5
 8001278:	f200 8276 	bhi.w	8001768 <fsm_tuning_run+0x4fc>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <fsm_tuning_run+0x18>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	0800129d 	.word	0x0800129d
 8001288:	08001363 	.word	0x08001363
 800128c:	08001429 	.word	0x08001429
 8001290:	080014f3 	.word	0x080014f3
 8001294:	080015d9 	.word	0x080015d9
 8001298:	080016a1 	.word	0x080016a1
	case TUNING_RED1:

		if(timer1_flag){
 800129c:	4bac      	ldr	r3, [pc, #688]	; (8001550 <fsm_tuning_run+0x2e4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 80012a4:	4baa      	ldr	r3, [pc, #680]	; (8001550 <fsm_tuning_run+0x2e4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ae:	f000 ffa9 	bl	8002204 <setTimer1>
			toggleTraffic1Red();
 80012b2:	f001 f8f7 	bl	80024a4 <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff fb3e 	bl	8000938 <isButtonPressed>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d019      	beq.n	80012f6 <fsm_tuning_run+0x8a>
			isButtonPressed(2);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff fb38 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f7ff fb35 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 80012ce:	4b9f      	ldr	r3, [pc, #636]	; (800154c <fsm_tuning_run+0x2e0>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 80012d4:	f001 f930 	bl	8002538 <acceptTraffic1Red>
			setTimer1(1000);
 80012d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012dc:	f000 ff92 	bl	8002204 <setTimer1>
			counter = max_red1;
 80012e0:	4b9c      	ldr	r3, [pc, #624]	; (8001554 <fsm_tuning_run+0x2e8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a9c      	ldr	r2, [pc, #624]	; (8001558 <fsm_tuning_run+0x2ec>)
 80012e6:	6013      	str	r3, [r2, #0]
			displayCounter();
 80012e8:	f001 f9d2 	bl	8002690 <displayCounter>
			setTraffic1Red();
 80012ec:	f001 f80e 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 80012f0:	f001 f858 	bl	80023a4 <setTraffic2Green>
			break;
 80012f4:	e245      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fb1e 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80012fc:	2002      	movs	r0, #2
 80012fe:	f7ff fb1b 	bl	8000938 <isButtonPressed>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d016      	beq.n	8001336 <fsm_tuning_run+0xca>
			isButtonPressed(3);
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff fb15 	bl	8000938 <isButtonPressed>
			status = TUNING_RED2;
 800130e:	4b8f      	ldr	r3, [pc, #572]	; (800154c <fsm_tuning_run+0x2e0>)
 8001310:	2216      	movs	r2, #22
 8001312:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	f000 ff74 	bl	8002204 <setTimer1>
			acceptTraffic1Red();
 800131c:	f001 f90c 	bl	8002538 <acceptTraffic1Red>
			counter = max_red2;
 8001320:	4b8e      	ldr	r3, [pc, #568]	; (800155c <fsm_tuning_run+0x2f0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a8c      	ldr	r2, [pc, #560]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001326:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001328:	f001 f9b2 	bl	8002690 <displayCounter>
			clearTraffic1();
 800132c:	f001 f826 	bl	800237c <clearTraffic1>
			clearTraffic2();
 8001330:	f001 f86c 	bl	800240c <clearTraffic2>
			break;
 8001334:	e225      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff fafe 	bl	8000938 <isButtonPressed>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8214 	beq.w	800176c <fsm_tuning_run+0x500>
			counter++;
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a83      	ldr	r2, [pc, #524]	; (8001558 <fsm_tuning_run+0x2ec>)
 800134c:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 800134e:	4b82      	ldr	r3, [pc, #520]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b63      	cmp	r3, #99	; 0x63
 8001354:	dd02      	ble.n	800135c <fsm_tuning_run+0xf0>
				counter = 2;
 8001356:	4b80      	ldr	r3, [pc, #512]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001358:	2202      	movs	r2, #2
 800135a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800135c:	f001 f998 	bl	8002690 <displayCounter>
		}

		break;
 8001360:	e204      	b.n	800176c <fsm_tuning_run+0x500>
	case TUNING_RED2:
		if(timer1_flag){
 8001362:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <fsm_tuning_run+0x2e4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <fsm_tuning_run+0x110>
			timer1_flag = 0;
 800136a:	4b79      	ldr	r3, [pc, #484]	; (8001550 <fsm_tuning_run+0x2e4>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001374:	f000 ff46 	bl	8002204 <setTimer1>
			toggleTraffic2Red();
 8001378:	f001 f8a0 	bl	80024bc <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fadb 	bl	8000938 <isButtonPressed>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d019      	beq.n	80013bc <fsm_tuning_run+0x150>
			isButtonPressed(2);
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fad5 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 800138e:	2003      	movs	r0, #3
 8001390:	f7ff fad2 	bl	8000938 <isButtonPressed>
			acceptTraffic2Red();
 8001394:	f001 f8f2 	bl	800257c <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 8001398:	4b6c      	ldr	r3, [pc, #432]	; (800154c <fsm_tuning_run+0x2e0>)
 800139a:	2202      	movs	r2, #2
 800139c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800139e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a2:	f000 ff2f 	bl	8002204 <setTimer1>
			counter = max_red1;
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <fsm_tuning_run+0x2e8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6b      	ldr	r2, [pc, #428]	; (8001558 <fsm_tuning_run+0x2ec>)
 80013ac:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013ae:	f001 f96f 	bl	8002690 <displayCounter>
			setTraffic2Red();
 80013b2:	f000 ffbf 	bl	8002334 <setTraffic2Red>
			setTraffic2Green();
 80013b6:	f000 fff5 	bl	80023a4 <setTraffic2Green>
			break;
 80013ba:	e1e2      	b.n	8001782 <fsm_tuning_run+0x516>
		}
		if(isButtonPressed(0)){
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fabb 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80013c2:	2002      	movs	r0, #2
 80013c4:	f7ff fab8 	bl	8000938 <isButtonPressed>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <fsm_tuning_run+0x190>
			isButtonPressed(3);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f7ff fab2 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN1;
 80013d4:	4b5d      	ldr	r3, [pc, #372]	; (800154c <fsm_tuning_run+0x2e0>)
 80013d6:	2217      	movs	r2, #23
 80013d8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80013da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013de:	f000 ff11 	bl	8002204 <setTimer1>
			acceptTraffic2Red();
 80013e2:	f001 f8cb 	bl	800257c <acceptTraffic2Red>
			counter = max_green1;
 80013e6:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <fsm_tuning_run+0x2f4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <fsm_tuning_run+0x2ec>)
 80013ec:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013ee:	f001 f94f 	bl	8002690 <displayCounter>
			clearTraffic1();
 80013f2:	f000 ffc3 	bl	800237c <clearTraffic1>
			clearTraffic2();
 80013f6:	f001 f809 	bl	800240c <clearTraffic2>
			break;
 80013fa:	e1c2      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80013fc:	2003      	movs	r0, #3
 80013fe:	f7ff fa9b 	bl	8000938 <isButtonPressed>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 81b3 	beq.w	8001770 <fsm_tuning_run+0x504>
			counter++;
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <fsm_tuning_run+0x2ec>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a51      	ldr	r2, [pc, #324]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001412:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b63      	cmp	r3, #99	; 0x63
 800141a:	dd02      	ble.n	8001422 <fsm_tuning_run+0x1b6>
				counter = 2;
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <fsm_tuning_run+0x2ec>)
 800141e:	2202      	movs	r2, #2
 8001420:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001422:	f001 f935 	bl	8002690 <displayCounter>
		}
		break;
 8001426:	e1a3      	b.n	8001770 <fsm_tuning_run+0x504>
	case TUNING_GREEN1:

		if(timer1_flag){
 8001428:	4b49      	ldr	r3, [pc, #292]	; (8001550 <fsm_tuning_run+0x2e4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <fsm_tuning_run+0x1d6>
			timer1_flag = 0;
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <fsm_tuning_run+0x2e4>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143a:	f000 fee3 	bl	8002204 <setTimer1>
			toggleTraffic1Green();
 800143e:	f001 f847 	bl	80024d0 <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fa78 	bl	8000938 <isButtonPressed>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d019      	beq.n	8001482 <fsm_tuning_run+0x216>
			isButtonPressed(2);
 800144e:	2002      	movs	r0, #2
 8001450:	f7ff fa72 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001454:	2003      	movs	r0, #3
 8001456:	f7ff fa6f 	bl	8000938 <isButtonPressed>
			acceptTraffic1Green();
 800145a:	f001 f8b1 	bl	80025c0 <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <fsm_tuning_run+0x2e0>)
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001468:	f000 fecc 	bl	8002204 <setTimer1>
			counter = max_red1;
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <fsm_tuning_run+0x2e8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a39      	ldr	r2, [pc, #228]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001472:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001474:	f001 f90c 	bl	8002690 <displayCounter>
			setTraffic1Red();
 8001478:	f000 ff48 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 800147c:	f000 ff92 	bl	80023a4 <setTraffic2Green>
			break;
 8001480:	e17f      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fa58 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff fa55 	bl	8000938 <isButtonPressed>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d016      	beq.n	80014c2 <fsm_tuning_run+0x256>
			isButtonPressed(3);
 8001494:	2003      	movs	r0, #3
 8001496:	f7ff fa4f 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN2;
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <fsm_tuning_run+0x2e0>)
 800149c:	2218      	movs	r2, #24
 800149e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80014a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a4:	f000 feae 	bl	8002204 <setTimer1>
			acceptTraffic1Green();
 80014a8:	f001 f88a 	bl	80025c0 <acceptTraffic1Green>
			counter = max_green2;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <fsm_tuning_run+0x2f8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a29      	ldr	r2, [pc, #164]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014b2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80014b4:	f001 f8ec 	bl	8002690 <displayCounter>
			clearTraffic1();
 80014b8:	f000 ff60 	bl	800237c <clearTraffic1>
			clearTraffic2();
 80014bc:	f000 ffa6 	bl	800240c <clearTraffic2>
			break;
 80014c0:	e15f      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80014c2:	2003      	movs	r0, #3
 80014c4:	f7ff fa38 	bl	8000938 <isButtonPressed>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8152 	beq.w	8001774 <fsm_tuning_run+0x508>
			counter++;
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014d8:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <fsm_tuning_run+0x2f0>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dc02      	bgt.n	80014ec <fsm_tuning_run+0x280>
				counter = 1;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80014ec:	f001 f8d0 	bl	8002690 <displayCounter>
		}
		break;
 80014f0:	e140      	b.n	8001774 <fsm_tuning_run+0x508>
	case TUNING_GREEN2:

		if(timer1_flag){
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <fsm_tuning_run+0x2e4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <fsm_tuning_run+0x2a0>
			timer1_flag = 0;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <fsm_tuning_run+0x2e4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001504:	f000 fe7e 	bl	8002204 <setTimer1>
			toggleTraffic2Green();
 8001508:	f000 ffec 	bl	80024e4 <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fa13 	bl	8000938 <isButtonPressed>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d027      	beq.n	8001568 <fsm_tuning_run+0x2fc>
			isButtonPressed(2);
 8001518:	2002      	movs	r0, #2
 800151a:	f7ff fa0d 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 800151e:	2003      	movs	r0, #3
 8001520:	f7ff fa0a 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <fsm_tuning_run+0x2e0>)
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 800152a:	f001 f863 	bl	80025f4 <acceptTraffic2Green>
			setTimer1(1000);
 800152e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001532:	f000 fe67 	bl	8002204 <setTimer1>
			counter = max_red1;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <fsm_tuning_run+0x2e8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <fsm_tuning_run+0x2ec>)
 800153c:	6013      	str	r3, [r2, #0]
			displayCounter();
 800153e:	f001 f8a7 	bl	8002690 <displayCounter>
			setTraffic1Red();
 8001542:	f000 fee3 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 8001546:	f000 ff2d 	bl	80023a4 <setTraffic2Green>
			break;
 800154a:	e11a      	b.n	8001782 <fsm_tuning_run+0x516>
 800154c:	2000011c 	.word	0x2000011c
 8001550:	2000013c 	.word	0x2000013c
 8001554:	20000010 	.word	0x20000010
 8001558:	20000124 	.word	0x20000124
 800155c:	2000001c 	.word	0x2000001c
 8001560:	20000014 	.word	0x20000014
 8001564:	20000020 	.word	0x20000020
		}

		if(isButtonPressed(0)){
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff f9e5 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff f9e2 	bl	8000938 <isButtonPressed>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <fsm_tuning_run+0x33c>
			isButtonPressed(3);
 800157a:	2003      	movs	r0, #3
 800157c:	f7ff f9dc 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW1;
 8001580:	4b81      	ldr	r3, [pc, #516]	; (8001788 <fsm_tuning_run+0x51c>)
 8001582:	2219      	movs	r2, #25
 8001584:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158a:	f000 fe3b 	bl	8002204 <setTimer1>
			acceptTraffic2Green();
 800158e:	f001 f831 	bl	80025f4 <acceptTraffic2Green>
			counter = max_yellow1;
 8001592:	4b7e      	ldr	r3, [pc, #504]	; (800178c <fsm_tuning_run+0x520>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <fsm_tuning_run+0x524>)
 8001598:	6013      	str	r3, [r2, #0]
			displayCounter();
 800159a:	f001 f879 	bl	8002690 <displayCounter>
			clearTraffic1();
 800159e:	f000 feed 	bl	800237c <clearTraffic1>
			clearTraffic2();
 80015a2:	f000 ff33 	bl	800240c <clearTraffic2>
			break;
 80015a6:	e0ec      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80015a8:	2003      	movs	r0, #3
 80015aa:	f7ff f9c5 	bl	8000938 <isButtonPressed>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80e1 	beq.w	8001778 <fsm_tuning_run+0x50c>
			counter++;
 80015b6:	4b76      	ldr	r3, [pc, #472]	; (8001790 <fsm_tuning_run+0x524>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a74      	ldr	r2, [pc, #464]	; (8001790 <fsm_tuning_run+0x524>)
 80015be:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 80015c0:	4b74      	ldr	r3, [pc, #464]	; (8001794 <fsm_tuning_run+0x528>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b72      	ldr	r3, [pc, #456]	; (8001790 <fsm_tuning_run+0x524>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dc02      	bgt.n	80015d2 <fsm_tuning_run+0x366>
				counter = 1;
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <fsm_tuning_run+0x524>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80015d2:	f001 f85d 	bl	8002690 <displayCounter>
		}
		break;
 80015d6:	e0cf      	b.n	8001778 <fsm_tuning_run+0x50c>
	case TUNING_YELLOW1:
		if(timer1_flag){
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <fsm_tuning_run+0x52c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <fsm_tuning_run+0x386>
			timer1_flag = 0;
 80015e0:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <fsm_tuning_run+0x52c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80015e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ea:	f000 fe0b 	bl	8002204 <setTimer1>
			toggleTraffic1Yellow();
 80015ee:	f000 ff83 	bl	80024f8 <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff f9a0 	bl	8000938 <isButtonPressed>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d019      	beq.n	8001632 <fsm_tuning_run+0x3c6>
			isButtonPressed(2);
 80015fe:	2002      	movs	r0, #2
 8001600:	f7ff f99a 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001604:	2003      	movs	r0, #3
 8001606:	f7ff f997 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <fsm_tuning_run+0x51c>)
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 8001610:	f001 f80a 	bl	8002628 <acceptTraffic1Yellow>
			setTimer1(1000);
 8001614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001618:	f000 fdf4 	bl	8002204 <setTimer1>
			counter = max_red1;
 800161c:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <fsm_tuning_run+0x528>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a5b      	ldr	r2, [pc, #364]	; (8001790 <fsm_tuning_run+0x524>)
 8001622:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001624:	f001 f834 	bl	8002690 <displayCounter>
			setTraffic1Red();
 8001628:	f000 fe70 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 800162c:	f000 feba 	bl	80023a4 <setTraffic2Green>
			break;
 8001630:	e0a7      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff f980 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff f97d 	bl	8000938 <isButtonPressed>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d016      	beq.n	8001672 <fsm_tuning_run+0x406>
			isButtonPressed(3);
 8001644:	2003      	movs	r0, #3
 8001646:	f7ff f977 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW2;
 800164a:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <fsm_tuning_run+0x51c>)
 800164c:	221a      	movs	r2, #26
 800164e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001654:	f000 fdd6 	bl	8002204 <setTimer1>
			acceptTraffic1Yellow();
 8001658:	f000 ffe6 	bl	8002628 <acceptTraffic1Yellow>
			counter = max_yellow2;
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <fsm_tuning_run+0x530>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <fsm_tuning_run+0x524>)
 8001662:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001664:	f001 f814 	bl	8002690 <displayCounter>
			clearTraffic1();
 8001668:	f000 fe88 	bl	800237c <clearTraffic1>
			clearTraffic2();
 800166c:	f000 fece 	bl	800240c <clearTraffic2>
			break;
 8001670:	e087      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001672:	2003      	movs	r0, #3
 8001674:	f7ff f960 	bl	8000938 <isButtonPressed>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07e      	beq.n	800177c <fsm_tuning_run+0x510>
			counter++;
 800167e:	4b44      	ldr	r3, [pc, #272]	; (8001790 <fsm_tuning_run+0x524>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a42      	ldr	r2, [pc, #264]	; (8001790 <fsm_tuning_run+0x524>)
 8001686:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <fsm_tuning_run+0x534>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <fsm_tuning_run+0x524>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	dc02      	bgt.n	800169a <fsm_tuning_run+0x42e>
				counter = 1;
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <fsm_tuning_run+0x524>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800169a:	f000 fff9 	bl	8002690 <displayCounter>
		}
		break;
 800169e:	e06d      	b.n	800177c <fsm_tuning_run+0x510>
	case TUNING_YELLOW2:
		if(timer1_flag){
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <fsm_tuning_run+0x52c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <fsm_tuning_run+0x44e>
			timer1_flag = 0;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <fsm_tuning_run+0x52c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80016ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b2:	f000 fda7 	bl	8002204 <setTimer1>
			toggleTraffic2Yellow();
 80016b6:	f000 ff31 	bl	800251c <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff f93c 	bl	8000938 <isButtonPressed>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <fsm_tuning_run+0x48e>
			isButtonPressed(2);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f7ff f936 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f7ff f933 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <fsm_tuning_run+0x51c>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 80016d8:	f000 ffc0 	bl	800265c <acceptTraffic2Yellow>
			setTimer1(1000);
 80016dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e0:	f000 fd90 	bl	8002204 <setTimer1>
			counter = max_red1;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <fsm_tuning_run+0x528>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a29      	ldr	r2, [pc, #164]	; (8001790 <fsm_tuning_run+0x524>)
 80016ea:	6013      	str	r3, [r2, #0]
			displayCounter();
 80016ec:	f000 ffd0 	bl	8002690 <displayCounter>
			setTraffic1Red();
 80016f0:	f000 fe0c 	bl	800230c <setTraffic1Red>
			setTraffic2Green();
 80016f4:	f000 fe56 	bl	80023a4 <setTraffic2Green>
			break;
 80016f8:	e043      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff f91c 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff f919 	bl	8000938 <isButtonPressed>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d016      	beq.n	800173a <fsm_tuning_run+0x4ce>
			isButtonPressed(3);
 800170c:	2003      	movs	r0, #3
 800170e:	f7ff f913 	bl	8000938 <isButtonPressed>
			status = TUNING_RED1;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <fsm_tuning_run+0x51c>)
 8001714:	2215      	movs	r2, #21
 8001716:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800171c:	f000 fd72 	bl	8002204 <setTimer1>
			acceptTraffic2Yellow();
 8001720:	f000 ff9c 	bl	800265c <acceptTraffic2Yellow>
			counter = max_red1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <fsm_tuning_run+0x528>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <fsm_tuning_run+0x524>)
 800172a:	6013      	str	r3, [r2, #0]
			displayCounter();
 800172c:	f000 ffb0 	bl	8002690 <displayCounter>
			clearTraffic1();
 8001730:	f000 fe24 	bl	800237c <clearTraffic1>
			clearTraffic2();
 8001734:	f000 fe6a 	bl	800240c <clearTraffic2>
			break;
 8001738:	e023      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 800173a:	2003      	movs	r0, #3
 800173c:	f7ff f8fc 	bl	8000938 <isButtonPressed>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d01c      	beq.n	8001780 <fsm_tuning_run+0x514>
			counter++;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <fsm_tuning_run+0x524>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a10      	ldr	r2, [pc, #64]	; (8001790 <fsm_tuning_run+0x524>)
 800174e:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <fsm_tuning_run+0x528>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <fsm_tuning_run+0x524>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	dc02      	bgt.n	8001762 <fsm_tuning_run+0x4f6>
				counter = 1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <fsm_tuning_run+0x524>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001762:	f000 ff95 	bl	8002690 <displayCounter>
		}
		break;
 8001766:	e00b      	b.n	8001780 <fsm_tuning_run+0x514>
	default:
		break;
 8001768:	bf00      	nop
 800176a:	e00a      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 800176c:	bf00      	nop
 800176e:	e008      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001770:	bf00      	nop
 8001772:	e006      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001774:	bf00      	nop
 8001776:	e004      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001778:	bf00      	nop
 800177a:	e002      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 800177c:	bf00      	nop
 800177e:	e000      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001780:	bf00      	nop
	}
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000011c 	.word	0x2000011c
 800178c:	20000018 	.word	0x20000018
 8001790:	20000124 	.word	0x20000124
 8001794:	20000010 	.word	0x20000010
 8001798:	2000013c 	.word	0x2000013c
 800179c:	20000024 	.word	0x20000024
 80017a0:	2000001c 	.word	0x2000001c

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a8:	f000 ffc6 	bl	8002738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ac:	f000 f84c 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b0:	f000 f978 	bl	8001aa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017b4:	f000 f88a 	bl	80018cc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80017b8:	f000 f94a 	bl	8001a50 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80017bc:	f000 f8d2 	bl	8001964 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 80017c0:	f000 f9e3 	bl	8001b8a <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 80017c4:	4816      	ldr	r0, [pc, #88]	; (8001820 <main+0x7c>)
 80017c6:	f002 f80d 	bl	80037e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017ca:	2100      	movs	r1, #0
 80017cc:	4815      	ldr	r0, [pc, #84]	; (8001824 <main+0x80>)
 80017ce:	f002 f8b3 	bl	8003938 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <main+0x84>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <main+0x88>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timer_run, 1, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <main+0x8c>)
 80017e4:	f000 fa24 	bl	8001c30 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 1, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <main+0x90>)
 80017ee:	f000 fa1f 	bl	8001c30 <SCH_Add_Task>
  SCH_Add_Task(fsm_auto_run, 2, 10);
 80017f2:	220a      	movs	r2, #10
 80017f4:	2102      	movs	r1, #2
 80017f6:	4810      	ldr	r0, [pc, #64]	; (8001838 <main+0x94>)
 80017f8:	f000 fa1a 	bl	8001c30 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 3, 10);
 80017fc:	220a      	movs	r2, #10
 80017fe:	2103      	movs	r1, #3
 8001800:	480e      	ldr	r0, [pc, #56]	; (800183c <main+0x98>)
 8001802:	f000 fa15 	bl	8001c30 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 4, 10);
 8001806:	220a      	movs	r2, #10
 8001808:	2104      	movs	r1, #4
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <main+0x9c>)
 800180c:	f000 fa10 	bl	8001c30 <SCH_Add_Task>
  SCH_Add_Task(fsm_pedestrian_run, 5, 10);
 8001810:	220a      	movs	r2, #10
 8001812:	2105      	movs	r1, #5
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <main+0xa0>)
 8001816:	f000 fa0b 	bl	8001c30 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800181a:	f000 faed 	bl	8001df8 <SCH_Dispatch_Tasks>
 800181e:	e7fc      	b.n	800181a <main+0x76>
 8001820:	200001a4 	.word	0x200001a4
 8001824:	2000015c 	.word	0x2000015c
 8001828:	2000011c 	.word	0x2000011c
 800182c:	20000120 	.word	0x20000120
 8001830:	08002275 	.word	0x08002275
 8001834:	08000999 	.word	0x08000999
 8001838:	08000ba5 	.word	0x08000ba5
 800183c:	08000df5 	.word	0x08000df5
 8001840:	0800126d 	.word	0x0800126d
 8001844:	0800107d 	.word	0x0800107d

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b090      	sub	sp, #64	; 0x40
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fb3c 	bl	8004ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186e:	2301      	movs	r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001872:	2310      	movs	r3, #16
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001876:	2302      	movs	r3, #2
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800187e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fb41 	bl	8002f10 <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001894:	f000 f974 	bl	8001b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001898:	230f      	movs	r3, #15
 800189a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189c:	2302      	movs	r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 fdac 	bl	8003410 <HAL_RCC_ClockConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018be:	f000 f95f 	bl	8001b80 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3740      	adds	r7, #64	; 0x40
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_TIM2_Init+0x94>)
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_TIM2_Init+0x94>)
 80018f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80018f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_TIM2_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_TIM2_Init+0x94>)
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_TIM2_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_TIM2_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_TIM2_Init+0x94>)
 8001912:	f001 ff17 	bl	8003744 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800191c:	f000 f930 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM2_Init+0x94>)
 800192e:	f002 fa6b 	bl	8003e08 <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001938:	f000 f922 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_TIM2_Init+0x94>)
 800194a:	f002 fde9 	bl	8004520 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001954:	f000 f914 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200001a4 	.word	0x200001a4

08001964 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <MX_TIM3_Init+0xe8>)
 8001998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <MX_TIM3_Init+0xe4>)
 800199c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019aa:	223f      	movs	r2, #63	; 0x3f
 80019ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ba:	4823      	ldr	r0, [pc, #140]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019bc:	f001 fec2 	bl	8003744 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019c6:	f000 f8db 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d4:	4619      	mov	r1, r3
 80019d6:	481c      	ldr	r0, [pc, #112]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019d8:	f002 fa16 	bl	8003e08 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019e2:	f000 f8cd 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019e6:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019e8:	f001 ff4e 	bl	8003888 <HAL_TIM_PWM_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019f2:	f000 f8c5 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	4619      	mov	r1, r3
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001a06:	f002 fd8b 	bl	8004520 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a10:	f000 f8b6 	bl	8001b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a14:	2360      	movs	r3, #96	; 0x60
 8001a16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001a2c:	f002 f92e 	bl	8003c8c <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a36:	f000 f8a3 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001a3c:	f000 fae6 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001a40:	bf00      	nop
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000015c 	.word	0x2000015c
 8001a4c:	40000400 	.word	0x40000400

08001a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_USART2_UART_Init+0x50>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a88:	f002 fdba 	bl	8004600 <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a92:	f000 f875 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200001ec 	.word	0x200001ec
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a2d      	ldr	r2, [pc, #180]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001aee:	4822      	ldr	r0, [pc, #136]	; (8001b78 <MX_GPIO_Init+0xd4>)
 8001af0:	f001 f9dd 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001afa:	4820      	ldr	r0, [pc, #128]	; (8001b7c <MX_GPIO_Init+0xd8>)
 8001afc:	f001 f9d7 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8001b00:	2313      	movs	r3, #19
 8001b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	481a      	ldr	r0, [pc, #104]	; (8001b7c <MX_GPIO_Init+0xd8>)
 8001b14:	f001 f830 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MX_GPIO_Init+0xd4>)
 8001b2c:	f001 f824 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001b30:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <MX_GPIO_Init+0xd4>)
 8001b4a:	f001 f815 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8001b4e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_GPIO_Init+0xd8>)
 8001b68:	f001 f806 	bl	8002b78 <HAL_GPIO_Init>

}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40010800 	.word	0x40010800

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>

08001b8a <SCH_Init>:
struct sTask *head = NULL;
//struct sTask *pRun = NULL;

uint8_t reAdd_index = SCH_MAX_TASKS;

void SCH_Init(void){
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001b90:	2300      	movs	r3, #0
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	e006      	b.n	8001ba4 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f979 	bl	8001e90 <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b13      	cmp	r3, #19
 8001ba8:	d9f5      	bls.n	8001b96 <SCH_Init+0xc>
	}
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <SCH_Update>:

void SCH_Update(void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
//				SCH_tasks_G[index].RunMe += 1;
//				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
//			}
//		}
//	}
	while(head != NULL && head->Delay == 0){
 8001bba:	e01f      	b.n	8001bfc <SCH_Update+0x48>
		head->RunMe++;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <SCH_Update+0x74>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	7b1a      	ldrb	r2, [r3, #12]
 8001bc2:	3201      	adds	r2, #1
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	731a      	strb	r2, [r3, #12]
		struct sTask* temp = head;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <SCH_Update+0x74>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	607b      	str	r3, [r7, #4]
		head = head->pNext;
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <SCH_Update+0x74>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <SCH_Update+0x74>)
 8001bd6:	6013      	str	r3, [r2, #0]
		if(temp->Period != 0){
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <SCH_Update+0x48>
			reAdd_index = temp->TaskID;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <SCH_Update+0x78>)
 8001be8:	701a      	strb	r2, [r3, #0]
			SCH_Add_Task(temp->pTask, temp->Period, temp->Period);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f000 f81a 	bl	8001c30 <SCH_Add_Task>
	while(head != NULL && head->Delay == 0){
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <SCH_Update+0x74>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <SCH_Update+0x5a>
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <SCH_Update+0x74>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0d6      	beq.n	8001bbc <SCH_Update+0x8>
		}

	}
	if(head != NULL){
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SCH_Update+0x74>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <SCH_Update+0x6c>
		head->Delay--;
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SCH_Update+0x74>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	605a      	str	r2, [r3, #4]
	}
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000134 	.word	0x20000134
 8001c2c:	20000028 	.word	0x20000028

08001c30 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunc)(), uint32_t delay, uint32_t period){
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
	uint8_t waiting = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	76fb      	strb	r3, [r7, #27]
	if(reAdd_index  == SCH_MAX_TASKS){
 8001c44:	4b69      	ldr	r3, [pc, #420]	; (8001dec <SCH_Add_Task+0x1bc>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b14      	cmp	r3, #20
 8001c4a:	d115      	bne.n	8001c78 <SCH_Add_Task+0x48>
		while(SCH_tasks_G[index].pTask != 0 && index < SCH_MAX_TASKS) index++;
 8001c4c:	e002      	b.n	8001c54 <SCH_Add_Task+0x24>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	4966      	ldr	r1, [pc, #408]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <SCH_Add_Task+0x3e>
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b13      	cmp	r3, #19
 8001c6c:	d9ef      	bls.n	8001c4e <SCH_Add_Task+0x1e>
		if(index == SCH_MAX_TASKS){
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b14      	cmp	r3, #20
 8001c72:	d107      	bne.n	8001c84 <SCH_Add_Task+0x54>
			return SCH_MAX_TASKS;
 8001c74:	2314      	movs	r3, #20
 8001c76:	e0b4      	b.n	8001de2 <SCH_Add_Task+0x1b2>
		}
	} else {
		index = reAdd_index;
 8001c78:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <SCH_Add_Task+0x1bc>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	61fb      	str	r3, [r7, #28]
		reAdd_index  = SCH_MAX_TASKS;
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <SCH_Add_Task+0x1bc>)
 8001c80:	2214      	movs	r2, #20
 8001c82:	701a      	strb	r2, [r3, #0]
	}
	SCH_tasks_G[index].pTask = pFunc;
 8001c84:	495a      	ldr	r1, [pc, #360]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = period;
 8001c96:	4956      	ldr	r1, [pc, #344]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
//	SCH_tasks_G[index].RunMe = 0;
	SCH_tasks_G[index].TaskID = index;
 8001caa:	4951      	ldr	r1, [pc, #324]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3310      	adds	r3, #16
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	601a      	str	r2, [r3, #0]
	struct sTask *cur = head;
 8001cbe:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <SCH_Add_Task+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]
	struct sTask *prev = NULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
	if(head == NULL){
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <SCH_Add_Task+0x1c4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d122      	bne.n	8001d16 <SCH_Add_Task+0xe6>
		head = &SCH_tasks_G[index];
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4a45      	ldr	r2, [pc, #276]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a45      	ldr	r2, [pc, #276]	; (8001df4 <SCH_Add_Task+0x1c4>)
 8001ce0:	6013      	str	r3, [r2, #0]
		SCH_tasks_G[index].Delay = delay;
 8001ce2:	4943      	ldr	r1, [pc, #268]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e073      	b.n	8001de0 <SCH_Add_Task+0x1b0>
//		pRun = head;
	} else {
		while(cur != NULL){
			waiting += cur->Delay;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	7efb      	ldrb	r3, [r7, #27]
 8001d00:	4413      	add	r3, r2
 8001d02:	76fb      	strb	r3, [r7, #27]
			if(waiting > delay) break;
 8001d04:	7efb      	ldrb	r3, [r7, #27]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d308      	bcc.n	8001d1e <SCH_Add_Task+0xee>
			prev = cur;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
			cur = cur->pNext;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	617b      	str	r3, [r7, #20]
		while(cur != NULL){
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ed      	bne.n	8001cf8 <SCH_Add_Task+0xc8>
 8001d1c:	e000      	b.n	8001d20 <SCH_Add_Task+0xf0>
			if(waiting > delay) break;
 8001d1e:	bf00      	nop
		}
		if(cur == NULL){
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <SCH_Add_Task+0x122>
			prev->pNext = &SCH_tasks_G[index];
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4a2f      	ldr	r2, [pc, #188]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001d32:	441a      	add	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	615a      	str	r2, [r3, #20]
			SCH_tasks_G[index].Delay = delay - waiting;
 8001d38:	7efb      	ldrb	r3, [r7, #27]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	1ad1      	subs	r1, r2, r3
 8001d3e:	482c      	ldr	r0, [pc, #176]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4403      	add	r3, r0
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	6019      	str	r1, [r3, #0]
 8001d50:	e046      	b.n	8001de0 <SCH_Add_Task+0x1b0>
		} else{
			if(cur == head){
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <SCH_Add_Task+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d111      	bne.n	8001d80 <SCH_Add_Task+0x150>
				head = &SCH_tasks_G[index];
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <SCH_Add_Task+0x1c4>)
 8001d6c:	6013      	str	r3, [r2, #0]
				head->pNext = cur;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <SCH_Add_Task+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	615a      	str	r2, [r3, #20]
				head->Delay = delay;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <SCH_Add_Task+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	e021      	b.n	8001dc4 <SCH_Add_Task+0x194>
//				if(pRun == cur) pRun = head;
			} else {
				prev->pNext =  &SCH_tasks_G[index];
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001d8c:	441a      	add	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	615a      	str	r2, [r3, #20]
				SCH_tasks_G[index].Delay = delay - waiting + cur->Delay;
 8001d92:	7efb      	ldrb	r3, [r7, #27]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	1ad2      	subs	r2, r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	18d1      	adds	r1, r2, r3
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4403      	add	r3, r0
 8001dac:	3304      	adds	r3, #4
 8001dae:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[index].pNext = cur;
 8001db0:	490f      	ldr	r1, [pc, #60]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3314      	adds	r3, #20
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
			}
			cur->Delay -= SCH_tasks_G[index].Delay;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	4809      	ldr	r0, [pc, #36]	; (8001df0 <SCH_Add_Task+0x1c0>)
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4403      	add	r3, r0
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1aca      	subs	r2, r1, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	605a      	str	r2, [r3, #4]
		}
	}
	return index;
 8001de0:	69fb      	ldr	r3, [r7, #28]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000028 	.word	0x20000028
 8001df0:	20000230 	.word	0x20000230
 8001df4:	20000134 	.word	0x20000134

08001df8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	for(int index = 0; index < SCH_MAX_TASKS; index++){
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e03a      	b.n	8001e7a <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[index].RunMe > 0){
 8001e04:	4921      	ldr	r1, [pc, #132]	; (8001e8c <SCH_Dispatch_Tasks+0x94>)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	330c      	adds	r3, #12
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d02c      	beq.n	8001e74 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[index].RunMe--;
 8001e1a:	491c      	ldr	r1, [pc, #112]	; (8001e8c <SCH_Dispatch_Tasks+0x94>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	330c      	adds	r3, #12
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b2d8      	uxtb	r0, r3
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <SCH_Dispatch_Tasks+0x94>)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	330c      	adds	r3, #12
 8001e40:	4602      	mov	r2, r0
 8001e42:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[index].pTask)();
 8001e44:	4911      	ldr	r1, [pc, #68]	; (8001e8c <SCH_Dispatch_Tasks+0x94>)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4798      	blx	r3
			if(SCH_tasks_G[index].Period == 0) SCH_Delete_Task(index);
 8001e56:	490d      	ldr	r1, [pc, #52]	; (8001e8c <SCH_Dispatch_Tasks+0x94>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3308      	adds	r3, #8
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <SCH_Dispatch_Tasks+0x7c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f80e 	bl	8001e90 <SCH_Delete_Task>
	for(int index = 0; index < SCH_MAX_TASKS; index++){
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3301      	adds	r3, #1
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b13      	cmp	r3, #19
 8001e7e:	ddc1      	ble.n	8001e04 <SCH_Dispatch_Tasks+0xc>
//		(pRun->pTask)();
//		uint32_t id = pRun->TaskID;
//		pRun = pRun->pNext;
//		SCH_Delete_Task(id);
//	}
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000230 	.word	0x20000230

08001e90 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t index){
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 8001e98:	4926      	ldr	r1, [pc, #152]	; (8001f34 <SCH_Delete_Task+0xa4>)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <SCH_Delete_Task+0x20>
		return 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e03b      	b.n	8001f28 <SCH_Delete_Task+0x98>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8001eb0:	4920      	ldr	r1, [pc, #128]	; (8001f34 <SCH_Delete_Task+0xa4>)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8001ec2:	491c      	ldr	r1, [pc, #112]	; (8001f34 <SCH_Delete_Task+0xa4>)
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 8001ed6:	4917      	ldr	r1, [pc, #92]	; (8001f34 <SCH_Delete_Task+0xa4>)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3308      	adds	r3, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 8001eea:	4912      	ldr	r1, [pc, #72]	; (8001f34 <SCH_Delete_Task+0xa4>)
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	330c      	adds	r3, #12
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[index].pNext = 0;
 8001efe:	490d      	ldr	r1, [pc, #52]	; (8001f34 <SCH_Delete_Task+0xa4>)
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3314      	adds	r3, #20
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].TaskID = 0;
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <SCH_Delete_Task+0xa4>)
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3310      	adds	r3, #16
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
		return 1;
 8001f26:	2301      	movs	r3, #1
	}
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000230 	.word	0x20000230

08001f38 <HAL_MspInit>:
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_MspInit+0x5c>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_MspInit+0x5c>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_MspInit+0x5c>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_MspInit+0x5c>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_MspInit+0x5c>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_MspInit+0x5c>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_MspInit+0x60>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_MspInit+0x60>)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6053      	str	r3, [r2, #4]
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000

08001f9c <HAL_TIM_Base_MspInit>:
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fac:	d114      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x3c>
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_TIM_Base_MspInit+0x68>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_TIM_Base_MspInit+0x68>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_TIM_Base_MspInit+0x68>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	201c      	movs	r0, #28
 8001fcc:	f000 fced 	bl	80029aa <HAL_NVIC_SetPriority>
 8001fd0:	201c      	movs	r0, #28
 8001fd2:	f000 fd06 	bl	80029e2 <HAL_NVIC_EnableIRQ>
 8001fd6:	e010      	b.n	8001ffa <HAL_TIM_Base_MspInit+0x5e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_TIM_Base_MspInit+0x6c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10b      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x5e>
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_TIM_Base_MspInit+0x68>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_TIM_Base_MspInit+0x68>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_TIM_Base_MspInit+0x68>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40000400 	.word	0x40000400

0800200c <HAL_TIM_MspPostInit>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_TIM_MspPostInit+0x58>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d117      	bne.n	800205c <HAL_TIM_MspPostInit+0x50>
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_TIM_MspPostInit+0x5c>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_TIM_MspPostInit+0x5c>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_TIM_MspPostInit+0x5c>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2340      	movs	r3, #64	; 0x40
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	2302      	movs	r3, #2
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	2302      	movs	r3, #2
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4619      	mov	r1, r3
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_TIM_MspPostInit+0x60>)
 8002058:	f000 fd8e 	bl	8002b78 <HAL_GPIO_Init>
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40000400 	.word	0x40000400
 8002068:	40021000 	.word	0x40021000
 800206c:	40010800 	.word	0x40010800

08002070 <HAL_UART_MspInit>:
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_UART_MspInit+0x98>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d137      	bne.n	8002100 <HAL_UART_MspInit+0x90>
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_UART_MspInit+0x9c>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_UART_MspInit+0x9c>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209a:	61d3      	str	r3, [r2, #28]
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_UART_MspInit+0x9c>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_UART_MspInit+0x9c>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_UART_MspInit+0x9c>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_UART_MspInit+0x9c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2304      	movs	r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	2303      	movs	r3, #3
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	480f      	ldr	r0, [pc, #60]	; (8002110 <HAL_UART_MspInit+0xa0>)
 80020d4:	f000 fd50 	bl	8002b78 <HAL_GPIO_Init>
 80020d8:	2308      	movs	r3, #8
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4619      	mov	r1, r3
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <HAL_UART_MspInit+0xa0>)
 80020ec:	f000 fd44 	bl	8002b78 <HAL_GPIO_Init>
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	2026      	movs	r0, #38	; 0x26
 80020f6:	f000 fc58 	bl	80029aa <HAL_NVIC_SetPriority>
 80020fa:	2026      	movs	r0, #38	; 0x26
 80020fc:	f000 fc71 	bl	80029e2 <HAL_NVIC_EnableIRQ>
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40004400 	.word	0x40004400
 800210c:	40021000 	.word	0x40021000
 8002110:	40010800 	.word	0x40010800

08002114 <NMI_Handler>:
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
 8002118:	e7fe      	b.n	8002118 <NMI_Handler+0x4>

0800211a <HardFault_Handler>:
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
 800211e:	e7fe      	b.n	800211e <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler+0x4>

08002126 <BusFault_Handler>:
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
 800212a:	e7fe      	b.n	800212a <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler+0x4>

08002132 <SVC_Handler>:
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <DebugMon_Handler>:
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <PendSV_Handler>:
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <SysTick_Handler>:
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
 800215a:	f000 fb33 	bl	80027c4 <HAL_IncTick>
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <TIM2_IRQHandler>:
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <TIM2_IRQHandler+0x10>)
 800216a:	f001 fc87 	bl	8003a7c <HAL_TIM_IRQHandler>
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200001a4 	.word	0x200001a4

08002178 <USART2_IRQHandler>:
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <USART2_IRQHandler+0x10>)
 800217e:	f002 fad1 	bl	8004724 <HAL_UART_IRQHandler>
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200001ec 	.word	0x200001ec

0800218c <_sbrk>:
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
 80021bc:	f002 fe60 	bl	8004e80 <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20005000 	.word	0x20005000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	20000138 	.word	0x20000138
 80021f4:	20000428 	.word	0x20000428

080021f8 <SystemInit>:
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a08      	ldr	r2, [pc, #32]	; (8002230 <setTimer1+0x2c>)
 8002210:	fb82 1203 	smull	r1, r2, r2, r3
 8002214:	1092      	asrs	r2, r2, #2
 8002216:	17db      	asrs	r3, r3, #31
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	4a06      	ldr	r2, [pc, #24]	; (8002234 <setTimer1+0x30>)
 800221c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <setTimer1+0x34>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	66666667 	.word	0x66666667
 8002234:	20000148 	.word	0x20000148
 8002238:	2000013c 	.word	0x2000013c

0800223c <setTimer2>:

void setTimer2(int duration){
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <setTimer2+0x2c>)
 8002248:	fb82 1203 	smull	r1, r2, r2, r3
 800224c:	1092      	asrs	r2, r2, #2
 800224e:	17db      	asrs	r3, r3, #31
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	4a06      	ldr	r2, [pc, #24]	; (800226c <setTimer2+0x30>)
 8002254:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <setTimer2+0x34>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	66666667 	.word	0x66666667
 800226c:	2000014c 	.word	0x2000014c
 8002270:	20000140 	.word	0x20000140

08002274 <timer_run>:
void setTimer3(int duration){
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void timer_run(){
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <timer_run+0x6c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	dd0b      	ble.n	8002298 <timer_run+0x24>
		timer1_counter--;
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <timer_run+0x6c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <timer_run+0x6c>)
 8002288:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <timer_run+0x6c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <timer_run+0x24>
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <timer_run+0x70>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <timer_run+0x74>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	dd0b      	ble.n	80022b8 <timer_run+0x44>
		timer2_counter--;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <timer_run+0x74>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <timer_run+0x74>)
 80022a8:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <timer_run+0x74>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <timer_run+0x44>
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <timer_run+0x78>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <timer_run+0x7c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	dd0b      	ble.n	80022d8 <timer_run+0x64>
		timer3_counter--;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <timer_run+0x7c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <timer_run+0x7c>)
 80022c8:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <timer_run+0x7c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <timer_run+0x64>
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <timer_run+0x80>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
	}
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000148 	.word	0x20000148
 80022e4:	2000013c 	.word	0x2000013c
 80022e8:	2000014c 	.word	0x2000014c
 80022ec:	20000140 	.word	0x20000140
 80022f0:	20000150 	.word	0x20000150
 80022f4:	20000144 	.word	0x20000144

080022f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8002300:	f7ff fc58 	bl	8001bb4 <SCH_Update>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <setTraffic1Red>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "traffic.h"

void setTraffic1Red(){
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <setTraffic1Red+0x20>)
 8002318:	f000 fdc9 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	2108      	movs	r1, #8
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <setTraffic1Red+0x24>)
 8002322:	f000 fdc4 	bl	8002eae <HAL_GPIO_WritePin>

}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40010800 	.word	0x40010800
 8002330:	40010c00 	.word	0x40010c00

08002334 <setTraffic2Red>:

void setTraffic2Red(){
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	2120      	movs	r1, #32
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <setTraffic2Red+0x1c>)
 800233e:	f000 fdb6 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2110      	movs	r1, #16
 8002346:	4802      	ldr	r0, [pc, #8]	; (8002350 <setTraffic2Red+0x1c>)
 8002348:	f000 fdb1 	bl	8002eae <HAL_GPIO_WritePin>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40010c00 	.word	0x40010c00

08002354 <setTraffic1Green>:

void setTraffic1Green(){
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <setTraffic1Green+0x20>)
 8002360:	f000 fda5 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	2108      	movs	r1, #8
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <setTraffic1Green+0x24>)
 800236a:	f000 fda0 	bl	8002eae <HAL_GPIO_WritePin>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40010800 	.word	0x40010800
 8002378:	40010c00 	.word	0x40010c00

0800237c <clearTraffic1>:

void clearTraffic1(){
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <clearTraffic1+0x20>)
 8002388:	f000 fd91 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	2108      	movs	r1, #8
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <clearTraffic1+0x24>)
 8002392:	f000 fd8c 	bl	8002eae <HAL_GPIO_WritePin>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40010800 	.word	0x40010800
 80023a0:	40010c00 	.word	0x40010c00

080023a4 <setTraffic2Green>:


void setTraffic2Green(){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2120      	movs	r1, #32
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <setTraffic2Green+0x1c>)
 80023ae:	f000 fd7e 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	2110      	movs	r1, #16
 80023b6:	4802      	ldr	r0, [pc, #8]	; (80023c0 <setTraffic2Green+0x1c>)
 80023b8:	f000 fd79 	bl	8002eae <HAL_GPIO_WritePin>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40010c00 	.word	0x40010c00

080023c4 <setTraffic1Yellow>:

void setTraffic1Yellow(){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <setTraffic1Yellow+0x20>)
 80023d0:	f000 fd6d 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2108      	movs	r1, #8
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <setTraffic1Yellow+0x24>)
 80023da:	f000 fd68 	bl	8002eae <HAL_GPIO_WritePin>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40010800 	.word	0x40010800
 80023e8:	40010c00 	.word	0x40010c00

080023ec <setTraffic2Yellow>:

void setTraffic2Yellow(){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2120      	movs	r1, #32
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <setTraffic2Yellow+0x1c>)
 80023f6:	f000 fd5a 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80023fa:	2201      	movs	r2, #1
 80023fc:	2110      	movs	r1, #16
 80023fe:	4802      	ldr	r0, [pc, #8]	; (8002408 <setTraffic2Yellow+0x1c>)
 8002400:	f000 fd55 	bl	8002eae <HAL_GPIO_WritePin>
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40010c00 	.word	0x40010c00

0800240c <clearTraffic2>:

void clearTraffic2(){
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2120      	movs	r1, #32
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <clearTraffic2+0x1c>)
 8002416:	f000 fd4a 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2110      	movs	r1, #16
 800241e:	4802      	ldr	r0, [pc, #8]	; (8002428 <clearTraffic2+0x1c>)
 8002420:	f000 fd45 	bl	8002eae <HAL_GPIO_WritePin>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010c00 	.word	0x40010c00

0800242c <setPedestrianRed>:

void setPedestrianRed(){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <setPedestrianRed+0x20>)
 8002438:	f000 fd39 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002442:	4803      	ldr	r0, [pc, #12]	; (8002450 <setPedestrianRed+0x24>)
 8002444:	f000 fd33 	bl	8002eae <HAL_GPIO_WritePin>
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40010c00 	.word	0x40010c00
 8002450:	40010800 	.word	0x40010800

08002454 <setPedestrianGreen>:

void setPedestrianGreen(){
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <setPedestrianGreen+0x20>)
 8002460:	f000 fd25 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800246a:	4803      	ldr	r0, [pc, #12]	; (8002478 <setPedestrianGreen+0x24>)
 800246c:	f000 fd1f 	bl	8002eae <HAL_GPIO_WritePin>
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40010c00 	.word	0x40010c00
 8002478:	40010800 	.word	0x40010800

0800247c <clearPedestrian>:
void setPedestrianYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void clearPedestrian(){
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <clearPedestrian+0x20>)
 8002488:	f000 fd11 	bl	8002eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <clearPedestrian+0x24>)
 8002494:	f000 fd0b 	bl	8002eae <HAL_GPIO_WritePin>
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	40010800 	.word	0x40010800

080024a4 <toggleTraffic1Red>:

void toggleTraffic1Red(){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 80024a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <toggleTraffic1Red+0x14>)
 80024ae:	f000 fd16 	bl	8002ede <HAL_GPIO_TogglePin>
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40010800 	.word	0x40010800

080024bc <toggleTraffic2Red>:

void toggleTraffic2Red(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 80024c0:	2120      	movs	r1, #32
 80024c2:	4802      	ldr	r0, [pc, #8]	; (80024cc <toggleTraffic2Red+0x10>)
 80024c4:	f000 fd0b 	bl	8002ede <HAL_GPIO_TogglePin>
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40010c00 	.word	0x40010c00

080024d0 <toggleTraffic1Green>:

void toggleTraffic1Green(){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 80024d4:	2108      	movs	r1, #8
 80024d6:	4802      	ldr	r0, [pc, #8]	; (80024e0 <toggleTraffic1Green+0x10>)
 80024d8:	f000 fd01 	bl	8002ede <HAL_GPIO_TogglePin>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40010c00 	.word	0x40010c00

080024e4 <toggleTraffic2Green>:

void toggleTraffic2Green(){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 80024e8:	2110      	movs	r1, #16
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <toggleTraffic2Green+0x10>)
 80024ec:	f000 fcf7 	bl	8002ede <HAL_GPIO_TogglePin>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40010c00 	.word	0x40010c00

080024f8 <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 80024fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <toggleTraffic1Yellow+0x1c>)
 8002502:	f000 fcec 	bl	8002ede <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8002506:	2108      	movs	r1, #8
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <toggleTraffic1Yellow+0x20>)
 800250a:	f000 fce8 	bl	8002ede <HAL_GPIO_TogglePin>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40010800 	.word	0x40010800
 8002518:	40010c00 	.word	0x40010c00

0800251c <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8002520:	2120      	movs	r1, #32
 8002522:	4804      	ldr	r0, [pc, #16]	; (8002534 <toggleTraffic2Yellow+0x18>)
 8002524:	f000 fcdb 	bl	8002ede <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8002528:	2110      	movs	r1, #16
 800252a:	4802      	ldr	r0, [pc, #8]	; (8002534 <toggleTraffic2Yellow+0x18>)
 800252c:	f000 fcd7 	bl	8002ede <HAL_GPIO_TogglePin>
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40010c00 	.word	0x40010c00

08002538 <acceptTraffic1Red>:

void acceptTraffic1Red(){
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
	max_red1 = counter;
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <acceptTraffic1Red+0x34>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <acceptTraffic1Red+0x38>)
 8002542:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <acceptTraffic1Red+0x38>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <acceptTraffic1Red+0x3c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	dc02      	bgt.n	8002556 <acceptTraffic1Red+0x1e>
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <acceptTraffic1Red+0x3c>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <acceptTraffic1Red+0x38>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <acceptTraffic1Red+0x3c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4a05      	ldr	r2, [pc, #20]	; (8002578 <acceptTraffic1Red+0x40>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000124 	.word	0x20000124
 8002570:	20000010 	.word	0x20000010
 8002574:	20000024 	.word	0x20000024
 8002578:	20000020 	.word	0x20000020

0800257c <acceptTraffic2Red>:

void acceptTraffic2Red(){
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	max_red2 = counter;
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <acceptTraffic2Red+0x34>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <acceptTraffic2Red+0x38>)
 8002586:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <acceptTraffic2Red+0x38>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <acceptTraffic2Red+0x3c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	dc02      	bgt.n	800259a <acceptTraffic2Red+0x1e>
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <acceptTraffic2Red+0x3c>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <acceptTraffic2Red+0x38>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <acceptTraffic2Red+0x3c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <acceptTraffic2Red+0x40>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000124 	.word	0x20000124
 80025b4:	2000001c 	.word	0x2000001c
 80025b8:	20000018 	.word	0x20000018
 80025bc:	20000014 	.word	0x20000014

080025c0 <acceptTraffic1Green>:

void acceptTraffic1Green(){
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
	max_green1 = counter;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <acceptTraffic1Green+0x24>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <acceptTraffic1Green+0x28>)
 80025ca:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <acceptTraffic1Green+0x2c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <acceptTraffic1Green+0x28>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <acceptTraffic1Green+0x30>)
 80025d8:	6013      	str	r3, [r2, #0]
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000124 	.word	0x20000124
 80025e8:	20000014 	.word	0x20000014
 80025ec:	2000001c 	.word	0x2000001c
 80025f0:	20000018 	.word	0x20000018

080025f4 <acceptTraffic2Green>:

void acceptTraffic2Green(){
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
	max_green2 = counter;
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <acceptTraffic2Green+0x24>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <acceptTraffic2Green+0x28>)
 80025fe:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <acceptTraffic2Green+0x2c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <acceptTraffic2Green+0x28>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	4a06      	ldr	r2, [pc, #24]	; (8002624 <acceptTraffic2Green+0x30>)
 800260c:	6013      	str	r3, [r2, #0]
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000124 	.word	0x20000124
 800261c:	20000020 	.word	0x20000020
 8002620:	20000010 	.word	0x20000010
 8002624:	20000024 	.word	0x20000024

08002628 <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <acceptTraffic1Yellow+0x24>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <acceptTraffic1Yellow+0x28>)
 8002632:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <acceptTraffic1Yellow+0x2c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <acceptTraffic1Yellow+0x28>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	4a06      	ldr	r2, [pc, #24]	; (8002658 <acceptTraffic1Yellow+0x30>)
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000124 	.word	0x20000124
 8002650:	20000018 	.word	0x20000018
 8002654:	2000001c 	.word	0x2000001c
 8002658:	20000014 	.word	0x20000014

0800265c <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <acceptTraffic2Yellow+0x24>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <acceptTraffic2Yellow+0x28>)
 8002666:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <acceptTraffic2Yellow+0x2c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <acceptTraffic2Yellow+0x28>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	4a06      	ldr	r2, [pc, #24]	; (800268c <acceptTraffic2Yellow+0x30>)
 8002674:	6013      	str	r3, [r2, #0]
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000124 	.word	0x20000124
 8002684:	20000024 	.word	0x20000024
 8002688:	20000010 	.word	0x20000010
 800268c:	20000020 	.word	0x20000020

08002690 <displayCounter>:

void displayCounter(){
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#", counter/10, counter%10);
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <displayCounter+0x48>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a10      	ldr	r2, [pc, #64]	; (80026dc <displayCounter+0x4c>)
 800269a:	fb82 1203 	smull	r1, r2, r2, r3
 800269e:	1092      	asrs	r2, r2, #2
 80026a0:	17db      	asrs	r3, r3, #31
 80026a2:	1ad0      	subs	r0, r2, r3
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <displayCounter+0x48>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <displayCounter+0x4c>)
 80026aa:	fb83 1302 	smull	r1, r3, r3, r2
 80026ae:	1099      	asrs	r1, r3, #2
 80026b0:	17d3      	asrs	r3, r2, #31
 80026b2:	1ac9      	subs	r1, r1, r3
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	1ad1      	subs	r1, r2, r3
 80026be:	460b      	mov	r3, r1
 80026c0:	4602      	mov	r2, r0
 80026c2:	4907      	ldr	r1, [pc, #28]	; (80026e0 <displayCounter+0x50>)
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <displayCounter+0x54>)
 80026c6:	f002 fc0d 	bl	8004ee4 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 9);
 80026ca:	2209      	movs	r2, #9
 80026cc:	4905      	ldr	r1, [pc, #20]	; (80026e4 <displayCounter+0x54>)
 80026ce:	4806      	ldr	r0, [pc, #24]	; (80026e8 <displayCounter+0x58>)
 80026d0:	f001 ffe3 	bl	800469a <HAL_UART_Transmit_IT>
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000124 	.word	0x20000124
 80026dc:	66666667 	.word	0x66666667
 80026e0:	08005770 	.word	0x08005770
 80026e4:	20000128 	.word	0x20000128
 80026e8:	200001ec 	.word	0x200001ec

080026ec <Reset_Handler>:
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <LoopFillZerobss+0x12>)
 80026ee:	490d      	ldr	r1, [pc, #52]	; (8002724 <LoopFillZerobss+0x16>)
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <LoopFillZerobss+0x1a>)
 80026f2:	2300      	movs	r3, #0
 80026f4:	e002      	b.n	80026fc <LoopCopyDataInit>

080026f6 <CopyDataInit>:
 80026f6:	58d4      	ldr	r4, [r2, r3]
 80026f8:	50c4      	str	r4, [r0, r3]
 80026fa:	3304      	adds	r3, #4

080026fc <LoopCopyDataInit>:
 80026fc:	18c4      	adds	r4, r0, r3
 80026fe:	428c      	cmp	r4, r1
 8002700:	d3f9      	bcc.n	80026f6 <CopyDataInit>
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <LoopFillZerobss+0x1e>)
 8002704:	4c0a      	ldr	r4, [pc, #40]	; (8002730 <LoopFillZerobss+0x22>)
 8002706:	2300      	movs	r3, #0
 8002708:	e001      	b.n	800270e <LoopFillZerobss>

0800270a <FillZerobss>:
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	3204      	adds	r2, #4

0800270e <LoopFillZerobss>:
 800270e:	42a2      	cmp	r2, r4
 8002710:	d3fb      	bcc.n	800270a <FillZerobss>
 8002712:	f7ff fd71 	bl	80021f8 <SystemInit>
 8002716:	f002 fbb9 	bl	8004e8c <__libc_init_array>
 800271a:	f7ff f843 	bl	80017a4 <main>
 800271e:	4770      	bx	lr
 8002720:	20000000 	.word	0x20000000
 8002724:	2000009c 	.word	0x2000009c
 8002728:	080057e0 	.word	0x080057e0
 800272c:	2000009c 	.word	0x2000009c
 8002730:	20000424 	.word	0x20000424

08002734 <ADC1_2_IRQHandler>:
 8002734:	e7fe      	b.n	8002734 <ADC1_2_IRQHandler>
	...

08002738 <HAL_Init>:
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_Init+0x28>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_Init+0x28>)
 8002742:	f043 0310 	orr.w	r3, r3, #16
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f923 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>
 800274e:	200f      	movs	r0, #15
 8002750:	f000 f808 	bl	8002764 <HAL_InitTick>
 8002754:	f7ff fbf0 	bl	8001f38 <HAL_MspInit>
 8002758:	2300      	movs	r3, #0
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40022000 	.word	0x40022000

08002764 <HAL_InitTick>:
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x54>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x58>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f93b 	bl	80029fe <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x2e>
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x4c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x4a>
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f000 f903 	bl	80029aa <HAL_NVIC_SetPriority>
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_InitTick+0x5c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x4c>
 80027ae:	2301      	movs	r3, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000002c 	.word	0x2000002c
 80027bc:	20000034 	.word	0x20000034
 80027c0:	20000030 	.word	0x20000030

080027c4 <HAL_IncTick>:
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_IncTick+0x1c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_IncTick+0x20>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_IncTick+0x20>)
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000034 	.word	0x20000034
 80027e4:	20000410 	.word	0x20000410

080027e8 <HAL_GetTick>:
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <HAL_GetTick+0x10>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000410 	.word	0x20000410

080027fc <__NVIC_SetPriorityGrouping>:
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4906      	ldr	r1, [pc, #24]	; (8002894 <__NVIC_EnableIRQ+0x34>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
 8002944:	4313      	orrs	r3, r2
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <SysTick_Config>:
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff90 	bl	8002898 <__NVIC_SetPriority>
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff2d 	bl	80027fc <__NVIC_SetPriorityGrouping>
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	f7ff ff42 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff90 	bl	80028ec <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5f 	bl	8002898 <__NVIC_SetPriority>
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff35 	bl	8002860 <__NVIC_EnableIRQ>
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DMA_Abort>:
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d008      	beq.n	8002a3e <HAL_DMA_Abort+0x28>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e020      	b.n	8002a80 <HAL_DMA_Abort+0x6a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 020e 	bic.w	r2, r2, #14
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2020 	strb.w	r2, [r3, #32]
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_DMA_Abort_IT>:
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d005      	beq.n	8002aae <HAL_DMA_Abort_IT+0x22>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e051      	b.n	8002b52 <HAL_DMA_Abort_IT+0xc6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 020e 	bic.w	r2, r2, #14
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <HAL_DMA_Abort_IT+0xd0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d029      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xa0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <HAL_DMA_Abort_IT+0xd4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d022      	beq.n	8002b28 <HAL_DMA_Abort_IT+0x9c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <HAL_DMA_Abort_IT+0xd8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d01a      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x96>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_DMA_Abort_IT+0xdc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d012      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x90>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_DMA_Abort_IT+0xe0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00a      	beq.n	8002b16 <HAL_DMA_Abort_IT+0x8a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_DMA_Abort_IT+0xe4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d102      	bne.n	8002b10 <HAL_DMA_Abort_IT+0x84>
 8002b0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b0e:	e00e      	b.n	8002b2e <HAL_DMA_Abort_IT+0xa2>
 8002b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b14:	e00b      	b.n	8002b2e <HAL_DMA_Abort_IT+0xa2>
 8002b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b1a:	e008      	b.n	8002b2e <HAL_DMA_Abort_IT+0xa2>
 8002b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b20:	e005      	b.n	8002b2e <HAL_DMA_Abort_IT+0xa2>
 8002b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b26:	e002      	b.n	8002b2e <HAL_DMA_Abort_IT+0xa2>
 8002b28:	2310      	movs	r3, #16
 8002b2a:	e000      	b.n	8002b2e <HAL_DMA_Abort_IT+0xa2>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <HAL_DMA_Abort_IT+0xe8>)
 8002b30:	6053      	str	r3, [r2, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2020 	strb.w	r2, [r3, #32]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_DMA_Abort_IT+0xc6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40020008 	.word	0x40020008
 8002b60:	4002001c 	.word	0x4002001c
 8002b64:	40020030 	.word	0x40020030
 8002b68:	40020044 	.word	0x40020044
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	4002006c 	.word	0x4002006c
 8002b74:	40020000 	.word	0x40020000

08002b78 <HAL_GPIO_Init>:
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	; 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	e169      	b.n	8002e60 <HAL_GPIO_Init+0x2e8>
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8158 	bne.w	8002e5a <HAL_GPIO_Init+0x2e2>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a9a      	ldr	r2, [pc, #616]	; (8002e18 <HAL_GPIO_Init+0x2a0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d05e      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bb4:	4a98      	ldr	r2, [pc, #608]	; (8002e18 <HAL_GPIO_Init+0x2a0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d875      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bba:	4a98      	ldr	r2, [pc, #608]	; (8002e1c <HAL_GPIO_Init+0x2a4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d058      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bc0:	4a96      	ldr	r2, [pc, #600]	; (8002e1c <HAL_GPIO_Init+0x2a4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d86f      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bc6:	4a96      	ldr	r2, [pc, #600]	; (8002e20 <HAL_GPIO_Init+0x2a8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d052      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bcc:	4a94      	ldr	r2, [pc, #592]	; (8002e20 <HAL_GPIO_Init+0x2a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d869      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bd2:	4a94      	ldr	r2, [pc, #592]	; (8002e24 <HAL_GPIO_Init+0x2ac>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04c      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bd8:	4a92      	ldr	r2, [pc, #584]	; (8002e24 <HAL_GPIO_Init+0x2ac>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d863      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bde:	4a92      	ldr	r2, [pc, #584]	; (8002e28 <HAL_GPIO_Init+0x2b0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d046      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002be4:	4a90      	ldr	r2, [pc, #576]	; (8002e28 <HAL_GPIO_Init+0x2b0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d85d      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	d82a      	bhi.n	8002c44 <HAL_GPIO_Init+0xcc>
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d859      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_GPIO_Init+0x80>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c73 	.word	0x08002c73
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002c5f 	.word	0x08002c5f
 8002c04:	08002ca1 	.word	0x08002ca1
 8002c08:	08002ca7 	.word	0x08002ca7
 8002c0c:	08002ca7 	.word	0x08002ca7
 8002c10:	08002ca7 	.word	0x08002ca7
 8002c14:	08002ca7 	.word	0x08002ca7
 8002c18:	08002ca7 	.word	0x08002ca7
 8002c1c:	08002ca7 	.word	0x08002ca7
 8002c20:	08002ca7 	.word	0x08002ca7
 8002c24:	08002ca7 	.word	0x08002ca7
 8002c28:	08002ca7 	.word	0x08002ca7
 8002c2c:	08002ca7 	.word	0x08002ca7
 8002c30:	08002ca7 	.word	0x08002ca7
 8002c34:	08002ca7 	.word	0x08002ca7
 8002c38:	08002ca7 	.word	0x08002ca7
 8002c3c:	08002c55 	.word	0x08002c55
 8002c40:	08002c69 	.word	0x08002c69
 8002c44:	4a79      	ldr	r2, [pc, #484]	; (8002e2c <HAL_GPIO_Init+0x2b4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002c4a:	e02c      	b.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	e029      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	e024      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	3308      	adds	r3, #8
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	e01f      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	e01a      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_GPIO_Init+0x108>
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	e013      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_GPIO_Init+0x11c>
 8002c88:	2308      	movs	r3, #8
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	e009      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002c94:	2308      	movs	r3, #8
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	615a      	str	r2, [r3, #20]
 8002c9e:	e003      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
 8002ca6:	bf00      	nop
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2bff      	cmp	r3, #255	; 0xff
 8002cac:	d801      	bhi.n	8002cb2 <HAL_GPIO_Init+0x13a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	e001      	b.n	8002cb6 <HAL_GPIO_Init+0x13e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2bff      	cmp	r3, #255	; 0xff
 8002cbc:	d802      	bhi.n	8002cc4 <HAL_GPIO_Init+0x14c>
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	e002      	b.n	8002cca <HAL_GPIO_Init+0x152>
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	3b08      	subs	r3, #8
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	210f      	movs	r1, #15
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80b1 	beq.w	8002e5a <HAL_GPIO_Init+0x2e2>
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	; (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6193      	str	r3, [r2, #24]
 8002d04:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4a48      	ldr	r2, [pc, #288]	; (8002e34 <HAL_GPIO_Init+0x2bc>)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	3302      	adds	r3, #2
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <HAL_GPIO_Init+0x2c0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_Init+0x1ec>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_Init+0x1e8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3e      	ldr	r2, [pc, #248]	; (8002e40 <HAL_GPIO_Init+0x2c8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x1e4>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3d      	ldr	r2, [pc, #244]	; (8002e44 <HAL_GPIO_Init+0x2cc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_Init+0x1e0>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d64:	2300      	movs	r3, #0
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	492f      	ldr	r1, [pc, #188]	; (8002e34 <HAL_GPIO_Init+0x2bc>)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	492c      	ldr	r1, [pc, #176]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x234>
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	4928      	ldr	r1, [pc, #160]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <HAL_GPIO_Init+0x24e>
 8002db8:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4922      	ldr	r1, [pc, #136]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
 8002dc4:	e006      	b.n	8002dd4 <HAL_GPIO_Init+0x25c>
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	491e      	ldr	r1, [pc, #120]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <HAL_GPIO_Init+0x276>
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	4918      	ldr	r1, [pc, #96]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x284>
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4914      	ldr	r1, [pc, #80]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d021      	beq.n	8002e4c <HAL_GPIO_Init+0x2d4>
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60cb      	str	r3, [r1, #12]
 8002e14:	e021      	b.n	8002e5a <HAL_GPIO_Init+0x2e2>
 8002e16:	bf00      	nop
 8002e18:	10320000 	.word	0x10320000
 8002e1c:	10310000 	.word	0x10310000
 8002e20:	10220000 	.word	0x10220000
 8002e24:	10210000 	.word	0x10210000
 8002e28:	10120000 	.word	0x10120000
 8002e2c:	10110000 	.word	0x10110000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40010800 	.word	0x40010800
 8002e3c:	40010c00 	.word	0x40010c00
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40011400 	.word	0x40011400
 8002e48:	40010400 	.word	0x40010400
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4909      	ldr	r1, [pc, #36]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f ae8e 	bne.w	8002b8c <HAL_GPIO_Init+0x14>
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	372c      	adds	r7, #44	; 0x2c
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_GPIO_ReadPin>:
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_GPIO_ReadPin+0x1e>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e001      	b.n	8002ea2 <HAL_GPIO_ReadPin+0x22>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_GPIO_WritePin>:
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	807b      	strh	r3, [r7, #2]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	707b      	strb	r3, [r7, #1]
 8002ebe:	787b      	ldrb	r3, [r7, #1]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_WritePin+0x1e>
 8002ec4:	887a      	ldrh	r2, [r7, #2]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	e003      	b.n	8002ed4 <HAL_GPIO_WritePin+0x26>
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	041a      	lsls	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_TogglePin>:
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	400b      	ands	r3, r1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_RCC_OscConfig>:
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x12>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e26c      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8087 	beq.w	800303e <HAL_RCC_OscConfig+0x12e>
 8002f30:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d00c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x46>
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
 8002f48:	4b8c      	ldr	r3, [pc, #560]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
 8002f56:	4b89      	ldr	r3, [pc, #548]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06c      	beq.n	800303c <HAL_RCC_OscConfig+0x12c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d168      	bne.n	800303c <HAL_RCC_OscConfig+0x12c>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e246      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x76>
 8002f78:	4b80      	ldr	r3, [pc, #512]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a7f      	ldr	r2, [pc, #508]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e02e      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x98>
 8002f8e:	4b7b      	ldr	r3, [pc, #492]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7a      	ldr	r2, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b78      	ldr	r3, [pc, #480]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a77      	ldr	r2, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0xbc>
 8002fb2:	4b72      	ldr	r3, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a71      	ldr	r2, [pc, #452]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fcc:	4b6b      	ldr	r3, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a67      	ldr	r2, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0x104>
 8002fec:	f7ff fbfc 	bl	80027e8 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xf6>
 8002ff4:	f7ff fbf8 	bl	80027e8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xf6>
 8003002:	2303      	movs	r3, #3
 8003004:	e1fa      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe4>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
 8003014:	f7ff fbe8 	bl	80027e8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x11e>
 800301c:	f7ff fbe4 	bl	80027e8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x11e>
 800302a:	2303      	movs	r3, #3
 800302c:	e1e6      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 800302e:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x10c>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
 800303c:	bf00      	nop
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_OscConfig+0x202>
 800304a:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x15e>
 8003056:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
 8003062:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
 8003082:	2301      	movs	r3, #1
 8003084:	e1ba      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4939      	ldr	r1, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
 800309a:	e03a      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1d6>
 80030a4:	4b36      	ldr	r3, [pc, #216]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f7ff fb9d 	bl	80027e8 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
 80030b2:	f7ff fb99 	bl	80027e8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
 80030c0:	2303      	movs	r3, #3
 80030c2:	e19b      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1a2>
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4927      	ldr	r1, [pc, #156]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f7ff fb7c 	bl	80027e8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x1f6>
 80030f4:	f7ff fb78 	bl	80027e8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x1f6>
 8003102:	2303      	movs	r3, #3
 8003104:	e17a      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1e4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d03a      	beq.n	8003194 <HAL_RCC_OscConfig+0x284>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <HAL_RCC_OscConfig+0x24a>
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f7ff fb5c 	bl	80027e8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x236>
 8003134:	f7ff fb58 	bl	80027e8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x236>
 8003142:	2303      	movs	r3, #3
 8003144:	e15a      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x224>
 8003152:	2001      	movs	r0, #1
 8003154:	f000 fad8 	bl	8003708 <RCC_Delay>
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x284>
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f7ff fb42 	bl	80027e8 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]
 8003166:	e00f      	b.n	8003188 <HAL_RCC_OscConfig+0x278>
 8003168:	f7ff fb3e 	bl	80027e8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d908      	bls.n	8003188 <HAL_RCC_OscConfig+0x278>
 8003176:	2303      	movs	r3, #3
 8003178:	e140      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	42420000 	.word	0x42420000
 8003184:	42420480 	.word	0x42420480
 8003188:	4b9e      	ldr	r3, [pc, #632]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e9      	bne.n	8003168 <HAL_RCC_OscConfig+0x258>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a6 	beq.w	80032ee <HAL_RCC_OscConfig+0x3de>
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
 80031a6:	4b97      	ldr	r3, [pc, #604]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <HAL_RCC_OscConfig+0x2be>
 80031b2:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4a93      	ldr	r2, [pc, #588]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	61d3      	str	r3, [r2, #28]
 80031be:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
 80031ce:	4b8e      	ldr	r3, [pc, #568]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2fc>
 80031da:	4b8b      	ldr	r3, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a8a      	ldr	r2, [pc, #552]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	f7ff faff 	bl	80027e8 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2f0>
 80031ee:	f7ff fafb 	bl	80027e8 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b64      	cmp	r3, #100	; 0x64
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2f0>
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0fd      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 8003200:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x4f8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2de>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x312>
 8003214:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a7a      	ldr	r2, [pc, #488]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e02d      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x334>
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	e01c      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x356>
 800324c:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a6c      	ldr	r2, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e00b      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a66      	ldr	r2, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6213      	str	r3, [r2, #32]
 8003272:	4b64      	ldr	r3, [pc, #400]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	6213      	str	r3, [r2, #32]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d015      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3a2>
 8003286:	f7ff faaf 	bl	80027e8 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x394>
 800328e:	f7ff faab 	bl	80027e8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x394>
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0ab      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 80032a4:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ee      	beq.n	800328e <HAL_RCC_OscConfig+0x37e>
 80032b0:	e014      	b.n	80032dc <HAL_RCC_OscConfig+0x3cc>
 80032b2:	f7ff fa99 	bl	80027e8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
 80032ba:	f7ff fa95 	bl	80027e8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
 80032cc:	2303      	movs	r3, #3
 80032ce:	e095      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x3aa>
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <HAL_RCC_OscConfig+0x3de>
 80032e2:	4b48      	ldr	r3, [pc, #288]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a47      	ldr	r2, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8081 	beq.w	80033fa <HAL_RCC_OscConfig+0x4ea>
 80032f8:	4b42      	ldr	r3, [pc, #264]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d061      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4b8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d146      	bne.n	800339a <HAL_RCC_OscConfig+0x48a>
 800330c:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCC_OscConfig+0x4fc>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f7ff fa69 	bl	80027e8 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x41c>
 800331a:	f7ff fa65 	bl	80027e8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x41c>
 8003328:	2303      	movs	r3, #3
 800332a:	e067      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x40a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d108      	bne.n	8003354 <HAL_RCC_OscConfig+0x444>
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	492d      	ldr	r1, [pc, #180]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a19      	ldr	r1, [r3, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	430b      	orrs	r3, r1
 8003366:	4927      	ldr	r1, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x4fc>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f7ff fa39 	bl	80027e8 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x47c>
 800337a:	f7ff fa35 	bl	80027e8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x47c>
 8003388:	2303      	movs	r3, #3
 800338a:	e037      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x46a>
 8003398:	e02f      	b.n	80033fa <HAL_RCC_OscConfig+0x4ea>
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_RCC_OscConfig+0x4fc>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f7ff fa22 	bl	80027e8 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4aa>
 80033a8:	f7ff fa1e 	bl	80027e8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4aa>
 80033b6:	2303      	movs	r3, #3
 80033b8:	e020      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x498>
 80033c6:	e018      	b.n	80033fa <HAL_RCC_OscConfig+0x4ea>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4c4>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e013      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4e6>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x4ea>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x4ec>
 80033fa:	2300      	movs	r3, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420060 	.word	0x42420060

08003410 <HAL_RCC_ClockConfig>:
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0x14>
 8003420:	2301      	movs	r3, #1
 8003422:	e0d0      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
 8003424:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d910      	bls.n	8003454 <HAL_RCC_ClockConfig+0x44>
 8003432:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4965      	ldr	r1, [pc, #404]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x44>
 8003450:	2301      	movs	r3, #1
 8003452:	e0b8      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x92>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x68>
 800346c:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003476:	6053      	str	r3, [r2, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x80>
 8003484:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a52      	ldr	r2, [pc, #328]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800348e:	6053      	str	r3, [r2, #4]
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	494d      	ldr	r1, [pc, #308]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d040      	beq.n	8003530 <HAL_RCC_ClockConfig+0x120>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xb6>
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d115      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xce>
 80034ce:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
 80034da:	2301      	movs	r3, #1
 80034dc:	e073      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
 80034de:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06b      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 0203 	bic.w	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4936      	ldr	r1, [pc, #216]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	f7ff f972 	bl	80027e8 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	e00a      	b.n	800351e <HAL_RCC_ClockConfig+0x10e>
 8003508:	f7ff f96e 	bl	80027e8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x10e>
 800351a:	2303      	movs	r3, #3
 800351c:	e053      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 020c 	and.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	429a      	cmp	r2, r3
 800352e:	d1eb      	bne.n	8003508 <HAL_RCC_ClockConfig+0xf8>
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d210      	bcs.n	8003560 <HAL_RCC_ClockConfig+0x150>
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 0207 	bic.w	r2, r3, #7
 8003546:	4922      	ldr	r1, [pc, #136]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x150>
 800355c:	2301      	movs	r3, #1
 800355e:	e032      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCC_ClockConfig+0x16e>
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4916      	ldr	r1, [pc, #88]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x18e>
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	490e      	ldr	r1, [pc, #56]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
 800359e:	f000 f821 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	490a      	ldr	r1, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	5ccb      	ldrb	r3, [r1, r3]
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1cc>)
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1d0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f8d0 	bl	8002764 <HAL_InitTick>
 80035c4:	2300      	movs	r3, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40021000 	.word	0x40021000
 80035d8:	0800578c 	.word	0x0800578c
 80035dc:	2000002c 	.word	0x2000002c
 80035e0:	20000030 	.word	0x20000030

080035e4 <HAL_RCC_GetSysClockFreq>:
 80035e4:	b490      	push	{r4, r7}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035ec:	1d3c      	adds	r4, r7, #4
 80035ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035f4:	f240 2301 	movw	r3, #513	; 0x201
 80035f8:	803b      	strh	r3, [r7, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b04      	cmp	r3, #4
 800361c:	d002      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x40>
 800361e:	2b08      	cmp	r3, #8
 8003620:	d003      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x46>
 8003622:	e02d      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x9c>
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	e02d      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0xa2>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	0c9b      	lsrs	r3, r3, #18
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003636:	4413      	add	r3, r2
 8003638:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x8c>
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <HAL_RCC_GetSysClockFreq+0xb4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0c5b      	lsrs	r3, r3, #17
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003656:	4413      	add	r3, r2
 8003658:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003662:	fb02 f203 	mul.w	r2, r2, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	e004      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x96>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	e002      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0xa2>
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	bf00      	nop
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	4618      	mov	r0, r3
 800368a:	3728      	adds	r7, #40	; 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bc90      	pop	{r4, r7}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	0800577c 	.word	0x0800577c
 8003698:	40021000 	.word	0x40021000
 800369c:	007a1200 	.word	0x007a1200
 80036a0:	003d0900 	.word	0x003d0900

080036a4 <HAL_RCC_GetHCLKFreq>:
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4b02      	ldr	r3, [pc, #8]	; (80036b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	2000002c 	.word	0x2000002c

080036b8 <HAL_RCC_GetPCLK1Freq>:
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	f7ff fff2 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	0800579c 	.word	0x0800579c

080036e0 <HAL_RCC_GetPCLK2Freq>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	f7ff ffde 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	0adb      	lsrs	r3, r3, #11
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	0800579c 	.word	0x0800579c

08003708 <RCC_Delay>:
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <RCC_Delay+0x34>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <RCC_Delay+0x38>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a5b      	lsrs	r3, r3, #9
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	bf00      	nop
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	60fa      	str	r2, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <RCC_Delay+0x1c>
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	2000002c 	.word	0x2000002c
 8003740:	10624dd3 	.word	0x10624dd3

08003744 <HAL_TIM_Base_Init>:
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_Base_Init+0x96>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fc16 	bl	8001f9c <HAL_TIM_Base_MspInit>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fc28 	bl	8003fd8 <TIM_Base_SetConfig>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037d8:	2300      	movs	r3, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_Base_Start_IT>:
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x18>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e03a      	b.n	8003872 <HAL_TIM_Base_Start_IT+0x8e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_TIM_Base_Start_IT+0x98>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d009      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a14      	ldr	r2, [pc, #80]	; (8003880 <HAL_TIM_Base_Start_IT+0x9c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <HAL_TIM_Base_Start_IT+0xa0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d111      	bne.n	8003860 <HAL_TIM_Base_Start_IT+0x7c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b06      	cmp	r3, #6
 800384c:	d010      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x8c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e007      	b.n	8003870 <HAL_TIM_Base_Start_IT+0x8c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800

08003888 <HAL_TIM_PWM_Init>:
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_TIM_PWM_Init+0x12>
 8003896:	2301      	movs	r3, #1
 8003898:	e041      	b.n	800391e <HAL_TIM_PWM_Init+0x96>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_TIM_PWM_Init+0x2c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f839 	bl	8003926 <HAL_TIM_PWM_MspInit>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f000 fb86 	bl	8003fd8 <TIM_Base_SetConfig>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800391c:	2300      	movs	r3, #0
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_TIM_PWM_MspInit>:
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_Start>:
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_TIM_PWM_Start+0x24>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e022      	b.n	80039a2 <HAL_TIM_PWM_Start+0x6a>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b04      	cmp	r3, #4
 8003960:	d109      	bne.n	8003976 <HAL_TIM_PWM_Start+0x3e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	e015      	b.n	80039a2 <HAL_TIM_PWM_Start+0x6a>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x58>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e008      	b.n	80039a2 <HAL_TIM_PWM_Start+0x6a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_TIM_PWM_Start+0x72>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e05e      	b.n	8003a68 <HAL_TIM_PWM_Start+0x130>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0x82>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b8:	e013      	b.n	80039e2 <HAL_TIM_PWM_Start+0xaa>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0x92>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c8:	e00b      	b.n	80039e2 <HAL_TIM_PWM_Start+0xaa>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0xa2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	e003      	b.n	80039e2 <HAL_TIM_PWM_Start+0xaa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	6839      	ldr	r1, [r7, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fd74 	bl	80044d8 <TIM_CCxChannelCmd>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <HAL_TIM_PWM_Start+0x138>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_PWM_Start+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <HAL_TIM_PWM_Start+0x138>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIM_PWM_Start+0xfa>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIM_PWM_Start+0xfa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <HAL_TIM_PWM_Start+0x13c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_TIM_PWM_Start+0xfa>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <HAL_TIM_PWM_Start+0x140>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <HAL_TIM_PWM_Start+0x11e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d010      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x12e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e007      	b.n	8003a66 <HAL_TIM_PWM_Start+0x12e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800

08003a7c <HAL_TIM_IRQHandler>:
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa6f 	bl	8003fa2 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa62 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa71 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa45 	bl	8003fa2 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa38 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fa47 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa1b 	bl	8003fa2 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa0e 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fa1d 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9f1 	bl	8003fa2 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9e4 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9f3 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fe fb7c 	bl	80022f8 <HAL_TIM_PeriodElapsedCallback>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fce1 	bl	80045ee <HAL_TIMEx_BreakCallback>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9b7 	bl	8003fc6 <HAL_TIM_TriggerCallback>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fcac 	bl	80045dc <HAL_TIMEx_CommutCallback>
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_PWM_ConfigChannel>:
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ac      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	f200 809f 	bhi.w	8003df4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003df5 	.word	0x08003df5
 8003cc4:	08003df5 	.word	0x08003df5
 8003cc8:	08003df5 	.word	0x08003df5
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003df5 	.word	0x08003df5
 8003cd4:	08003df5 	.word	0x08003df5
 8003cd8:	08003df5 	.word	0x08003df5
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003df5 	.word	0x08003df5
 8003ce4:	08003df5 	.word	0x08003df5
 8003ce8:	08003df5 	.word	0x08003df5
 8003cec:	08003db3 	.word	0x08003db3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9d0 	bl	800409c <TIM_OC1_SetConfig>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	619a      	str	r2, [r3, #24]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
 8003d2e:	e062      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa16 	bl	8004168 <TIM_OC2_SetConfig>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4a:	619a      	str	r2, [r3, #24]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	619a      	str	r2, [r3, #24]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
 8003d70:	e041      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fa5f 	bl	800423c <TIM_OC3_SetConfig>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	61da      	str	r2, [r3, #28]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
 8003db0:	e021      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 faa9 	bl	8004310 <TIM_OC4_SetConfig>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dcc:	61da      	str	r2, [r3, #28]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	61da      	str	r2, [r3, #28]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003df4:	bf00      	nop
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dfe:	2300      	movs	r3, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_TIM_ConfigClockSource>:
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_ConfigClockSource+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0b3      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x180>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d03e      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0xd0>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	f200 8087 	bhi.w	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	f000 8085 	beq.w	8003f74 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d87f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d01a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xa2>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d87b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d050      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x116>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d877      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d03c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xf6>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d873      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d058      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x136>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d86f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d064      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d86b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d060      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d867      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d05a      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x156>
 8003ea8:	e062      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x168>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f000 faee 	bl	800449a <TIM_ETR_SetConfig>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	e04e      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f000 fad7 	bl	800449a <TIM_ETR_SetConfig>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	e03b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fa4e 	bl	80043ac <TIM_TI1_ConfigInputStage>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2150      	movs	r1, #80	; 0x50
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 faa5 	bl	8004466 <TIM_ITRx_SetConfig>
 8003f1c:	e02b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fa6c 	bl	8004408 <TIM_TI2_ConfigInputStage>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2160      	movs	r1, #96	; 0x60
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fa95 	bl	8004466 <TIM_ITRx_SetConfig>
 8003f3c:	e01b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fa2e 	bl	80043ac <TIM_TI1_ConfigInputStage>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fa85 	bl	8004466 <TIM_ITRx_SetConfig>
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 fa7c 	bl	8004466 <TIM_ITRx_SetConfig>
 8003f6e:	e002      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_TIM_ConfigClockSource+0x16e>
 8003f74:	bf00      	nop
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f86:	2300      	movs	r3, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_OC_DelayElapsedCallback>:
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_IC_CaptureCallback>:
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_TriggerCallback>:
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <TIM_Base_SetConfig>:
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a29      	ldr	r2, [pc, #164]	; (8004090 <TIM_Base_SetConfig+0xb8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <TIM_Base_SetConfig+0xbc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a25      	ldr	r2, [pc, #148]	; (8004098 <TIM_Base_SetConfig+0xc0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x42>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <TIM_Base_SetConfig+0xb8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <TIM_Base_SetConfig+0xbc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <TIM_Base_SetConfig+0xc0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0x74>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a07      	ldr	r2, [pc, #28]	; (8004090 <TIM_Base_SetConfig+0xb8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d103      	bne.n	8004080 <TIM_Base_SetConfig+0xa8>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	615a      	str	r2, [r3, #20]
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800

0800409c <TIM_OC1_SetConfig>:
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0201 	bic.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 0302 	bic.w	r3, r3, #2
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <TIM_OC1_SetConfig+0xc8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d10c      	bne.n	8004112 <TIM_OC1_SetConfig+0x76>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f023 0308 	bic.w	r3, r3, #8
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <TIM_OC1_SetConfig+0xc8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d111      	bne.n	800413e <TIM_OC1_SetConfig+0xa2>
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	619a      	str	r2, [r3, #24]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	635a      	str	r2, [r3, #52]	; 0x34
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	621a      	str	r2, [r3, #32]
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40012c00 	.word	0x40012c00

08004168 <TIM_OC2_SetConfig>:
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0210 	bic.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0320 	bic.w	r3, r3, #32
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <TIM_OC2_SetConfig+0xd0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d10d      	bne.n	80041e4 <TIM_OC2_SetConfig+0x7c>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <TIM_OC2_SetConfig+0xd0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d113      	bne.n	8004214 <TIM_OC2_SetConfig+0xac>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	619a      	str	r2, [r3, #24]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	621a      	str	r2, [r3, #32]
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40012c00 	.word	0x40012c00

0800423c <TIM_OC3_SetConfig>:
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <TIM_OC3_SetConfig+0xd0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10d      	bne.n	80042b6 <TIM_OC3_SetConfig+0x7a>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <TIM_OC3_SetConfig+0xd0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d113      	bne.n	80042e6 <TIM_OC3_SetConfig+0xaa>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	61da      	str	r2, [r3, #28]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	621a      	str	r2, [r3, #32]
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00

08004310 <TIM_OC4_SetConfig>:
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	031b      	lsls	r3, r3, #12
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <TIM_OC4_SetConfig+0x98>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d109      	bne.n	8004384 <TIM_OC4_SetConfig+0x74>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	61da      	str	r2, [r3, #28]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	621a      	str	r2, [r3, #32]
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	40012c00 	.word	0x40012c00

080043ac <TIM_TI1_ConfigInputStage>:
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0201 	bic.w	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 030a 	bic.w	r3, r3, #10
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	619a      	str	r2, [r3, #24]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <TIM_TI2_ConfigInputStage>:
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f023 0210 	bic.w	r2, r3, #16
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	621a      	str	r2, [r3, #32]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	619a      	str	r2, [r3, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	621a      	str	r2, [r3, #32]
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <TIM_ITRx_SetConfig>:
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	f043 0307 	orr.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <TIM_ETR_SetConfig>:
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	431a      	orrs	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	609a      	str	r2, [r3, #8]
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <TIM_CCxChannelCmd>:
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_MasterConfigSynchronization>:
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004534:	2302      	movs	r3, #2
 8004536:	e046      	b.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00e      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004584:	d009      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10c      	bne.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045c4:	2300      	movs	r3, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800

080045dc <HAL_TIMEx_CommutCallback>:
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <HAL_TIMEx_BreakCallback>:
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_UART_Init>:
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_UART_Init+0x12>
 800460e:	2301      	movs	r3, #1
 8004610:	e03f      	b.n	8004692 <HAL_UART_Init+0x92>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_UART_Init+0x2c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd fd22 	bl	8002070 <HAL_UART_MspInit>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	; 0x24
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fb8d 	bl	8004d64 <UART_SetConfig>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004668:	615a      	str	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004690:	2300      	movs	r3, #0
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_UART_Transmit_IT>:
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	4613      	mov	r3, r2
 80046a6:	80fb      	strh	r3, [r7, #6]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d130      	bne.n	8004716 <HAL_UART_Transmit_IT+0x7c>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_UART_Transmit_IT+0x26>
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_UART_Transmit_IT+0x2a>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e029      	b.n	8004718 <HAL_UART_Transmit_IT+0x7e>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Transmit_IT+0x38>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e022      	b.n	8004718 <HAL_UART_Transmit_IT+0x7e>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	621a      	str	r2, [r3, #32]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	849a      	strh	r2, [r3, #36]	; 0x24
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	84da      	strh	r2, [r3, #38]	; 0x26
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2221      	movs	r2, #33	; 0x21
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_UART_Transmit_IT+0x7e>
 8004716:	2302      	movs	r3, #2
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
	...

08004724 <HAL_UART_IRQHandler>:
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10d      	bne.n	8004776 <HAL_UART_IRQHandler+0x52>
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_UART_IRQHandler+0x52>
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_UART_IRQHandler+0x52>
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa4f 	bl	8004c12 <UART_Receive_IT>
 8004774:	e17b      	b.n	8004a6e <HAL_UART_IRQHandler+0x34a>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80b1 	beq.w	80048e0 <HAL_UART_IRQHandler+0x1bc>
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_UART_IRQHandler+0x70>
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a6 	beq.w	80048e0 <HAL_UART_IRQHandler+0x1bc>
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_UART_IRQHandler+0x90>
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_UART_IRQHandler+0x90>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f043 0201 	orr.w	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_UART_IRQHandler+0xb0>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_UART_IRQHandler+0xb0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f043 0202 	orr.w	r2, r3, #2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_UART_IRQHandler+0xd0>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_UART_IRQHandler+0xd0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	f043 0204 	orr.w	r2, r3, #4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00f      	beq.n	800481e <HAL_UART_IRQHandler+0xfa>
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <HAL_UART_IRQHandler+0xee>
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_UART_IRQHandler+0xfa>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0208 	orr.w	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 811e 	beq.w	8004a64 <HAL_UART_IRQHandler+0x340>
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_UART_IRQHandler+0x11e>
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_UART_IRQHandler+0x11e>
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9e8 	bl	8004c12 <UART_Receive_IT>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <HAL_UART_IRQHandler+0x146>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d031      	beq.n	80048ce <HAL_UART_IRQHandler+0x1aa>
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f92a 	bl	8004ac4 <UART_EndRxTransfer>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d023      	beq.n	80048c6 <HAL_UART_IRQHandler+0x1a2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488c:	615a      	str	r2, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	2b00      	cmp	r3, #0
 8004894:	d013      	beq.n	80048be <HAL_UART_IRQHandler+0x19a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	4a76      	ldr	r2, [pc, #472]	; (8004a74 <HAL_UART_IRQHandler+0x350>)
 800489c:	635a      	str	r2, [r3, #52]	; 0x34
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe f8f2 	bl	8002a8c <HAL_DMA_Abort_IT>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d016      	beq.n	80048dc <HAL_UART_IRQHandler+0x1b8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048b8:	4610      	mov	r0, r2
 80048ba:	4798      	blx	r3
 80048bc:	e00e      	b.n	80048dc <HAL_UART_IRQHandler+0x1b8>
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8ec 	bl	8004a9c <HAL_UART_ErrorCallback>
 80048c4:	e00a      	b.n	80048dc <HAL_UART_IRQHandler+0x1b8>
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8e8 	bl	8004a9c <HAL_UART_ErrorCallback>
 80048cc:	e006      	b.n	80048dc <HAL_UART_IRQHandler+0x1b8>
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f8e4 	bl	8004a9c <HAL_UART_ErrorCallback>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
 80048da:	e0c3      	b.n	8004a64 <HAL_UART_IRQHandler+0x340>
 80048dc:	bf00      	nop
 80048de:	e0c1      	b.n	8004a64 <HAL_UART_IRQHandler+0x340>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 80a1 	bne.w	8004a2c <HAL_UART_IRQHandler+0x308>
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 809b 	beq.w	8004a2c <HAL_UART_IRQHandler+0x308>
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8095 	beq.w	8004a2c <HAL_UART_IRQHandler+0x308>
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d04e      	beq.n	80049c4 <HAL_UART_IRQHandler+0x2a0>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	823b      	strh	r3, [r7, #16]
 8004930:	8a3b      	ldrh	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8098 	beq.w	8004a68 <HAL_UART_IRQHandler+0x344>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800493c:	8a3a      	ldrh	r2, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	f080 8092 	bcs.w	8004a68 <HAL_UART_IRQHandler+0x344>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8a3a      	ldrh	r2, [r7, #16]
 8004948:	85da      	strh	r2, [r3, #46]	; 0x2e
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b20      	cmp	r3, #32
 8004952:	d02b      	beq.n	80049ac <HAL_UART_IRQHandler+0x288>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	615a      	str	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004982:	615a      	str	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0210 	bic.w	r2, r2, #16
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe f835 	bl	8002a16 <HAL_DMA_Abort>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f876 	bl	8004aae <HAL_UARTEx_RxEventCallback>
 80049c2:	e051      	b.n	8004a68 <HAL_UART_IRQHandler+0x344>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	827b      	strh	r3, [r7, #18]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d047      	beq.n	8004a6c <HAL_UART_IRQHandler+0x348>
 80049dc:	8a7b      	ldrh	r3, [r7, #18]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d044      	beq.n	8004a6c <HAL_UART_IRQHandler+0x348>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	615a      	str	r2, [r3, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0210 	bic.w	r2, r2, #16
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	8a7b      	ldrh	r3, [r7, #18]
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f842 	bl	8004aae <HAL_UARTEx_RxEventCallback>
 8004a2a:	e01f      	b.n	8004a6c <HAL_UART_IRQHandler+0x348>
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_UART_IRQHandler+0x324>
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_UART_IRQHandler+0x324>
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f87f 	bl	8004b44 <UART_Transmit_IT>
 8004a46:	e012      	b.n	8004a6e <HAL_UART_IRQHandler+0x34a>
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <HAL_UART_IRQHandler+0x34a>
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_UART_IRQHandler+0x34a>
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8c0 	bl	8004be2 <UART_EndTransmit_IT>
 8004a62:	e004      	b.n	8004a6e <HAL_UART_IRQHandler+0x34a>
 8004a64:	bf00      	nop
 8004a66:	e002      	b.n	8004a6e <HAL_UART_IRQHandler+0x34a>
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <HAL_UART_IRQHandler+0x34a>
 8004a6c:	bf00      	nop
 8004a6e:	3728      	adds	r7, #40	; 0x28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	08004b1d 	.word	0x08004b1d

08004a78 <HAL_UART_TxCpltCallback>:
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_UART_RxCpltCallback>:
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UART_ErrorCallback>:
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <HAL_UARTEx_RxEventCallback>:
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	807b      	strh	r3, [r7, #2]
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <UART_EndRxTransfer>:
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ada:	60da      	str	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	615a      	str	r2, [r3, #20]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <UART_EndRxTransfer+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0210 	bic.w	r2, r2, #16
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <UART_DMAAbortOnError>:
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	84da      	strh	r2, [r3, #38]	; 0x26
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff ffb0 	bl	8004a9c <HAL_UART_ErrorCallback>
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_Transmit_IT>:
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b21      	cmp	r3, #33	; 0x21
 8004b56:	d13e      	bne.n	8004bd6 <UART_Transmit_IT+0x92>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b60:	d114      	bne.n	8004b8c <UART_Transmit_IT+0x48>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <UART_Transmit_IT+0x48>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	621a      	str	r2, [r3, #32]
 8004b8a:	e008      	b.n	8004b9e <UART_Transmit_IT+0x5a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	1c59      	adds	r1, r3, #1
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6211      	str	r1, [r2, #32]
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4619      	mov	r1, r3
 8004bac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10f      	bne.n	8004bd2 <UART_Transmit_IT+0x8e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <UART_Transmit_IT+0x94>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <UART_EndTransmit_IT>:
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	60da      	str	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ff38 	bl	8004a78 <HAL_UART_TxCpltCallback>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_Receive_IT>:
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b22      	cmp	r3, #34	; 0x22
 8004c24:	f040 8099 	bne.w	8004d5a <UART_Receive_IT+0x148>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c30:	d117      	bne.n	8004c62 <UART_Receive_IT+0x50>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d113      	bne.n	8004c62 <UART_Receive_IT+0x50>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c60:	e026      	b.n	8004cb0 <UART_Receive_IT+0x9e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d007      	beq.n	8004c86 <UART_Receive_IT+0x74>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <UART_Receive_IT+0x82>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <UART_Receive_IT+0x82>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e008      	b.n	8004ca6 <UART_Receive_IT+0x94>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d148      	bne.n	8004d56 <UART_Receive_IT+0x144>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0220 	bic.w	r2, r2, #32
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ce2:	60da      	str	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	615a      	str	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d123      	bne.n	8004d4c <UART_Receive_IT+0x13a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0210 	bic.w	r2, r2, #16
 8004d18:	60da      	str	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d10a      	bne.n	8004d3e <UART_Receive_IT+0x12c>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff feb2 	bl	8004aae <HAL_UARTEx_RxEventCallback>
 8004d4a:	e002      	b.n	8004d52 <UART_Receive_IT+0x140>
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fe9c 	bl	8004a8a <HAL_UART_RxCpltCallback>
 8004d52:	2300      	movs	r3, #0
 8004d54:	e002      	b.n	8004d5c <UART_Receive_IT+0x14a>
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <UART_Receive_IT+0x14a>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_SetConfig>:
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	611a      	str	r2, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d9e:	f023 030c 	bic.w	r3, r3, #12
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	60d3      	str	r3, [r2, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	615a      	str	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <UART_SetConfig+0x114>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d103      	bne.n	8004dd4 <UART_SetConfig+0x70>
 8004dcc:	f7fe fc88 	bl	80036e0 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	e002      	b.n	8004dda <UART_SetConfig+0x76>
 8004dd4:	f7fe fc70 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009a      	lsls	r2, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <UART_SetConfig+0x118>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	0119      	lsls	r1, r3, #4
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <UART_SetConfig+0x118>)
 8004e12:	fba3 0302 	umull	r0, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2064      	movs	r0, #100	; 0x64
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	3332      	adds	r3, #50	; 0x32
 8004e24:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <UART_SetConfig+0x118>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e30:	4419      	add	r1, r3
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <UART_SetConfig+0x118>)
 8004e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2064      	movs	r0, #100	; 0x64
 8004e52:	fb00 f303 	mul.w	r3, r0, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <UART_SetConfig+0x118>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40013800 	.word	0x40013800
 8004e7c:	51eb851f 	.word	0x51eb851f

08004e80 <__errno>:
 8004e80:	4b01      	ldr	r3, [pc, #4]	; (8004e88 <__errno+0x8>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000038 	.word	0x20000038

08004e8c <__libc_init_array>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	2600      	movs	r6, #0
 8004e90:	4d0c      	ldr	r5, [pc, #48]	; (8004ec4 <__libc_init_array+0x38>)
 8004e92:	4c0d      	ldr	r4, [pc, #52]	; (8004ec8 <__libc_init_array+0x3c>)
 8004e94:	1b64      	subs	r4, r4, r5
 8004e96:	10a4      	asrs	r4, r4, #2
 8004e98:	42a6      	cmp	r6, r4
 8004e9a:	d109      	bne.n	8004eb0 <__libc_init_array+0x24>
 8004e9c:	f000 fc5c 	bl	8005758 <_init>
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	4d0a      	ldr	r5, [pc, #40]	; (8004ecc <__libc_init_array+0x40>)
 8004ea4:	4c0a      	ldr	r4, [pc, #40]	; (8004ed0 <__libc_init_array+0x44>)
 8004ea6:	1b64      	subs	r4, r4, r5
 8004ea8:	10a4      	asrs	r4, r4, #2
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	d105      	bne.n	8004eba <__libc_init_array+0x2e>
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb4:	4798      	blx	r3
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7ee      	b.n	8004e98 <__libc_init_array+0xc>
 8004eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebe:	4798      	blx	r3
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	e7f2      	b.n	8004eaa <__libc_init_array+0x1e>
 8004ec4:	080057d8 	.word	0x080057d8
 8004ec8:	080057d8 	.word	0x080057d8
 8004ecc:	080057d8 	.word	0x080057d8
 8004ed0:	080057dc 	.word	0x080057dc

08004ed4 <memset>:
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4402      	add	r2, r0
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d100      	bne.n	8004ede <memset+0xa>
 8004edc:	4770      	bx	lr
 8004ede:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee2:	e7f9      	b.n	8004ed8 <memset+0x4>

08004ee4 <siprintf>:
 8004ee4:	b40e      	push	{r1, r2, r3}
 8004ee6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004eea:	b500      	push	{lr}
 8004eec:	b09c      	sub	sp, #112	; 0x70
 8004eee:	ab1d      	add	r3, sp, #116	; 0x74
 8004ef0:	9002      	str	r0, [sp, #8]
 8004ef2:	9006      	str	r0, [sp, #24]
 8004ef4:	9107      	str	r1, [sp, #28]
 8004ef6:	9104      	str	r1, [sp, #16]
 8004ef8:	4808      	ldr	r0, [pc, #32]	; (8004f1c <siprintf+0x38>)
 8004efa:	4909      	ldr	r1, [pc, #36]	; (8004f20 <siprintf+0x3c>)
 8004efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f00:	9105      	str	r1, [sp, #20]
 8004f02:	6800      	ldr	r0, [r0, #0]
 8004f04:	a902      	add	r1, sp, #8
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	f000 f868 	bl	8004fdc <_svfiprintf_r>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	9b02      	ldr	r3, [sp, #8]
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	b01c      	add	sp, #112	; 0x70
 8004f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f18:	b003      	add	sp, #12
 8004f1a:	4770      	bx	lr
 8004f1c:	20000038 	.word	0x20000038
 8004f20:	ffff0208 	.word	0xffff0208

08004f24 <__ssputs_r>:
 8004f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	688e      	ldr	r6, [r1, #8]
 8004f2a:	4682      	mov	sl, r0
 8004f2c:	429e      	cmp	r6, r3
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4690      	mov	r8, r2
 8004f32:	461f      	mov	r7, r3
 8004f34:	d838      	bhi.n	8004fa8 <__ssputs_r+0x84>
 8004f36:	898a      	ldrh	r2, [r1, #12]
 8004f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f3c:	d032      	beq.n	8004fa4 <__ssputs_r+0x80>
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	6909      	ldr	r1, [r1, #16]
 8004f42:	3301      	adds	r3, #1
 8004f44:	eba5 0901 	sub.w	r9, r5, r1
 8004f48:	6965      	ldr	r5, [r4, #20]
 8004f4a:	444b      	add	r3, r9
 8004f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f54:	106d      	asrs	r5, r5, #1
 8004f56:	429d      	cmp	r5, r3
 8004f58:	bf38      	it	cc
 8004f5a:	461d      	movcc	r5, r3
 8004f5c:	0553      	lsls	r3, r2, #21
 8004f5e:	d531      	bpl.n	8004fc4 <__ssputs_r+0xa0>
 8004f60:	4629      	mov	r1, r5
 8004f62:	f000 fb53 	bl	800560c <_malloc_r>
 8004f66:	4606      	mov	r6, r0
 8004f68:	b950      	cbnz	r0, 8004f80 <__ssputs_r+0x5c>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	f8ca 3000 	str.w	r3, [sl]
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7a:	81a3      	strh	r3, [r4, #12]
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	464a      	mov	r2, r9
 8004f82:	6921      	ldr	r1, [r4, #16]
 8004f84:	f000 face 	bl	8005524 <memcpy>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	6126      	str	r6, [r4, #16]
 8004f96:	444e      	add	r6, r9
 8004f98:	6026      	str	r6, [r4, #0]
 8004f9a:	463e      	mov	r6, r7
 8004f9c:	6165      	str	r5, [r4, #20]
 8004f9e:	eba5 0509 	sub.w	r5, r5, r9
 8004fa2:	60a5      	str	r5, [r4, #8]
 8004fa4:	42be      	cmp	r6, r7
 8004fa6:	d900      	bls.n	8004faa <__ssputs_r+0x86>
 8004fa8:	463e      	mov	r6, r7
 8004faa:	4632      	mov	r2, r6
 8004fac:	4641      	mov	r1, r8
 8004fae:	6820      	ldr	r0, [r4, #0]
 8004fb0:	f000 fac6 	bl	8005540 <memmove>
 8004fb4:	68a3      	ldr	r3, [r4, #8]
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	1b9b      	subs	r3, r3, r6
 8004fba:	4432      	add	r2, r6
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	6022      	str	r2, [r4, #0]
 8004fc2:	e7db      	b.n	8004f7c <__ssputs_r+0x58>
 8004fc4:	462a      	mov	r2, r5
 8004fc6:	f000 fb7b 	bl	80056c0 <_realloc_r>
 8004fca:	4606      	mov	r6, r0
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1e1      	bne.n	8004f94 <__ssputs_r+0x70>
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	6921      	ldr	r1, [r4, #16]
 8004fd4:	f000 face 	bl	8005574 <_free_r>
 8004fd8:	e7c7      	b.n	8004f6a <__ssputs_r+0x46>
	...

08004fdc <_svfiprintf_r>:
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	4698      	mov	r8, r3
 8004fe2:	898b      	ldrh	r3, [r1, #12]
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	061b      	lsls	r3, r3, #24
 8004fe8:	460d      	mov	r5, r1
 8004fea:	4614      	mov	r4, r2
 8004fec:	b09d      	sub	sp, #116	; 0x74
 8004fee:	d50e      	bpl.n	800500e <_svfiprintf_r+0x32>
 8004ff0:	690b      	ldr	r3, [r1, #16]
 8004ff2:	b963      	cbnz	r3, 800500e <_svfiprintf_r+0x32>
 8004ff4:	2140      	movs	r1, #64	; 0x40
 8004ff6:	f000 fb09 	bl	800560c <_malloc_r>
 8004ffa:	6028      	str	r0, [r5, #0]
 8004ffc:	6128      	str	r0, [r5, #16]
 8004ffe:	b920      	cbnz	r0, 800500a <_svfiprintf_r+0x2e>
 8005000:	230c      	movs	r3, #12
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	e0d1      	b.n	80051ae <_svfiprintf_r+0x1d2>
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	616b      	str	r3, [r5, #20]
 800500e:	2300      	movs	r3, #0
 8005010:	9309      	str	r3, [sp, #36]	; 0x24
 8005012:	2320      	movs	r3, #32
 8005014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005018:	2330      	movs	r3, #48	; 0x30
 800501a:	f04f 0901 	mov.w	r9, #1
 800501e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005022:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051c8 <_svfiprintf_r+0x1ec>
 8005026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800502a:	4623      	mov	r3, r4
 800502c:	469a      	mov	sl, r3
 800502e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005032:	b10a      	cbz	r2, 8005038 <_svfiprintf_r+0x5c>
 8005034:	2a25      	cmp	r2, #37	; 0x25
 8005036:	d1f9      	bne.n	800502c <_svfiprintf_r+0x50>
 8005038:	ebba 0b04 	subs.w	fp, sl, r4
 800503c:	d00b      	beq.n	8005056 <_svfiprintf_r+0x7a>
 800503e:	465b      	mov	r3, fp
 8005040:	4622      	mov	r2, r4
 8005042:	4629      	mov	r1, r5
 8005044:	4638      	mov	r0, r7
 8005046:	f7ff ff6d 	bl	8004f24 <__ssputs_r>
 800504a:	3001      	adds	r0, #1
 800504c:	f000 80aa 	beq.w	80051a4 <_svfiprintf_r+0x1c8>
 8005050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005052:	445a      	add	r2, fp
 8005054:	9209      	str	r2, [sp, #36]	; 0x24
 8005056:	f89a 3000 	ldrb.w	r3, [sl]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80a2 	beq.w	80051a4 <_svfiprintf_r+0x1c8>
 8005060:	2300      	movs	r3, #0
 8005062:	f04f 32ff 	mov.w	r2, #4294967295
 8005066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800506a:	f10a 0a01 	add.w	sl, sl, #1
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	9307      	str	r3, [sp, #28]
 8005072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005076:	931a      	str	r3, [sp, #104]	; 0x68
 8005078:	4654      	mov	r4, sl
 800507a:	2205      	movs	r2, #5
 800507c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005080:	4851      	ldr	r0, [pc, #324]	; (80051c8 <_svfiprintf_r+0x1ec>)
 8005082:	f000 fa41 	bl	8005508 <memchr>
 8005086:	9a04      	ldr	r2, [sp, #16]
 8005088:	b9d8      	cbnz	r0, 80050c2 <_svfiprintf_r+0xe6>
 800508a:	06d0      	lsls	r0, r2, #27
 800508c:	bf44      	itt	mi
 800508e:	2320      	movmi	r3, #32
 8005090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005094:	0711      	lsls	r1, r2, #28
 8005096:	bf44      	itt	mi
 8005098:	232b      	movmi	r3, #43	; 0x2b
 800509a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800509e:	f89a 3000 	ldrb.w	r3, [sl]
 80050a2:	2b2a      	cmp	r3, #42	; 0x2a
 80050a4:	d015      	beq.n	80050d2 <_svfiprintf_r+0xf6>
 80050a6:	4654      	mov	r4, sl
 80050a8:	2000      	movs	r0, #0
 80050aa:	f04f 0c0a 	mov.w	ip, #10
 80050ae:	9a07      	ldr	r2, [sp, #28]
 80050b0:	4621      	mov	r1, r4
 80050b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b6:	3b30      	subs	r3, #48	; 0x30
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d94e      	bls.n	800515a <_svfiprintf_r+0x17e>
 80050bc:	b1b0      	cbz	r0, 80050ec <_svfiprintf_r+0x110>
 80050be:	9207      	str	r2, [sp, #28]
 80050c0:	e014      	b.n	80050ec <_svfiprintf_r+0x110>
 80050c2:	eba0 0308 	sub.w	r3, r0, r8
 80050c6:	fa09 f303 	lsl.w	r3, r9, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	46a2      	mov	sl, r4
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	e7d2      	b.n	8005078 <_svfiprintf_r+0x9c>
 80050d2:	9b03      	ldr	r3, [sp, #12]
 80050d4:	1d19      	adds	r1, r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	9103      	str	r1, [sp, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfbb      	ittet	lt
 80050de:	425b      	neglt	r3, r3
 80050e0:	f042 0202 	orrlt.w	r2, r2, #2
 80050e4:	9307      	strge	r3, [sp, #28]
 80050e6:	9307      	strlt	r3, [sp, #28]
 80050e8:	bfb8      	it	lt
 80050ea:	9204      	strlt	r2, [sp, #16]
 80050ec:	7823      	ldrb	r3, [r4, #0]
 80050ee:	2b2e      	cmp	r3, #46	; 0x2e
 80050f0:	d10c      	bne.n	800510c <_svfiprintf_r+0x130>
 80050f2:	7863      	ldrb	r3, [r4, #1]
 80050f4:	2b2a      	cmp	r3, #42	; 0x2a
 80050f6:	d135      	bne.n	8005164 <_svfiprintf_r+0x188>
 80050f8:	9b03      	ldr	r3, [sp, #12]
 80050fa:	3402      	adds	r4, #2
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	9203      	str	r2, [sp, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfb8      	it	lt
 8005106:	f04f 33ff 	movlt.w	r3, #4294967295
 800510a:	9305      	str	r3, [sp, #20]
 800510c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051d8 <_svfiprintf_r+0x1fc>
 8005110:	2203      	movs	r2, #3
 8005112:	4650      	mov	r0, sl
 8005114:	7821      	ldrb	r1, [r4, #0]
 8005116:	f000 f9f7 	bl	8005508 <memchr>
 800511a:	b140      	cbz	r0, 800512e <_svfiprintf_r+0x152>
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	eba0 000a 	sub.w	r0, r0, sl
 8005122:	fa03 f000 	lsl.w	r0, r3, r0
 8005126:	9b04      	ldr	r3, [sp, #16]
 8005128:	3401      	adds	r4, #1
 800512a:	4303      	orrs	r3, r0
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005132:	2206      	movs	r2, #6
 8005134:	4825      	ldr	r0, [pc, #148]	; (80051cc <_svfiprintf_r+0x1f0>)
 8005136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800513a:	f000 f9e5 	bl	8005508 <memchr>
 800513e:	2800      	cmp	r0, #0
 8005140:	d038      	beq.n	80051b4 <_svfiprintf_r+0x1d8>
 8005142:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <_svfiprintf_r+0x1f4>)
 8005144:	bb1b      	cbnz	r3, 800518e <_svfiprintf_r+0x1b2>
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	3307      	adds	r3, #7
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	3308      	adds	r3, #8
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005154:	4433      	add	r3, r6
 8005156:	9309      	str	r3, [sp, #36]	; 0x24
 8005158:	e767      	b.n	800502a <_svfiprintf_r+0x4e>
 800515a:	460c      	mov	r4, r1
 800515c:	2001      	movs	r0, #1
 800515e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005162:	e7a5      	b.n	80050b0 <_svfiprintf_r+0xd4>
 8005164:	2300      	movs	r3, #0
 8005166:	f04f 0c0a 	mov.w	ip, #10
 800516a:	4619      	mov	r1, r3
 800516c:	3401      	adds	r4, #1
 800516e:	9305      	str	r3, [sp, #20]
 8005170:	4620      	mov	r0, r4
 8005172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005176:	3a30      	subs	r2, #48	; 0x30
 8005178:	2a09      	cmp	r2, #9
 800517a:	d903      	bls.n	8005184 <_svfiprintf_r+0x1a8>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0c5      	beq.n	800510c <_svfiprintf_r+0x130>
 8005180:	9105      	str	r1, [sp, #20]
 8005182:	e7c3      	b.n	800510c <_svfiprintf_r+0x130>
 8005184:	4604      	mov	r4, r0
 8005186:	2301      	movs	r3, #1
 8005188:	fb0c 2101 	mla	r1, ip, r1, r2
 800518c:	e7f0      	b.n	8005170 <_svfiprintf_r+0x194>
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4638      	mov	r0, r7
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <_svfiprintf_r+0x1f8>)
 8005198:	a904      	add	r1, sp, #16
 800519a:	f3af 8000 	nop.w
 800519e:	1c42      	adds	r2, r0, #1
 80051a0:	4606      	mov	r6, r0
 80051a2:	d1d6      	bne.n	8005152 <_svfiprintf_r+0x176>
 80051a4:	89ab      	ldrh	r3, [r5, #12]
 80051a6:	065b      	lsls	r3, r3, #25
 80051a8:	f53f af2c 	bmi.w	8005004 <_svfiprintf_r+0x28>
 80051ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ae:	b01d      	add	sp, #116	; 0x74
 80051b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b4:	ab03      	add	r3, sp, #12
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	462a      	mov	r2, r5
 80051ba:	4638      	mov	r0, r7
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <_svfiprintf_r+0x1f8>)
 80051be:	a904      	add	r1, sp, #16
 80051c0:	f000 f87c 	bl	80052bc <_printf_i>
 80051c4:	e7eb      	b.n	800519e <_svfiprintf_r+0x1c2>
 80051c6:	bf00      	nop
 80051c8:	080057a4 	.word	0x080057a4
 80051cc:	080057ae 	.word	0x080057ae
 80051d0:	00000000 	.word	0x00000000
 80051d4:	08004f25 	.word	0x08004f25
 80051d8:	080057aa 	.word	0x080057aa

080051dc <_printf_common>:
 80051dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e0:	4616      	mov	r6, r2
 80051e2:	4699      	mov	r9, r3
 80051e4:	688a      	ldr	r2, [r1, #8]
 80051e6:	690b      	ldr	r3, [r1, #16]
 80051e8:	4607      	mov	r7, r0
 80051ea:	4293      	cmp	r3, r2
 80051ec:	bfb8      	it	lt
 80051ee:	4613      	movlt	r3, r2
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051f6:	460c      	mov	r4, r1
 80051f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051fc:	b10a      	cbz	r2, 8005202 <_printf_common+0x26>
 80051fe:	3301      	adds	r3, #1
 8005200:	6033      	str	r3, [r6, #0]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	0699      	lsls	r1, r3, #26
 8005206:	bf42      	ittt	mi
 8005208:	6833      	ldrmi	r3, [r6, #0]
 800520a:	3302      	addmi	r3, #2
 800520c:	6033      	strmi	r3, [r6, #0]
 800520e:	6825      	ldr	r5, [r4, #0]
 8005210:	f015 0506 	ands.w	r5, r5, #6
 8005214:	d106      	bne.n	8005224 <_printf_common+0x48>
 8005216:	f104 0a19 	add.w	sl, r4, #25
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	6832      	ldr	r2, [r6, #0]
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	42ab      	cmp	r3, r5
 8005222:	dc28      	bgt.n	8005276 <_printf_common+0x9a>
 8005224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005228:	1e13      	subs	r3, r2, #0
 800522a:	6822      	ldr	r2, [r4, #0]
 800522c:	bf18      	it	ne
 800522e:	2301      	movne	r3, #1
 8005230:	0692      	lsls	r2, r2, #26
 8005232:	d42d      	bmi.n	8005290 <_printf_common+0xb4>
 8005234:	4649      	mov	r1, r9
 8005236:	4638      	mov	r0, r7
 8005238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800523c:	47c0      	blx	r8
 800523e:	3001      	adds	r0, #1
 8005240:	d020      	beq.n	8005284 <_printf_common+0xa8>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	68e5      	ldr	r5, [r4, #12]
 8005246:	f003 0306 	and.w	r3, r3, #6
 800524a:	2b04      	cmp	r3, #4
 800524c:	bf18      	it	ne
 800524e:	2500      	movne	r5, #0
 8005250:	6832      	ldr	r2, [r6, #0]
 8005252:	f04f 0600 	mov.w	r6, #0
 8005256:	68a3      	ldr	r3, [r4, #8]
 8005258:	bf08      	it	eq
 800525a:	1aad      	subeq	r5, r5, r2
 800525c:	6922      	ldr	r2, [r4, #16]
 800525e:	bf08      	it	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	4293      	cmp	r3, r2
 8005266:	bfc4      	itt	gt
 8005268:	1a9b      	subgt	r3, r3, r2
 800526a:	18ed      	addgt	r5, r5, r3
 800526c:	341a      	adds	r4, #26
 800526e:	42b5      	cmp	r5, r6
 8005270:	d11a      	bne.n	80052a8 <_printf_common+0xcc>
 8005272:	2000      	movs	r0, #0
 8005274:	e008      	b.n	8005288 <_printf_common+0xac>
 8005276:	2301      	movs	r3, #1
 8005278:	4652      	mov	r2, sl
 800527a:	4649      	mov	r1, r9
 800527c:	4638      	mov	r0, r7
 800527e:	47c0      	blx	r8
 8005280:	3001      	adds	r0, #1
 8005282:	d103      	bne.n	800528c <_printf_common+0xb0>
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800528c:	3501      	adds	r5, #1
 800528e:	e7c4      	b.n	800521a <_printf_common+0x3e>
 8005290:	2030      	movs	r0, #48	; 0x30
 8005292:	18e1      	adds	r1, r4, r3
 8005294:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800529e:	4422      	add	r2, r4
 80052a0:	3302      	adds	r3, #2
 80052a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052a6:	e7c5      	b.n	8005234 <_printf_common+0x58>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4622      	mov	r2, r4
 80052ac:	4649      	mov	r1, r9
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c0      	blx	r8
 80052b2:	3001      	adds	r0, #1
 80052b4:	d0e6      	beq.n	8005284 <_printf_common+0xa8>
 80052b6:	3601      	adds	r6, #1
 80052b8:	e7d9      	b.n	800526e <_printf_common+0x92>
	...

080052bc <_printf_i>:
 80052bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c0:	460c      	mov	r4, r1
 80052c2:	7e27      	ldrb	r7, [r4, #24]
 80052c4:	4691      	mov	r9, r2
 80052c6:	2f78      	cmp	r7, #120	; 0x78
 80052c8:	4680      	mov	r8, r0
 80052ca:	469a      	mov	sl, r3
 80052cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d2:	d807      	bhi.n	80052e4 <_printf_i+0x28>
 80052d4:	2f62      	cmp	r7, #98	; 0x62
 80052d6:	d80a      	bhi.n	80052ee <_printf_i+0x32>
 80052d8:	2f00      	cmp	r7, #0
 80052da:	f000 80d9 	beq.w	8005490 <_printf_i+0x1d4>
 80052de:	2f58      	cmp	r7, #88	; 0x58
 80052e0:	f000 80a4 	beq.w	800542c <_printf_i+0x170>
 80052e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052ec:	e03a      	b.n	8005364 <_printf_i+0xa8>
 80052ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f2:	2b15      	cmp	r3, #21
 80052f4:	d8f6      	bhi.n	80052e4 <_printf_i+0x28>
 80052f6:	a001      	add	r0, pc, #4	; (adr r0, 80052fc <_printf_i+0x40>)
 80052f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052fc:	08005355 	.word	0x08005355
 8005300:	08005369 	.word	0x08005369
 8005304:	080052e5 	.word	0x080052e5
 8005308:	080052e5 	.word	0x080052e5
 800530c:	080052e5 	.word	0x080052e5
 8005310:	080052e5 	.word	0x080052e5
 8005314:	08005369 	.word	0x08005369
 8005318:	080052e5 	.word	0x080052e5
 800531c:	080052e5 	.word	0x080052e5
 8005320:	080052e5 	.word	0x080052e5
 8005324:	080052e5 	.word	0x080052e5
 8005328:	08005477 	.word	0x08005477
 800532c:	08005399 	.word	0x08005399
 8005330:	08005459 	.word	0x08005459
 8005334:	080052e5 	.word	0x080052e5
 8005338:	080052e5 	.word	0x080052e5
 800533c:	08005499 	.word	0x08005499
 8005340:	080052e5 	.word	0x080052e5
 8005344:	08005399 	.word	0x08005399
 8005348:	080052e5 	.word	0x080052e5
 800534c:	080052e5 	.word	0x080052e5
 8005350:	08005461 	.word	0x08005461
 8005354:	680b      	ldr	r3, [r1, #0]
 8005356:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	600a      	str	r2, [r1, #0]
 8005360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005364:	2301      	movs	r3, #1
 8005366:	e0a4      	b.n	80054b2 <_printf_i+0x1f6>
 8005368:	6825      	ldr	r5, [r4, #0]
 800536a:	6808      	ldr	r0, [r1, #0]
 800536c:	062e      	lsls	r6, r5, #24
 800536e:	f100 0304 	add.w	r3, r0, #4
 8005372:	d50a      	bpl.n	800538a <_printf_i+0xce>
 8005374:	6805      	ldr	r5, [r0, #0]
 8005376:	600b      	str	r3, [r1, #0]
 8005378:	2d00      	cmp	r5, #0
 800537a:	da03      	bge.n	8005384 <_printf_i+0xc8>
 800537c:	232d      	movs	r3, #45	; 0x2d
 800537e:	426d      	negs	r5, r5
 8005380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005384:	230a      	movs	r3, #10
 8005386:	485e      	ldr	r0, [pc, #376]	; (8005500 <_printf_i+0x244>)
 8005388:	e019      	b.n	80053be <_printf_i+0x102>
 800538a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800538e:	6805      	ldr	r5, [r0, #0]
 8005390:	600b      	str	r3, [r1, #0]
 8005392:	bf18      	it	ne
 8005394:	b22d      	sxthne	r5, r5
 8005396:	e7ef      	b.n	8005378 <_printf_i+0xbc>
 8005398:	680b      	ldr	r3, [r1, #0]
 800539a:	6825      	ldr	r5, [r4, #0]
 800539c:	1d18      	adds	r0, r3, #4
 800539e:	6008      	str	r0, [r1, #0]
 80053a0:	0628      	lsls	r0, r5, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xec>
 80053a4:	681d      	ldr	r5, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0xf2>
 80053a8:	0669      	lsls	r1, r5, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xe8>
 80053ac:	881d      	ldrh	r5, [r3, #0]
 80053ae:	2f6f      	cmp	r7, #111	; 0x6f
 80053b0:	bf0c      	ite	eq
 80053b2:	2308      	moveq	r3, #8
 80053b4:	230a      	movne	r3, #10
 80053b6:	4852      	ldr	r0, [pc, #328]	; (8005500 <_printf_i+0x244>)
 80053b8:	2100      	movs	r1, #0
 80053ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053be:	6866      	ldr	r6, [r4, #4]
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	bfa8      	it	ge
 80053c4:	6821      	ldrge	r1, [r4, #0]
 80053c6:	60a6      	str	r6, [r4, #8]
 80053c8:	bfa4      	itt	ge
 80053ca:	f021 0104 	bicge.w	r1, r1, #4
 80053ce:	6021      	strge	r1, [r4, #0]
 80053d0:	b90d      	cbnz	r5, 80053d6 <_printf_i+0x11a>
 80053d2:	2e00      	cmp	r6, #0
 80053d4:	d04d      	beq.n	8005472 <_printf_i+0x1b6>
 80053d6:	4616      	mov	r6, r2
 80053d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80053dc:	fb03 5711 	mls	r7, r3, r1, r5
 80053e0:	5dc7      	ldrb	r7, [r0, r7]
 80053e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053e6:	462f      	mov	r7, r5
 80053e8:	42bb      	cmp	r3, r7
 80053ea:	460d      	mov	r5, r1
 80053ec:	d9f4      	bls.n	80053d8 <_printf_i+0x11c>
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d10b      	bne.n	800540a <_printf_i+0x14e>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	07df      	lsls	r7, r3, #31
 80053f6:	d508      	bpl.n	800540a <_printf_i+0x14e>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	6861      	ldr	r1, [r4, #4]
 80053fc:	4299      	cmp	r1, r3
 80053fe:	bfde      	ittt	le
 8005400:	2330      	movle	r3, #48	; 0x30
 8005402:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005406:	f106 36ff 	addle.w	r6, r6, #4294967295
 800540a:	1b92      	subs	r2, r2, r6
 800540c:	6122      	str	r2, [r4, #16]
 800540e:	464b      	mov	r3, r9
 8005410:	4621      	mov	r1, r4
 8005412:	4640      	mov	r0, r8
 8005414:	f8cd a000 	str.w	sl, [sp]
 8005418:	aa03      	add	r2, sp, #12
 800541a:	f7ff fedf 	bl	80051dc <_printf_common>
 800541e:	3001      	adds	r0, #1
 8005420:	d14c      	bne.n	80054bc <_printf_i+0x200>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	b004      	add	sp, #16
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	4834      	ldr	r0, [pc, #208]	; (8005500 <_printf_i+0x244>)
 800542e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005432:	680e      	ldr	r6, [r1, #0]
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	f856 5b04 	ldr.w	r5, [r6], #4
 800543a:	061f      	lsls	r7, r3, #24
 800543c:	600e      	str	r6, [r1, #0]
 800543e:	d514      	bpl.n	800546a <_printf_i+0x1ae>
 8005440:	07d9      	lsls	r1, r3, #31
 8005442:	bf44      	itt	mi
 8005444:	f043 0320 	orrmi.w	r3, r3, #32
 8005448:	6023      	strmi	r3, [r4, #0]
 800544a:	b91d      	cbnz	r5, 8005454 <_printf_i+0x198>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	f023 0320 	bic.w	r3, r3, #32
 8005452:	6023      	str	r3, [r4, #0]
 8005454:	2310      	movs	r3, #16
 8005456:	e7af      	b.n	80053b8 <_printf_i+0xfc>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	f043 0320 	orr.w	r3, r3, #32
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	2378      	movs	r3, #120	; 0x78
 8005462:	4828      	ldr	r0, [pc, #160]	; (8005504 <_printf_i+0x248>)
 8005464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005468:	e7e3      	b.n	8005432 <_printf_i+0x176>
 800546a:	065e      	lsls	r6, r3, #25
 800546c:	bf48      	it	mi
 800546e:	b2ad      	uxthmi	r5, r5
 8005470:	e7e6      	b.n	8005440 <_printf_i+0x184>
 8005472:	4616      	mov	r6, r2
 8005474:	e7bb      	b.n	80053ee <_printf_i+0x132>
 8005476:	680b      	ldr	r3, [r1, #0]
 8005478:	6826      	ldr	r6, [r4, #0]
 800547a:	1d1d      	adds	r5, r3, #4
 800547c:	6960      	ldr	r0, [r4, #20]
 800547e:	600d      	str	r5, [r1, #0]
 8005480:	0635      	lsls	r5, r6, #24
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	d501      	bpl.n	800548a <_printf_i+0x1ce>
 8005486:	6018      	str	r0, [r3, #0]
 8005488:	e002      	b.n	8005490 <_printf_i+0x1d4>
 800548a:	0671      	lsls	r1, r6, #25
 800548c:	d5fb      	bpl.n	8005486 <_printf_i+0x1ca>
 800548e:	8018      	strh	r0, [r3, #0]
 8005490:	2300      	movs	r3, #0
 8005492:	4616      	mov	r6, r2
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	e7ba      	b.n	800540e <_printf_i+0x152>
 8005498:	680b      	ldr	r3, [r1, #0]
 800549a:	1d1a      	adds	r2, r3, #4
 800549c:	600a      	str	r2, [r1, #0]
 800549e:	681e      	ldr	r6, [r3, #0]
 80054a0:	2100      	movs	r1, #0
 80054a2:	4630      	mov	r0, r6
 80054a4:	6862      	ldr	r2, [r4, #4]
 80054a6:	f000 f82f 	bl	8005508 <memchr>
 80054aa:	b108      	cbz	r0, 80054b0 <_printf_i+0x1f4>
 80054ac:	1b80      	subs	r0, r0, r6
 80054ae:	6060      	str	r0, [r4, #4]
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	2300      	movs	r3, #0
 80054b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ba:	e7a8      	b.n	800540e <_printf_i+0x152>
 80054bc:	4632      	mov	r2, r6
 80054be:	4649      	mov	r1, r9
 80054c0:	4640      	mov	r0, r8
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	47d0      	blx	sl
 80054c6:	3001      	adds	r0, #1
 80054c8:	d0ab      	beq.n	8005422 <_printf_i+0x166>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	079b      	lsls	r3, r3, #30
 80054ce:	d413      	bmi.n	80054f8 <_printf_i+0x23c>
 80054d0:	68e0      	ldr	r0, [r4, #12]
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	4298      	cmp	r0, r3
 80054d6:	bfb8      	it	lt
 80054d8:	4618      	movlt	r0, r3
 80054da:	e7a4      	b.n	8005426 <_printf_i+0x16a>
 80054dc:	2301      	movs	r3, #1
 80054de:	4632      	mov	r2, r6
 80054e0:	4649      	mov	r1, r9
 80054e2:	4640      	mov	r0, r8
 80054e4:	47d0      	blx	sl
 80054e6:	3001      	adds	r0, #1
 80054e8:	d09b      	beq.n	8005422 <_printf_i+0x166>
 80054ea:	3501      	adds	r5, #1
 80054ec:	68e3      	ldr	r3, [r4, #12]
 80054ee:	9903      	ldr	r1, [sp, #12]
 80054f0:	1a5b      	subs	r3, r3, r1
 80054f2:	42ab      	cmp	r3, r5
 80054f4:	dcf2      	bgt.n	80054dc <_printf_i+0x220>
 80054f6:	e7eb      	b.n	80054d0 <_printf_i+0x214>
 80054f8:	2500      	movs	r5, #0
 80054fa:	f104 0619 	add.w	r6, r4, #25
 80054fe:	e7f5      	b.n	80054ec <_printf_i+0x230>
 8005500:	080057b5 	.word	0x080057b5
 8005504:	080057c6 	.word	0x080057c6

08005508 <memchr>:
 8005508:	4603      	mov	r3, r0
 800550a:	b510      	push	{r4, lr}
 800550c:	b2c9      	uxtb	r1, r1
 800550e:	4402      	add	r2, r0
 8005510:	4293      	cmp	r3, r2
 8005512:	4618      	mov	r0, r3
 8005514:	d101      	bne.n	800551a <memchr+0x12>
 8005516:	2000      	movs	r0, #0
 8005518:	e003      	b.n	8005522 <memchr+0x1a>
 800551a:	7804      	ldrb	r4, [r0, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	428c      	cmp	r4, r1
 8005520:	d1f6      	bne.n	8005510 <memchr+0x8>
 8005522:	bd10      	pop	{r4, pc}

08005524 <memcpy>:
 8005524:	440a      	add	r2, r1
 8005526:	4291      	cmp	r1, r2
 8005528:	f100 33ff 	add.w	r3, r0, #4294967295
 800552c:	d100      	bne.n	8005530 <memcpy+0xc>
 800552e:	4770      	bx	lr
 8005530:	b510      	push	{r4, lr}
 8005532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005536:	4291      	cmp	r1, r2
 8005538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800553c:	d1f9      	bne.n	8005532 <memcpy+0xe>
 800553e:	bd10      	pop	{r4, pc}

08005540 <memmove>:
 8005540:	4288      	cmp	r0, r1
 8005542:	b510      	push	{r4, lr}
 8005544:	eb01 0402 	add.w	r4, r1, r2
 8005548:	d902      	bls.n	8005550 <memmove+0x10>
 800554a:	4284      	cmp	r4, r0
 800554c:	4623      	mov	r3, r4
 800554e:	d807      	bhi.n	8005560 <memmove+0x20>
 8005550:	1e43      	subs	r3, r0, #1
 8005552:	42a1      	cmp	r1, r4
 8005554:	d008      	beq.n	8005568 <memmove+0x28>
 8005556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0x12>
 8005560:	4601      	mov	r1, r0
 8005562:	4402      	add	r2, r0
 8005564:	428a      	cmp	r2, r1
 8005566:	d100      	bne.n	800556a <memmove+0x2a>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800556e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005572:	e7f7      	b.n	8005564 <memmove+0x24>

08005574 <_free_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4605      	mov	r5, r0
 8005578:	2900      	cmp	r1, #0
 800557a:	d043      	beq.n	8005604 <_free_r+0x90>
 800557c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005580:	1f0c      	subs	r4, r1, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	bfb8      	it	lt
 8005586:	18e4      	addlt	r4, r4, r3
 8005588:	f000 f8d0 	bl	800572c <__malloc_lock>
 800558c:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <_free_r+0x94>)
 800558e:	6813      	ldr	r3, [r2, #0]
 8005590:	4610      	mov	r0, r2
 8005592:	b933      	cbnz	r3, 80055a2 <_free_r+0x2e>
 8005594:	6063      	str	r3, [r4, #4]
 8005596:	6014      	str	r4, [r2, #0]
 8005598:	4628      	mov	r0, r5
 800559a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800559e:	f000 b8cb 	b.w	8005738 <__malloc_unlock>
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	d90a      	bls.n	80055bc <_free_r+0x48>
 80055a6:	6821      	ldr	r1, [r4, #0]
 80055a8:	1862      	adds	r2, r4, r1
 80055aa:	4293      	cmp	r3, r2
 80055ac:	bf01      	itttt	eq
 80055ae:	681a      	ldreq	r2, [r3, #0]
 80055b0:	685b      	ldreq	r3, [r3, #4]
 80055b2:	1852      	addeq	r2, r2, r1
 80055b4:	6022      	streq	r2, [r4, #0]
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	6004      	str	r4, [r0, #0]
 80055ba:	e7ed      	b.n	8005598 <_free_r+0x24>
 80055bc:	461a      	mov	r2, r3
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	b10b      	cbz	r3, 80055c6 <_free_r+0x52>
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	d9fa      	bls.n	80055bc <_free_r+0x48>
 80055c6:	6811      	ldr	r1, [r2, #0]
 80055c8:	1850      	adds	r0, r2, r1
 80055ca:	42a0      	cmp	r0, r4
 80055cc:	d10b      	bne.n	80055e6 <_free_r+0x72>
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	4401      	add	r1, r0
 80055d2:	1850      	adds	r0, r2, r1
 80055d4:	4283      	cmp	r3, r0
 80055d6:	6011      	str	r1, [r2, #0]
 80055d8:	d1de      	bne.n	8005598 <_free_r+0x24>
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4401      	add	r1, r0
 80055e0:	6011      	str	r1, [r2, #0]
 80055e2:	6053      	str	r3, [r2, #4]
 80055e4:	e7d8      	b.n	8005598 <_free_r+0x24>
 80055e6:	d902      	bls.n	80055ee <_free_r+0x7a>
 80055e8:	230c      	movs	r3, #12
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	e7d4      	b.n	8005598 <_free_r+0x24>
 80055ee:	6820      	ldr	r0, [r4, #0]
 80055f0:	1821      	adds	r1, r4, r0
 80055f2:	428b      	cmp	r3, r1
 80055f4:	bf01      	itttt	eq
 80055f6:	6819      	ldreq	r1, [r3, #0]
 80055f8:	685b      	ldreq	r3, [r3, #4]
 80055fa:	1809      	addeq	r1, r1, r0
 80055fc:	6021      	streq	r1, [r4, #0]
 80055fe:	6063      	str	r3, [r4, #4]
 8005600:	6054      	str	r4, [r2, #4]
 8005602:	e7c9      	b.n	8005598 <_free_r+0x24>
 8005604:	bd38      	pop	{r3, r4, r5, pc}
 8005606:	bf00      	nop
 8005608:	20000154 	.word	0x20000154

0800560c <_malloc_r>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	1ccd      	adds	r5, r1, #3
 8005610:	f025 0503 	bic.w	r5, r5, #3
 8005614:	3508      	adds	r5, #8
 8005616:	2d0c      	cmp	r5, #12
 8005618:	bf38      	it	cc
 800561a:	250c      	movcc	r5, #12
 800561c:	2d00      	cmp	r5, #0
 800561e:	4606      	mov	r6, r0
 8005620:	db01      	blt.n	8005626 <_malloc_r+0x1a>
 8005622:	42a9      	cmp	r1, r5
 8005624:	d903      	bls.n	800562e <_malloc_r+0x22>
 8005626:	230c      	movs	r3, #12
 8005628:	6033      	str	r3, [r6, #0]
 800562a:	2000      	movs	r0, #0
 800562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800562e:	f000 f87d 	bl	800572c <__malloc_lock>
 8005632:	4921      	ldr	r1, [pc, #132]	; (80056b8 <_malloc_r+0xac>)
 8005634:	680a      	ldr	r2, [r1, #0]
 8005636:	4614      	mov	r4, r2
 8005638:	b99c      	cbnz	r4, 8005662 <_malloc_r+0x56>
 800563a:	4f20      	ldr	r7, [pc, #128]	; (80056bc <_malloc_r+0xb0>)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	b923      	cbnz	r3, 800564a <_malloc_r+0x3e>
 8005640:	4621      	mov	r1, r4
 8005642:	4630      	mov	r0, r6
 8005644:	f000 f862 	bl	800570c <_sbrk_r>
 8005648:	6038      	str	r0, [r7, #0]
 800564a:	4629      	mov	r1, r5
 800564c:	4630      	mov	r0, r6
 800564e:	f000 f85d 	bl	800570c <_sbrk_r>
 8005652:	1c43      	adds	r3, r0, #1
 8005654:	d123      	bne.n	800569e <_malloc_r+0x92>
 8005656:	230c      	movs	r3, #12
 8005658:	4630      	mov	r0, r6
 800565a:	6033      	str	r3, [r6, #0]
 800565c:	f000 f86c 	bl	8005738 <__malloc_unlock>
 8005660:	e7e3      	b.n	800562a <_malloc_r+0x1e>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	1b5b      	subs	r3, r3, r5
 8005666:	d417      	bmi.n	8005698 <_malloc_r+0x8c>
 8005668:	2b0b      	cmp	r3, #11
 800566a:	d903      	bls.n	8005674 <_malloc_r+0x68>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	441c      	add	r4, r3
 8005670:	6025      	str	r5, [r4, #0]
 8005672:	e004      	b.n	800567e <_malloc_r+0x72>
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	42a2      	cmp	r2, r4
 8005678:	bf0c      	ite	eq
 800567a:	600b      	streq	r3, [r1, #0]
 800567c:	6053      	strne	r3, [r2, #4]
 800567e:	4630      	mov	r0, r6
 8005680:	f000 f85a 	bl	8005738 <__malloc_unlock>
 8005684:	f104 000b 	add.w	r0, r4, #11
 8005688:	1d23      	adds	r3, r4, #4
 800568a:	f020 0007 	bic.w	r0, r0, #7
 800568e:	1ac2      	subs	r2, r0, r3
 8005690:	d0cc      	beq.n	800562c <_malloc_r+0x20>
 8005692:	1a1b      	subs	r3, r3, r0
 8005694:	50a3      	str	r3, [r4, r2]
 8005696:	e7c9      	b.n	800562c <_malloc_r+0x20>
 8005698:	4622      	mov	r2, r4
 800569a:	6864      	ldr	r4, [r4, #4]
 800569c:	e7cc      	b.n	8005638 <_malloc_r+0x2c>
 800569e:	1cc4      	adds	r4, r0, #3
 80056a0:	f024 0403 	bic.w	r4, r4, #3
 80056a4:	42a0      	cmp	r0, r4
 80056a6:	d0e3      	beq.n	8005670 <_malloc_r+0x64>
 80056a8:	1a21      	subs	r1, r4, r0
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 f82e 	bl	800570c <_sbrk_r>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d1dd      	bne.n	8005670 <_malloc_r+0x64>
 80056b4:	e7cf      	b.n	8005656 <_malloc_r+0x4a>
 80056b6:	bf00      	nop
 80056b8:	20000154 	.word	0x20000154
 80056bc:	20000158 	.word	0x20000158

080056c0 <_realloc_r>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	4607      	mov	r7, r0
 80056c4:	4614      	mov	r4, r2
 80056c6:	460e      	mov	r6, r1
 80056c8:	b921      	cbnz	r1, 80056d4 <_realloc_r+0x14>
 80056ca:	4611      	mov	r1, r2
 80056cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056d0:	f7ff bf9c 	b.w	800560c <_malloc_r>
 80056d4:	b922      	cbnz	r2, 80056e0 <_realloc_r+0x20>
 80056d6:	f7ff ff4d 	bl	8005574 <_free_r>
 80056da:	4625      	mov	r5, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e0:	f000 f830 	bl	8005744 <_malloc_usable_size_r>
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d20f      	bcs.n	8005708 <_realloc_r+0x48>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4638      	mov	r0, r7
 80056ec:	f7ff ff8e 	bl	800560c <_malloc_r>
 80056f0:	4605      	mov	r5, r0
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0f2      	beq.n	80056dc <_realloc_r+0x1c>
 80056f6:	4631      	mov	r1, r6
 80056f8:	4622      	mov	r2, r4
 80056fa:	f7ff ff13 	bl	8005524 <memcpy>
 80056fe:	4631      	mov	r1, r6
 8005700:	4638      	mov	r0, r7
 8005702:	f7ff ff37 	bl	8005574 <_free_r>
 8005706:	e7e9      	b.n	80056dc <_realloc_r+0x1c>
 8005708:	4635      	mov	r5, r6
 800570a:	e7e7      	b.n	80056dc <_realloc_r+0x1c>

0800570c <_sbrk_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	2300      	movs	r3, #0
 8005710:	4d05      	ldr	r5, [pc, #20]	; (8005728 <_sbrk_r+0x1c>)
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fc fd38 	bl	800218c <_sbrk>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_sbrk_r+0x1a>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_sbrk_r+0x1a>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	20000414 	.word	0x20000414

0800572c <__malloc_lock>:
 800572c:	4801      	ldr	r0, [pc, #4]	; (8005734 <__malloc_lock+0x8>)
 800572e:	f000 b811 	b.w	8005754 <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	2000041c 	.word	0x2000041c

08005738 <__malloc_unlock>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__malloc_unlock+0x8>)
 800573a:	f000 b80c 	b.w	8005756 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	2000041c 	.word	0x2000041c

08005744 <_malloc_usable_size_r>:
 8005744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005748:	1f18      	subs	r0, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	bfbc      	itt	lt
 800574e:	580b      	ldrlt	r3, [r1, r0]
 8005750:	18c0      	addlt	r0, r0, r3
 8005752:	4770      	bx	lr

08005754 <__retarget_lock_acquire_recursive>:
 8005754:	4770      	bx	lr

08005756 <__retarget_lock_release_recursive>:
 8005756:	4770      	bx	lr

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
