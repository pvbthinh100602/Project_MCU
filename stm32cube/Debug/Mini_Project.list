
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08005760  08005760  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005760  08005760  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000098  08005800  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005800  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e7d  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a8  00000000  00000000  00037f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0003afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0003be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8c  00000000  00000000  0003caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127d5  00000000  00000000  00056884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3d1  00000000  00000000  00069059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f442a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000f4480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080056e0 	.word	0x080056e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080056e0 	.word	0x080056e0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <isButtonPressed+0x30>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <isButtonPressed+0x30>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2100      	movs	r1, #0
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <isButtonPressed+0x24>
	}
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000104 	.word	0x20000104

0800096c <button_process>:

void button_process(int index){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db07      	blt.n	800098a <button_process+0x1e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b03      	cmp	r3, #3
 800097e:	dc04      	bgt.n	800098a <button_process+0x1e>
		button_flag[index] = 1;
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <button_process+0x28>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000104 	.word	0x20000104

08000998 <button_reading>:

void button_reading(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e0e5      	b.n	8000b70 <button_reading+0x1d8>
        //debouncing button
		debounce_buffer3[i] = debounce_buffer2[i];
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4976      	ldr	r1, [pc, #472]	; (8000b84 <button_reading+0x1ec>)
 80009aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ae:	4976      	ldr	r1, [pc, #472]	; (8000b88 <button_reading+0x1f0>)
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4974      	ldr	r1, [pc, #464]	; (8000b8c <button_reading+0x1f4>)
 80009ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009be:	4971      	ldr	r1, [pc, #452]	; (8000b84 <button_reading+0x1ec>)
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// readpin
		//...

		if(i == 0) debounce_buffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10b      	bne.n	80009e2 <button_reading+0x4a>
 80009ca:	2101      	movs	r1, #1
 80009cc:	4870      	ldr	r0, [pc, #448]	; (8000b90 <button_reading+0x1f8>)
 80009ce:	f002 fa1b 	bl	8002e08 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4611      	mov	r1, r2
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <button_reading+0x1f4>)
 80009dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009e0:	e02b      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 1) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <button_reading+0x68>
 80009e8:	2102      	movs	r1, #2
 80009ea:	4869      	ldr	r0, [pc, #420]	; (8000b90 <button_reading+0x1f8>)
 80009ec:	f002 fa0c 	bl	8002e08 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a64      	ldr	r2, [pc, #400]	; (8000b8c <button_reading+0x1f4>)
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fe:	e01c      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 2) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d10b      	bne.n	8000a1e <button_reading+0x86>
 8000a06:	2110      	movs	r1, #16
 8000a08:	4861      	ldr	r0, [pc, #388]	; (8000b90 <button_reading+0x1f8>)
 8000a0a:	f002 f9fd 	bl	8002e08 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <button_reading+0x1f4>)
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1c:	e00d      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 3) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d10a      	bne.n	8000a3a <button_reading+0xa2>
 8000a24:	2101      	movs	r1, #1
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <button_reading+0x1fc>)
 8000a28:	f002 f9ee 	bl	8002e08 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <button_reading+0x1f4>)
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


        //process after debouncing
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <button_reading+0x1f0>)
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	494f      	ldr	r1, [pc, #316]	; (8000b84 <button_reading+0x1ec>)
 8000a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f040 8084 	bne.w	8000b58 <button_reading+0x1c0>
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <button_reading+0x1ec>)
 8000a54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	494c      	ldr	r1, [pc, #304]	; (8000b8c <button_reading+0x1f4>)
 8000a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d179      	bne.n	8000b58 <button_reading+0x1c0>
			button_buffer[i] = debounce_buffer3[i];
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4947      	ldr	r1, [pc, #284]	; (8000b88 <button_reading+0x1f0>)
 8000a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a6e:	494a      	ldr	r1, [pc, #296]	; (8000b98 <button_reading+0x200>)
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// fsm for processing button
			switch(button_state[i]){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <button_reading+0x204>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	2b0d      	cmp	r3, #13
 8000a7e:	d043      	beq.n	8000b08 <button_reading+0x170>
 8000a80:	2b0d      	cmp	r3, #13
 8000a82:	dc6b      	bgt.n	8000b5c <button_reading+0x1c4>
 8000a84:	2b0b      	cmp	r3, #11
 8000a86:	d002      	beq.n	8000a8e <button_reading+0xf6>
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d02d      	beq.n	8000ae8 <button_reading+0x150>
					button_state[i] = BUTTON_IS_RELEASED;
					counter_for_button_pressed[i] = 0;
				}
				break;
			default:
				break;
 8000a8c:	e066      	b.n	8000b5c <button_reading+0x1c4>
				counter_for_button_pressed[i]++;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a43      	ldr	r2, [pc, #268]	; (8000ba0 <button_reading+0x208>)
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	3201      	adds	r2, #1
 8000a98:	4941      	ldr	r1, [pc, #260]	; (8000ba0 <button_reading+0x208>)
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == WAITING_TIME/TIMER_CYCLE){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <button_reading+0x208>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d10d      	bne.n	8000ac6 <button_reading+0x12e>
					button_state[i] = BUTTON_IS_LONG_PRESSED;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <button_reading+0x204>)
 8000aae:	210d      	movs	r1, #13
 8000ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <button_reading+0x208>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff53 	bl	800096c <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <button_reading+0x200>)
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d146      	bne.n	8000b60 <button_reading+0x1c8>
					button_state[i] = BUTTON_IS_RELEASED;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <button_reading+0x204>)
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <button_reading+0x208>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ae6:	e03b      	b.n	8000b60 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <button_reading+0x200>)
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d137      	bne.n	8000b64 <button_reading+0x1cc>
					button_state[i] = BUTTON_IS_PRESSED;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <button_reading+0x204>)
 8000af8:	210b      	movs	r1, #11
 8000afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff33 	bl	800096c <button_process>
				break;
 8000b06:	e02d      	b.n	8000b64 <button_reading+0x1cc>
				counter_for_button_pressed[i]++;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <button_reading+0x208>)
 8000b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b10:	3201      	adds	r2, #1
 8000b12:	4923      	ldr	r1, [pc, #140]	; (8000ba0 <button_reading+0x208>)
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <button_reading+0x208>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2b14      	cmp	r3, #20
 8000b22:	d108      	bne.n	8000b36 <button_reading+0x19e>
					button_process(i);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff20 	bl	800096c <button_process>
					counter_for_button_pressed[i] = 0;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <button_reading+0x208>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <button_reading+0x200>)
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d112      	bne.n	8000b68 <button_reading+0x1d0>
					button_state[i] = BUTTON_IS_RELEASED;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <button_reading+0x204>)
 8000b46:	210c      	movs	r1, #12
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <button_reading+0x208>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000b56:	e007      	b.n	8000b68 <button_reading+0x1d0>
			}
		}
 8000b58:	bf00      	nop
 8000b5a:	e006      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b5c:	bf00      	nop
 8000b5e:	e004      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b60:	bf00      	nop
 8000b62:	e002      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b68:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f67f af16 	bls.w	80009a4 <button_reading+0xc>
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000d4 	.word	0x200000d4
 8000b88:	200000e4 	.word	0x200000e4
 8000b8c:	200000c4 	.word	0x200000c4
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	200000b4 	.word	0x200000b4
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200000f4 	.word	0x200000f4

08000ba4 <fsm_auto_run>:
 *      Author: phamv
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	switch (status)
 8000ba8:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <fsm_auto_run+0x234>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	f200 810f 	bhi.w	8000dd2 <fsm_auto_run+0x22e>
 8000bb4:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <fsm_auto_run+0x18>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000bf5 	.word	0x08000bf5
 8000bc4:	08000c65 	.word	0x08000c65
 8000bc8:	08000cdd 	.word	0x08000cdd
 8000bcc:	08000d4f 	.word	0x08000d4f
	{
	case INIT:
		status=AUTO_RED_GREEN;
 8000bd0:	4b81      	ldr	r3, [pc, #516]	; (8000dd8 <fsm_auto_run+0x234>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f001 fad7 	bl	800218c <setTimer1>
		counter = max_red1;
 8000bde:	4b7f      	ldr	r3, [pc, #508]	; (8000ddc <fsm_auto_run+0x238>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a7f      	ldr	r2, [pc, #508]	; (8000de0 <fsm_auto_run+0x23c>)
 8000be4:	6013      	str	r3, [r2, #0]
		displayCounter();
 8000be6:	f001 fd17 	bl	8002618 <displayCounter>
		setTraffic1Red();
 8000bea:	f001 fb53 	bl	8002294 <setTraffic1Red>
		setTraffic2Green();
 8000bee:	f001 fb9d 	bl	800232c <setTraffic2Green>
		break;
 8000bf2:	e0ee      	b.n	8000dd2 <fsm_auto_run+0x22e>
	case AUTO_RED_GREEN:
		if(timer1_flag == 1){
 8000bf4:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <fsm_auto_run+0x240>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d115      	bne.n	8000c28 <fsm_auto_run+0x84>
			counter--;
 8000bfc:	4b78      	ldr	r3, [pc, #480]	; (8000de0 <fsm_auto_run+0x23c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	4a77      	ldr	r2, [pc, #476]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c04:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 fabf 	bl	800218c <setTimer1>
			if(counter == max_yellow2){
 8000c0e:	4b74      	ldr	r3, [pc, #464]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b75      	ldr	r3, [pc, #468]	; (8000de8 <fsm_auto_run+0x244>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d104      	bne.n	8000c24 <fsm_auto_run+0x80>
				setTraffic2Yellow();
 8000c1a:	f001 fbab 	bl	8002374 <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 8000c1e:	4b6e      	ldr	r3, [pc, #440]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c24:	f001 fcf8 	bl	8002618 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fe85 	bl	8000938 <isButtonPressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80c7 	beq.w	8000dc4 <fsm_auto_run+0x220>
			isButtonPressed(2);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f7ff fe7e 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fe7b 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000c42:	4b65      	ldr	r3, [pc, #404]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c44:	220b      	movs	r2, #11
 8000c46:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000c48:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000c4c:	f001 fa9e 	bl	800218c <setTimer1>
			setTraffic1Red();
 8000c50:	f001 fb20 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 8000c54:	f001 fb6a 	bl	800232c <setTraffic2Green>
			counter = 99;
 8000c58:	4b61      	ldr	r3, [pc, #388]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000c5e:	f001 fcdb 	bl	8002618 <displayCounter>
			break;
 8000c62:	e0b6      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
	case AUTO_RED_YELLOW:
		if(timer1_flag == 1){
 8000c64:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <fsm_auto_run+0x240>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d119      	bne.n	8000ca0 <fsm_auto_run+0xfc>
			counter--;
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a5b      	ldr	r2, [pc, #364]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c74:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f001 fa87 	bl	800218c <setTimer1>
			if(counter == 0){
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10a      	bne.n	8000c9c <fsm_auto_run+0xf8>
				counter = max_green1;
 8000c86:	4b59      	ldr	r3, [pc, #356]	; (8000dec <fsm_auto_run+0x248>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a55      	ldr	r2, [pc, #340]	; (8000de0 <fsm_auto_run+0x23c>)
 8000c8c:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 8000c8e:	f001 fb25 	bl	80022dc <setTraffic1Green>
				setTraffic2Red();
 8000c92:	f001 fb13 	bl	80022bc <setTraffic2Red>
				status=AUTO_GREEN_RED;
 8000c96:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <fsm_auto_run+0x234>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c9c:	f001 fcbc 	bl	8002618 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fe49 	bl	8000938 <isButtonPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 808d 	beq.w	8000dc8 <fsm_auto_run+0x224>
			isButtonPressed(2);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fe42 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f7ff fe3f 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <fsm_auto_run+0x234>)
 8000cbc:	220b      	movs	r2, #11
 8000cbe:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000cc0:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000cc4:	f001 fa62 	bl	800218c <setTimer1>
			setTraffic1Red();
 8000cc8:	f001 fae4 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 8000ccc:	f001 fb2e 	bl	800232c <setTraffic2Green>
			counter = 99;
 8000cd0:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cd2:	2263      	movs	r2, #99	; 0x63
 8000cd4:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000cd6:	f001 fc9f 	bl	8002618 <displayCounter>
			break;
 8000cda:	e07a      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_GREEN_RED:
		if(timer1_flag == 1){
 8000cdc:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <fsm_auto_run+0x240>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d117      	bne.n	8000d14 <fsm_auto_run+0x170>
			counter--;
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <fsm_auto_run+0x23c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cec:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f001 fa4b 	bl	800218c <setTimer1>
			if(counter == 0){
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <fsm_auto_run+0x23c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d108      	bne.n	8000d10 <fsm_auto_run+0x16c>
				counter = max_yellow1;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <fsm_auto_run+0x24c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d04:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 8000d06:	f001 fb21 	bl	800234c <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d10:	f001 fc82 	bl	8002618 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fe0f 	bl	8000938 <isButtonPressed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d055      	beq.n	8000dcc <fsm_auto_run+0x228>
			isButtonPressed(2);
 8000d20:	2002      	movs	r0, #2
 8000d22:	f7ff fe09 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f7ff fe06 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d2e:	220b      	movs	r2, #11
 8000d30:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000d32:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000d36:	f001 fa29 	bl	800218c <setTimer1>
			setTraffic1Red();
 8000d3a:	f001 faab 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 8000d3e:	f001 faf5 	bl	800232c <setTraffic2Green>
			counter = 99;
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d44:	2263      	movs	r2, #99	; 0x63
 8000d46:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000d48:	f001 fc66 	bl	8002618 <displayCounter>
			break;
 8000d4c:	e041      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;

	case AUTO_YELLOW_RED:

		if(timer1_flag == 1){
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <fsm_auto_run+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d119      	bne.n	8000d8a <fsm_auto_run+0x1e6>
			counter--;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d5e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f001 fa12 	bl	800218c <setTimer1>
			if(counter == 0){
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10a      	bne.n	8000d86 <fsm_auto_run+0x1e2>
				counter = max_red1;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <fsm_auto_run+0x238>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <fsm_auto_run+0x23c>)
 8000d76:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 8000d78:	f001 fa8c 	bl	8002294 <setTraffic1Red>
				setTraffic2Green();
 8000d7c:	f001 fad6 	bl	800232c <setTraffic2Green>
				status=AUTO_RED_GREEN;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <fsm_auto_run+0x234>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d86:	f001 fc47 	bl	8002618 <displayCounter>
		}

		if(isButtonPressed(1)==1){
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fdd4 	bl	8000938 <isButtonPressed>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11c      	bne.n	8000dd0 <fsm_auto_run+0x22c>
			isButtonPressed(2);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff fdce 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fdcb 	bl	8000938 <isButtonPressed>
			status=MAN_RED_GREEN;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <fsm_auto_run+0x234>)
 8000da4:	220b      	movs	r2, #11
 8000da6:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000da8:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000dac:	f001 f9ee 	bl	800218c <setTimer1>
			setTraffic1Red();
 8000db0:	f001 fa70 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 8000db4:	f001 faba 	bl	800232c <setTraffic2Green>
			counter = 99;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <fsm_auto_run+0x23c>)
 8000dba:	2263      	movs	r2, #99	; 0x63
 8000dbc:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000dbe:	f001 fc2b 	bl	8002618 <displayCounter>
			break;
 8000dc2:	e006      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc4:	bf00      	nop
 8000dc6:	e004      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dc8:	bf00      	nop
 8000dca:	e002      	b.n	8000dd2 <fsm_auto_run+0x22e>
		break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <fsm_auto_run+0x22e>
		}
		break;
 8000dd0:	bf00      	nop
	}

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000118 	.word	0x20000118
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	20000120 	.word	0x20000120
 8000de4:	2000013c 	.word	0x2000013c
 8000de8:	20000024 	.word	0x20000024
 8000dec:	20000014 	.word	0x20000014
 8000df0:	20000018 	.word	0x20000018

08000df4 <fsm_manual_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	switch (status) {
 8000df8:	4b99      	ldr	r3, [pc, #612]	; (8001060 <fsm_manual_run+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b0b      	subs	r3, #11
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f200 8122 	bhi.w	8001048 <fsm_manual_run+0x254>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <fsm_manual_run+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000ea9 	.word	0x08000ea9
 8000e14:	08000f35 	.word	0x08000f35
 8000e18:	08000fbf 	.word	0x08000fbf
		case MAN_RED_GREEN:
			isButtonPressed(3);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff fd8b 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000e22:	4b90      	ldr	r3, [pc, #576]	; (8001064 <fsm_manual_run+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d010      	beq.n	8000e4c <fsm_manual_run+0x58>
				status = AUTO_RED_YELLOW;
 8000e2a:	4b8d      	ldr	r3, [pc, #564]	; (8001060 <fsm_manual_run+0x26c>)
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f001 f9aa 	bl	800218c <setTimer1>
				counter = max_yellow2;
 8000e38:	4b8b      	ldr	r3, [pc, #556]	; (8001068 <fsm_manual_run+0x274>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a8b      	ldr	r2, [pc, #556]	; (800106c <fsm_manual_run+0x278>)
 8000e3e:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e40:	f001 fbea 	bl	8002618 <displayCounter>
				setTraffic1Red();
 8000e44:	f001 fa26 	bl	8002294 <setTraffic1Red>
				setTraffic2Yellow();
 8000e48:	f001 fa94 	bl	8002374 <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fd73 	bl	8000938 <isButtonPressed>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d014      	beq.n	8000e82 <fsm_manual_run+0x8e>
				isButtonPressed(2);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fd6d 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000e5e:	4b80      	ldr	r3, [pc, #512]	; (8001060 <fsm_manual_run+0x26c>)
 8000e60:	2215      	movs	r2, #21
 8000e62:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f001 f990 	bl	800218c <setTimer1>
				counter = max_red1;
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <fsm_manual_run+0x27c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a7e      	ldr	r2, [pc, #504]	; (800106c <fsm_manual_run+0x278>)
 8000e72:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e74:	f001 fbd0 	bl	8002618 <displayCounter>
				clearTraffic1();
 8000e78:	f001 fa44 	bl	8002304 <clearTraffic1>
				clearTraffic2();
 8000e7c:	f001 fa8a 	bl	8002394 <clearTraffic2>
				break;
 8000e80:	e0eb      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff fd58 	bl	8000938 <isButtonPressed>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80de 	beq.w	800104c <fsm_manual_run+0x258>
				status = MAN_RED_YELLOW;
 8000e90:	4b73      	ldr	r3, [pc, #460]	; (8001060 <fsm_manual_run+0x26c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000e96:	f001 f9fd 	bl	8002294 <setTraffic1Red>
				setTraffic2Yellow();
 8000e9a:	f001 fa6b 	bl	8002374 <setTraffic2Yellow>
				setTimer1(60000);
 8000e9e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000ea2:	f001 f973 	bl	800218c <setTimer1>
			}
			break;
 8000ea6:	e0d1      	b.n	800104c <fsm_manual_run+0x258>

		case MAN_RED_YELLOW:
			if(isButtonPressed(3));
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff fd45 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000eae:	4b6d      	ldr	r3, [pc, #436]	; (8001064 <fsm_manual_run+0x270>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d010      	beq.n	8000ed8 <fsm_manual_run+0xe4>
				status = AUTO_GREEN_RED;
 8000eb6:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <fsm_manual_run+0x26c>)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec0:	f001 f964 	bl	800218c <setTimer1>
				counter = max_green1;
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <fsm_manual_run+0x280>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a68      	ldr	r2, [pc, #416]	; (800106c <fsm_manual_run+0x278>)
 8000eca:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000ecc:	f001 fba4 	bl	8002618 <displayCounter>
				setTraffic1Green();
 8000ed0:	f001 fa04 	bl	80022dc <setTraffic1Green>
				setTraffic2Red();
 8000ed4:	f001 f9f2 	bl	80022bc <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fd2d 	bl	8000938 <isButtonPressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <fsm_manual_run+0x11a>
				isButtonPressed(2);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f7ff fd27 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <fsm_manual_run+0x26c>)
 8000eec:	2215      	movs	r2, #21
 8000eee:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f001 f94a 	bl	800218c <setTimer1>
				counter = max_red1;
 8000ef8:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <fsm_manual_run+0x27c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a5b      	ldr	r2, [pc, #364]	; (800106c <fsm_manual_run+0x278>)
 8000efe:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f00:	f001 fb8a 	bl	8002618 <displayCounter>
				clearTraffic1();
 8000f04:	f001 f9fe 	bl	8002304 <clearTraffic1>
				clearTraffic2();
 8000f08:	f001 fa44 	bl	8002394 <clearTraffic2>
				break;
 8000f0c:	e0a5      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fd12 	bl	8000938 <isButtonPressed>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 809a 	beq.w	8001050 <fsm_manual_run+0x25c>
				status = MAN_GREEN_RED;
 8000f1c:	4b50      	ldr	r3, [pc, #320]	; (8001060 <fsm_manual_run+0x26c>)
 8000f1e:	220d      	movs	r2, #13
 8000f20:	601a      	str	r2, [r3, #0]
				setTraffic1Green();
 8000f22:	f001 f9db 	bl	80022dc <setTraffic1Green>
				setTraffic2Red();
 8000f26:	f001 f9c9 	bl	80022bc <setTraffic2Red>
				setTimer1(60000);
 8000f2a:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000f2e:	f001 f92d 	bl	800218c <setTimer1>
			}
			break;
 8000f32:	e08d      	b.n	8001050 <fsm_manual_run+0x25c>

		case MAN_GREEN_RED:
			isButtonPressed(3);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f7ff fcff 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <fsm_manual_run+0x270>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d010      	beq.n	8000f64 <fsm_manual_run+0x170>
				status = AUTO_YELLOW_RED;
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <fsm_manual_run+0x26c>)
 8000f44:	2205      	movs	r2, #5
 8000f46:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f001 f91e 	bl	800218c <setTimer1>
				counter = max_yellow1;
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <fsm_manual_run+0x284>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <fsm_manual_run+0x278>)
 8000f56:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f58:	f001 fb5e 	bl	8002618 <displayCounter>
				setTraffic1Yellow();
 8000f5c:	f001 f9f6 	bl	800234c <setTraffic1Yellow>
				setTraffic2Red();
 8000f60:	f001 f9ac 	bl	80022bc <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fce7 	bl	8000938 <isButtonPressed>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d014      	beq.n	8000f9a <fsm_manual_run+0x1a6>
				isButtonPressed(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f7ff fce1 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <fsm_manual_run+0x26c>)
 8000f78:	2215      	movs	r2, #21
 8000f7a:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f001 f904 	bl	800218c <setTimer1>
				counter = max_red1;
 8000f84:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <fsm_manual_run+0x27c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a38      	ldr	r2, [pc, #224]	; (800106c <fsm_manual_run+0x278>)
 8000f8a:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f8c:	f001 fb44 	bl	8002618 <displayCounter>
				clearTraffic1();
 8000f90:	f001 f9b8 	bl	8002304 <clearTraffic1>
				clearTraffic2();
 8000f94:	f001 f9fe 	bl	8002394 <clearTraffic2>
				break;
 8000f98:	e05f      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fccc 	bl	8000938 <isButtonPressed>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d056      	beq.n	8001054 <fsm_manual_run+0x260>
				status = MAN_YELLOW_RED;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <fsm_manual_run+0x26c>)
 8000fa8:	220e      	movs	r2, #14
 8000faa:	601a      	str	r2, [r3, #0]
				setTraffic1Yellow();
 8000fac:	f001 f9ce 	bl	800234c <setTraffic1Yellow>
				setTraffic2Red();
 8000fb0:	f001 f984 	bl	80022bc <setTraffic2Red>
				setTimer1(60000);
 8000fb4:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000fb8:	f001 f8e8 	bl	800218c <setTimer1>
			}

			break;
 8000fbc:	e04a      	b.n	8001054 <fsm_manual_run+0x260>

		case MAN_YELLOW_RED:
			isButtonPressed(3);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f7ff fcba 	bl	8000938 <isButtonPressed>
			if(timer1_flag) {
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <fsm_manual_run+0x270>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d010      	beq.n	8000fee <fsm_manual_run+0x1fa>
				status = AUTO_RED_GREEN;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <fsm_manual_run+0x26c>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f001 f8d9 	bl	800218c <setTimer1>
				counter = max_red1;
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <fsm_manual_run+0x27c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a23      	ldr	r2, [pc, #140]	; (800106c <fsm_manual_run+0x278>)
 8000fe0:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000fe2:	f001 fb19 	bl	8002618 <displayCounter>
				setTraffic1Red();
 8000fe6:	f001 f955 	bl	8002294 <setTraffic1Red>
				setTraffic2Green();
 8000fea:	f001 f99f 	bl	800232c <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fca2 	bl	8000938 <isButtonPressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d014      	beq.n	8001024 <fsm_manual_run+0x230>
				isButtonPressed(2);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f7ff fc9c 	bl	8000938 <isButtonPressed>
				status = TUNING_RED1;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <fsm_manual_run+0x26c>)
 8001002:	2215      	movs	r2, #21
 8001004:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f001 f8bf 	bl	800218c <setTimer1>
				counter = max_red1;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <fsm_manual_run+0x27c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <fsm_manual_run+0x278>)
 8001014:	6013      	str	r3, [r2, #0]
				displayCounter();
 8001016:	f001 faff 	bl	8002618 <displayCounter>
				clearTraffic1();
 800101a:	f001 f973 	bl	8002304 <clearTraffic1>
				clearTraffic2();
 800101e:	f001 f9b9 	bl	8002394 <clearTraffic2>
				break;
 8001022:	e01a      	b.n	800105a <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff fc87 	bl	8000938 <isButtonPressed>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <fsm_manual_run+0x264>
				status = MAN_RED_GREEN;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <fsm_manual_run+0x26c>)
 8001032:	220b      	movs	r2, #11
 8001034:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8001036:	f001 f92d 	bl	8002294 <setTraffic1Red>
				setTraffic2Green();
 800103a:	f001 f977 	bl	800232c <setTraffic2Green>
				setTimer1(60000);
 800103e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001042:	f001 f8a3 	bl	800218c <setTimer1>
			}


			break;
 8001046:	e007      	b.n	8001058 <fsm_manual_run+0x264>
		default:
			break;
 8001048:	bf00      	nop
 800104a:	e006      	b.n	800105a <fsm_manual_run+0x266>
			break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <fsm_manual_run+0x266>
			break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000118 	.word	0x20000118
 8001064:	2000013c 	.word	0x2000013c
 8001068:	20000024 	.word	0x20000024
 800106c:	20000120 	.word	0x20000120
 8001070:	20000010 	.word	0x20000010
 8001074:	20000014 	.word	0x20000014
 8001078:	20000018 	.word	0x20000018

0800107c <fsm_pedestrian_run>:

#include "fsm_pedestrian.h"

int PWM = 0;

void fsm_pedestrian_run(){
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 8001080:	4b72      	ldr	r3, [pc, #456]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	2b03      	cmp	r3, #3
 8001088:	f200 80d6 	bhi.w	8001238 <fsm_pedestrian_run+0x1bc>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <fsm_pedestrian_run+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a5 	.word	0x080010a5
 8001098:	080010b1 	.word	0x080010b1
 800109c:	08001133 	.word	0x08001133
 80010a0:	08001181 	.word	0x08001181
		case INIT:
			clearPedestrian();
 80010a4:	f001 f9ae 	bl	8002404 <clearPedestrian>
			pedestrianStatus = PED_NONE;
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	601a      	str	r2, [r3, #0]
			break;
 80010ae:	e0ca      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
		case PED_NONE:
			if(isButtonPressed(0)){
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fc41 	bl	8000938 <isButtonPressed>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80bf 	beq.w	800123c <fsm_pedestrian_run+0x1c0>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW){
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <fsm_pedestrian_run+0x52>
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d108      	bne.n	80010e0 <fsm_pedestrian_run+0x64>
					pedestrianStatus = PED_GREEN;
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 80010d4:	f001 f982 	bl	80023dc <setPedestrianGreen>
					setTimer2(250);
 80010d8:	20fa      	movs	r0, #250	; 0xfa
 80010da:	f001 f873 	bl	80021c4 <setTimer2>
 80010de:	e027      	b.n	8001130 <fsm_pedestrian_run+0xb4>
				} else if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW ){
 80010e0:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b0b      	cmp	r3, #11
 80010e6:	d003      	beq.n	80010f0 <fsm_pedestrian_run+0x74>
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	d108      	bne.n	8001102 <fsm_pedestrian_run+0x86>
					pedestrianStatus = PED_GREEN;
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <fsm_pedestrian_run+0x1d0>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 80010f6:	f001 f971 	bl	80023dc <setPedestrianGreen>
					setTimer2(0);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f001 f862 	bl	80021c4 <setTimer2>
 8001100:	e016      	b.n	8001130 <fsm_pedestrian_run+0xb4>
				}
				else if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d00c      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b0d      	cmp	r3, #13
 8001110:	d008      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 8001112:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b05      	cmp	r3, #5
 8001118:	d004      	beq.n	8001124 <fsm_pedestrian_run+0xa8>
 800111a:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b0e      	cmp	r3, #14
 8001120:	f040 808c 	bne.w	800123c <fsm_pedestrian_run+0x1c0>
					pedestrianStatus = PED_RED;
 8001124:	4b49      	ldr	r3, [pc, #292]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001126:	2203      	movs	r2, #3
 8001128:	601a      	str	r2, [r3, #0]
					setPedestrianRed();
 800112a:	f001 f943 	bl	80023b4 <setPedestrianRed>
				}
			}
			break;
 800112e:	e085      	b.n	800123c <fsm_pedestrian_run+0x1c0>
 8001130:	e084      	b.n	800123c <fsm_pedestrian_run+0x1c0>
		case PED_RED:
			if(timer2_flag){
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <fsm_pedestrian_run+0xd0>
				timer2_flag = 0;
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
				clearPedestrian();
 8001146:	f001 f95d 	bl	8002404 <clearPedestrian>
				break;
 800114a:	e07c      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			}
			else if(status == AUTO_RED_GREEN){
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d108      	bne.n	8001166 <fsm_pedestrian_run+0xea>
				pedestrianStatus = PED_GREEN;
 8001154:	4b3d      	ldr	r3, [pc, #244]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001156:	2204      	movs	r2, #4
 8001158:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 800115a:	f001 f93f 	bl	80023dc <setPedestrianGreen>
				setTimer2(250);
 800115e:	20fa      	movs	r0, #250	; 0xfa
 8001160:	f001 f830 	bl	80021c4 <setTimer2>
			else if (status == MAN_RED_GREEN){
				pedestrianStatus = PED_GREEN;
				setPedestrianGreen();
				setTimer2(0);
			}
			break;
 8001164:	e06c      	b.n	8001240 <fsm_pedestrian_run+0x1c4>
			else if (status == MAN_RED_GREEN){
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b0b      	cmp	r3, #11
 800116c:	d168      	bne.n	8001240 <fsm_pedestrian_run+0x1c4>
				pedestrianStatus = PED_GREEN;
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <fsm_pedestrian_run+0x1d0>)
 8001170:	2204      	movs	r2, #4
 8001172:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 8001174:	f001 f932 	bl	80023dc <setPedestrianGreen>
				setTimer2(0);
 8001178:	2000      	movs	r0, #0
 800117a:	f001 f823 	bl	80021c4 <setTimer2>
			break;
 800117e:	e05f      	b.n	8001240 <fsm_pedestrian_run+0x1c4>
		case PED_GREEN:
			if(timer2_flag){
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <fsm_pedestrian_run+0x1d8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d039      	beq.n	80011fc <fsm_pedestrian_run+0x180>
				if(PWM == 0){
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12a      	bne.n	80011e6 <fsm_pedestrian_run+0x16a>
					PWM = 63-63*counter/(double)max_red1;
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <fsm_pedestrian_run+0x1e0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f928 	bl	80003f0 <__aeabi_i2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <fsm_pedestrian_run+0x1e4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f921 	bl	80003f0 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff faaf 	bl	8000718 <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4928      	ldr	r1, [pc, #160]	; (8001264 <fsm_pedestrian_run+0x1e8>)
 80011c4:	f7fe ffc6 	bl	8000154 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fb8a 	bl	80008e8 <__aeabi_d2iz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011d8:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <fsm_pedestrian_run+0x1ec>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
 80011e4:	e007      	b.n	80011f6 <fsm_pedestrian_run+0x17a>
				} else {
					PWM = 0;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <fsm_pedestrian_run+0x1dc>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <fsm_pedestrian_run+0x1ec>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 80011f6:	20fa      	movs	r0, #250	; 0xfa
 80011f8:	f000 ffe4 	bl	80021c4 <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d00b      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b0d      	cmp	r3, #13
 800120a:	d007      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d003      	beq.n	800121c <fsm_pedestrian_run+0x1a0>
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <fsm_pedestrian_run+0x1d4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b0e      	cmp	r3, #14
 800121a:	d113      	bne.n	8001244 <fsm_pedestrian_run+0x1c8>
				pedestrianStatus = PED_RED;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <fsm_pedestrian_run+0x1d0>)
 800121e:	2203      	movs	r2, #3
 8001220:	601a      	str	r2, [r3, #0]
				setTimer2(2000);
 8001222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001226:	f000 ffcd 	bl	80021c4 <setTimer2>
				setPedestrianRed();
 800122a:	f001 f8c3 	bl	80023b4 <setPedestrianRed>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <fsm_pedestrian_run+0x1ec>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8001236:	e005      	b.n	8001244 <fsm_pedestrian_run+0x1c8>
		default:
			break;
 8001238:	bf00      	nop
 800123a:	e004      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <fsm_pedestrian_run+0x1ca>
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	bf00      	nop
 800124c:	2000011c 	.word	0x2000011c
 8001250:	20000118 	.word	0x20000118
 8001254:	20000140 	.word	0x20000140
 8001258:	20000114 	.word	0x20000114
 800125c:	20000120 	.word	0x20000120
 8001260:	20000010 	.word	0x20000010
 8001264:	404f8000 	.word	0x404f8000
 8001268:	2000015c 	.word	0x2000015c

0800126c <fsm_tuning_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_tuning.h"

void fsm_tuning_run(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	switch(status){
 8001270:	4bb6      	ldr	r3, [pc, #728]	; (800154c <fsm_tuning_run+0x2e0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b15      	subs	r3, #21
 8001276:	2b05      	cmp	r3, #5
 8001278:	f200 8276 	bhi.w	8001768 <fsm_tuning_run+0x4fc>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <fsm_tuning_run+0x18>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	0800129d 	.word	0x0800129d
 8001288:	08001363 	.word	0x08001363
 800128c:	08001429 	.word	0x08001429
 8001290:	080014f3 	.word	0x080014f3
 8001294:	080015d9 	.word	0x080015d9
 8001298:	080016a1 	.word	0x080016a1
	case TUNING_RED1:

		if(timer1_flag){
 800129c:	4bac      	ldr	r3, [pc, #688]	; (8001550 <fsm_tuning_run+0x2e4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 80012a4:	4baa      	ldr	r3, [pc, #680]	; (8001550 <fsm_tuning_run+0x2e4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ae:	f000 ff6d 	bl	800218c <setTimer1>
			toggleTraffic1Red();
 80012b2:	f001 f8bb 	bl	800242c <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff fb3e 	bl	8000938 <isButtonPressed>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d019      	beq.n	80012f6 <fsm_tuning_run+0x8a>
			isButtonPressed(2);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff fb38 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f7ff fb35 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 80012ce:	4b9f      	ldr	r3, [pc, #636]	; (800154c <fsm_tuning_run+0x2e0>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 80012d4:	f001 f8f4 	bl	80024c0 <acceptTraffic1Red>
			setTimer1(1000);
 80012d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012dc:	f000 ff56 	bl	800218c <setTimer1>
			counter = max_red1;
 80012e0:	4b9c      	ldr	r3, [pc, #624]	; (8001554 <fsm_tuning_run+0x2e8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a9c      	ldr	r2, [pc, #624]	; (8001558 <fsm_tuning_run+0x2ec>)
 80012e6:	6013      	str	r3, [r2, #0]
			displayCounter();
 80012e8:	f001 f996 	bl	8002618 <displayCounter>
			setTraffic1Red();
 80012ec:	f000 ffd2 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 80012f0:	f001 f81c 	bl	800232c <setTraffic2Green>
			break;
 80012f4:	e245      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fb1e 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80012fc:	2002      	movs	r0, #2
 80012fe:	f7ff fb1b 	bl	8000938 <isButtonPressed>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d016      	beq.n	8001336 <fsm_tuning_run+0xca>
			isButtonPressed(3);
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff fb15 	bl	8000938 <isButtonPressed>
			status = TUNING_RED2;
 800130e:	4b8f      	ldr	r3, [pc, #572]	; (800154c <fsm_tuning_run+0x2e0>)
 8001310:	2216      	movs	r2, #22
 8001312:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	f000 ff38 	bl	800218c <setTimer1>
			acceptTraffic1Red();
 800131c:	f001 f8d0 	bl	80024c0 <acceptTraffic1Red>
			counter = max_red2;
 8001320:	4b8e      	ldr	r3, [pc, #568]	; (800155c <fsm_tuning_run+0x2f0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a8c      	ldr	r2, [pc, #560]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001326:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001328:	f001 f976 	bl	8002618 <displayCounter>
			clearTraffic1();
 800132c:	f000 ffea 	bl	8002304 <clearTraffic1>
			clearTraffic2();
 8001330:	f001 f830 	bl	8002394 <clearTraffic2>
			break;
 8001334:	e225      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff fafe 	bl	8000938 <isButtonPressed>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8214 	beq.w	800176c <fsm_tuning_run+0x500>
			counter++;
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a83      	ldr	r2, [pc, #524]	; (8001558 <fsm_tuning_run+0x2ec>)
 800134c:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 800134e:	4b82      	ldr	r3, [pc, #520]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b63      	cmp	r3, #99	; 0x63
 8001354:	dd02      	ble.n	800135c <fsm_tuning_run+0xf0>
				counter = 2;
 8001356:	4b80      	ldr	r3, [pc, #512]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001358:	2202      	movs	r2, #2
 800135a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800135c:	f001 f95c 	bl	8002618 <displayCounter>
		}

		break;
 8001360:	e204      	b.n	800176c <fsm_tuning_run+0x500>
	case TUNING_RED2:
		if(timer1_flag){
 8001362:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <fsm_tuning_run+0x2e4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <fsm_tuning_run+0x110>
			timer1_flag = 0;
 800136a:	4b79      	ldr	r3, [pc, #484]	; (8001550 <fsm_tuning_run+0x2e4>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001374:	f000 ff0a 	bl	800218c <setTimer1>
			toggleTraffic2Red();
 8001378:	f001 f864 	bl	8002444 <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fadb 	bl	8000938 <isButtonPressed>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d019      	beq.n	80013bc <fsm_tuning_run+0x150>
			isButtonPressed(2);
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fad5 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 800138e:	2003      	movs	r0, #3
 8001390:	f7ff fad2 	bl	8000938 <isButtonPressed>
			acceptTraffic2Red();
 8001394:	f001 f8b6 	bl	8002504 <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 8001398:	4b6c      	ldr	r3, [pc, #432]	; (800154c <fsm_tuning_run+0x2e0>)
 800139a:	2202      	movs	r2, #2
 800139c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800139e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a2:	f000 fef3 	bl	800218c <setTimer1>
			counter = max_red1;
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <fsm_tuning_run+0x2e8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6b      	ldr	r2, [pc, #428]	; (8001558 <fsm_tuning_run+0x2ec>)
 80013ac:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013ae:	f001 f933 	bl	8002618 <displayCounter>
			setTraffic2Red();
 80013b2:	f000 ff83 	bl	80022bc <setTraffic2Red>
			setTraffic2Green();
 80013b6:	f000 ffb9 	bl	800232c <setTraffic2Green>
			break;
 80013ba:	e1e2      	b.n	8001782 <fsm_tuning_run+0x516>
		}
		if(isButtonPressed(0)){
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fabb 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80013c2:	2002      	movs	r0, #2
 80013c4:	f7ff fab8 	bl	8000938 <isButtonPressed>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <fsm_tuning_run+0x190>
			isButtonPressed(3);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f7ff fab2 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN1;
 80013d4:	4b5d      	ldr	r3, [pc, #372]	; (800154c <fsm_tuning_run+0x2e0>)
 80013d6:	2217      	movs	r2, #23
 80013d8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80013da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013de:	f000 fed5 	bl	800218c <setTimer1>
			acceptTraffic2Red();
 80013e2:	f001 f88f 	bl	8002504 <acceptTraffic2Red>
			counter = max_green1;
 80013e6:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <fsm_tuning_run+0x2f4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <fsm_tuning_run+0x2ec>)
 80013ec:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013ee:	f001 f913 	bl	8002618 <displayCounter>
			clearTraffic1();
 80013f2:	f000 ff87 	bl	8002304 <clearTraffic1>
			clearTraffic2();
 80013f6:	f000 ffcd 	bl	8002394 <clearTraffic2>
			break;
 80013fa:	e1c2      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80013fc:	2003      	movs	r0, #3
 80013fe:	f7ff fa9b 	bl	8000938 <isButtonPressed>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 81b3 	beq.w	8001770 <fsm_tuning_run+0x504>
			counter++;
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <fsm_tuning_run+0x2ec>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a51      	ldr	r2, [pc, #324]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001412:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b63      	cmp	r3, #99	; 0x63
 800141a:	dd02      	ble.n	8001422 <fsm_tuning_run+0x1b6>
				counter = 2;
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <fsm_tuning_run+0x2ec>)
 800141e:	2202      	movs	r2, #2
 8001420:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001422:	f001 f8f9 	bl	8002618 <displayCounter>
		}
		break;
 8001426:	e1a3      	b.n	8001770 <fsm_tuning_run+0x504>
	case TUNING_GREEN1:

		if(timer1_flag){
 8001428:	4b49      	ldr	r3, [pc, #292]	; (8001550 <fsm_tuning_run+0x2e4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <fsm_tuning_run+0x1d6>
			timer1_flag = 0;
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <fsm_tuning_run+0x2e4>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143a:	f000 fea7 	bl	800218c <setTimer1>
			toggleTraffic1Green();
 800143e:	f001 f80b 	bl	8002458 <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fa78 	bl	8000938 <isButtonPressed>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d019      	beq.n	8001482 <fsm_tuning_run+0x216>
			isButtonPressed(2);
 800144e:	2002      	movs	r0, #2
 8001450:	f7ff fa72 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001454:	2003      	movs	r0, #3
 8001456:	f7ff fa6f 	bl	8000938 <isButtonPressed>
			acceptTraffic1Green();
 800145a:	f001 f875 	bl	8002548 <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <fsm_tuning_run+0x2e0>)
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001468:	f000 fe90 	bl	800218c <setTimer1>
			counter = max_red1;
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <fsm_tuning_run+0x2e8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a39      	ldr	r2, [pc, #228]	; (8001558 <fsm_tuning_run+0x2ec>)
 8001472:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001474:	f001 f8d0 	bl	8002618 <displayCounter>
			setTraffic1Red();
 8001478:	f000 ff0c 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 800147c:	f000 ff56 	bl	800232c <setTraffic2Green>
			break;
 8001480:	e17f      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fa58 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff fa55 	bl	8000938 <isButtonPressed>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d016      	beq.n	80014c2 <fsm_tuning_run+0x256>
			isButtonPressed(3);
 8001494:	2003      	movs	r0, #3
 8001496:	f7ff fa4f 	bl	8000938 <isButtonPressed>
			status = TUNING_GREEN2;
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <fsm_tuning_run+0x2e0>)
 800149c:	2218      	movs	r2, #24
 800149e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80014a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a4:	f000 fe72 	bl	800218c <setTimer1>
			acceptTraffic1Green();
 80014a8:	f001 f84e 	bl	8002548 <acceptTraffic1Green>
			counter = max_green2;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <fsm_tuning_run+0x2f8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a29      	ldr	r2, [pc, #164]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014b2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80014b4:	f001 f8b0 	bl	8002618 <displayCounter>
			clearTraffic1();
 80014b8:	f000 ff24 	bl	8002304 <clearTraffic1>
			clearTraffic2();
 80014bc:	f000 ff6a 	bl	8002394 <clearTraffic2>
			break;
 80014c0:	e15f      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80014c2:	2003      	movs	r0, #3
 80014c4:	f7ff fa38 	bl	8000938 <isButtonPressed>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8152 	beq.w	8001774 <fsm_tuning_run+0x508>
			counter++;
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014d8:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <fsm_tuning_run+0x2f0>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dc02      	bgt.n	80014ec <fsm_tuning_run+0x280>
				counter = 1;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <fsm_tuning_run+0x2ec>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80014ec:	f001 f894 	bl	8002618 <displayCounter>
		}
		break;
 80014f0:	e140      	b.n	8001774 <fsm_tuning_run+0x508>
	case TUNING_GREEN2:

		if(timer1_flag){
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <fsm_tuning_run+0x2e4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <fsm_tuning_run+0x2a0>
			timer1_flag = 0;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <fsm_tuning_run+0x2e4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001504:	f000 fe42 	bl	800218c <setTimer1>
			toggleTraffic2Green();
 8001508:	f000 ffb0 	bl	800246c <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fa13 	bl	8000938 <isButtonPressed>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d027      	beq.n	8001568 <fsm_tuning_run+0x2fc>
			isButtonPressed(2);
 8001518:	2002      	movs	r0, #2
 800151a:	f7ff fa0d 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 800151e:	2003      	movs	r0, #3
 8001520:	f7ff fa0a 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <fsm_tuning_run+0x2e0>)
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 800152a:	f001 f827 	bl	800257c <acceptTraffic2Green>
			setTimer1(1000);
 800152e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001532:	f000 fe2b 	bl	800218c <setTimer1>
			counter = max_red1;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <fsm_tuning_run+0x2e8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <fsm_tuning_run+0x2ec>)
 800153c:	6013      	str	r3, [r2, #0]
			displayCounter();
 800153e:	f001 f86b 	bl	8002618 <displayCounter>
			setTraffic1Red();
 8001542:	f000 fea7 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 8001546:	f000 fef1 	bl	800232c <setTraffic2Green>
			break;
 800154a:	e11a      	b.n	8001782 <fsm_tuning_run+0x516>
 800154c:	20000118 	.word	0x20000118
 8001550:	2000013c 	.word	0x2000013c
 8001554:	20000010 	.word	0x20000010
 8001558:	20000120 	.word	0x20000120
 800155c:	2000001c 	.word	0x2000001c
 8001560:	20000014 	.word	0x20000014
 8001564:	20000020 	.word	0x20000020
		}

		if(isButtonPressed(0)){
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff f9e5 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff f9e2 	bl	8000938 <isButtonPressed>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <fsm_tuning_run+0x33c>
			isButtonPressed(3);
 800157a:	2003      	movs	r0, #3
 800157c:	f7ff f9dc 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW1;
 8001580:	4b81      	ldr	r3, [pc, #516]	; (8001788 <fsm_tuning_run+0x51c>)
 8001582:	2219      	movs	r2, #25
 8001584:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158a:	f000 fdff 	bl	800218c <setTimer1>
			acceptTraffic2Green();
 800158e:	f000 fff5 	bl	800257c <acceptTraffic2Green>
			counter = max_yellow1;
 8001592:	4b7e      	ldr	r3, [pc, #504]	; (800178c <fsm_tuning_run+0x520>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <fsm_tuning_run+0x524>)
 8001598:	6013      	str	r3, [r2, #0]
			displayCounter();
 800159a:	f001 f83d 	bl	8002618 <displayCounter>
			clearTraffic1();
 800159e:	f000 feb1 	bl	8002304 <clearTraffic1>
			clearTraffic2();
 80015a2:	f000 fef7 	bl	8002394 <clearTraffic2>
			break;
 80015a6:	e0ec      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 80015a8:	2003      	movs	r0, #3
 80015aa:	f7ff f9c5 	bl	8000938 <isButtonPressed>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80e1 	beq.w	8001778 <fsm_tuning_run+0x50c>
			counter++;
 80015b6:	4b76      	ldr	r3, [pc, #472]	; (8001790 <fsm_tuning_run+0x524>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a74      	ldr	r2, [pc, #464]	; (8001790 <fsm_tuning_run+0x524>)
 80015be:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 80015c0:	4b74      	ldr	r3, [pc, #464]	; (8001794 <fsm_tuning_run+0x528>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b72      	ldr	r3, [pc, #456]	; (8001790 <fsm_tuning_run+0x524>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dc02      	bgt.n	80015d2 <fsm_tuning_run+0x366>
				counter = 1;
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <fsm_tuning_run+0x524>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80015d2:	f001 f821 	bl	8002618 <displayCounter>
		}
		break;
 80015d6:	e0cf      	b.n	8001778 <fsm_tuning_run+0x50c>
	case TUNING_YELLOW1:
		if(timer1_flag){
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <fsm_tuning_run+0x52c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <fsm_tuning_run+0x386>
			timer1_flag = 0;
 80015e0:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <fsm_tuning_run+0x52c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80015e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ea:	f000 fdcf 	bl	800218c <setTimer1>
			toggleTraffic1Yellow();
 80015ee:	f000 ff47 	bl	8002480 <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff f9a0 	bl	8000938 <isButtonPressed>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d019      	beq.n	8001632 <fsm_tuning_run+0x3c6>
			isButtonPressed(2);
 80015fe:	2002      	movs	r0, #2
 8001600:	f7ff f99a 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 8001604:	2003      	movs	r0, #3
 8001606:	f7ff f997 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <fsm_tuning_run+0x51c>)
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 8001610:	f000 ffce 	bl	80025b0 <acceptTraffic1Yellow>
			setTimer1(1000);
 8001614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001618:	f000 fdb8 	bl	800218c <setTimer1>
			counter = max_red1;
 800161c:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <fsm_tuning_run+0x528>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a5b      	ldr	r2, [pc, #364]	; (8001790 <fsm_tuning_run+0x524>)
 8001622:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001624:	f000 fff8 	bl	8002618 <displayCounter>
			setTraffic1Red();
 8001628:	f000 fe34 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 800162c:	f000 fe7e 	bl	800232c <setTraffic2Green>
			break;
 8001630:	e0a7      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff f980 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff f97d 	bl	8000938 <isButtonPressed>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d016      	beq.n	8001672 <fsm_tuning_run+0x406>
			isButtonPressed(3);
 8001644:	2003      	movs	r0, #3
 8001646:	f7ff f977 	bl	8000938 <isButtonPressed>
			status = TUNING_YELLOW2;
 800164a:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <fsm_tuning_run+0x51c>)
 800164c:	221a      	movs	r2, #26
 800164e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001654:	f000 fd9a 	bl	800218c <setTimer1>
			acceptTraffic1Yellow();
 8001658:	f000 ffaa 	bl	80025b0 <acceptTraffic1Yellow>
			counter = max_yellow2;
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <fsm_tuning_run+0x530>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <fsm_tuning_run+0x524>)
 8001662:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001664:	f000 ffd8 	bl	8002618 <displayCounter>
			clearTraffic1();
 8001668:	f000 fe4c 	bl	8002304 <clearTraffic1>
			clearTraffic2();
 800166c:	f000 fe92 	bl	8002394 <clearTraffic2>
			break;
 8001670:	e087      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 8001672:	2003      	movs	r0, #3
 8001674:	f7ff f960 	bl	8000938 <isButtonPressed>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07e      	beq.n	800177c <fsm_tuning_run+0x510>
			counter++;
 800167e:	4b44      	ldr	r3, [pc, #272]	; (8001790 <fsm_tuning_run+0x524>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a42      	ldr	r2, [pc, #264]	; (8001790 <fsm_tuning_run+0x524>)
 8001686:	6013      	str	r3, [r2, #0]
			if(counter > max_red2 - 1){
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <fsm_tuning_run+0x534>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <fsm_tuning_run+0x524>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	dc02      	bgt.n	800169a <fsm_tuning_run+0x42e>
				counter = 1;
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <fsm_tuning_run+0x524>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800169a:	f000 ffbd 	bl	8002618 <displayCounter>
		}
		break;
 800169e:	e06d      	b.n	800177c <fsm_tuning_run+0x510>
	case TUNING_YELLOW2:
		if(timer1_flag){
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <fsm_tuning_run+0x52c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <fsm_tuning_run+0x44e>
			timer1_flag = 0;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <fsm_tuning_run+0x52c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80016ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016b2:	f000 fd6b 	bl	800218c <setTimer1>
			toggleTraffic2Yellow();
 80016b6:	f000 fef5 	bl	80024a4 <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff f93c 	bl	8000938 <isButtonPressed>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <fsm_tuning_run+0x48e>
			isButtonPressed(2);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f7ff f936 	bl	8000938 <isButtonPressed>
			isButtonPressed(3);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f7ff f933 	bl	8000938 <isButtonPressed>
			status = AUTO_RED_GREEN;
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <fsm_tuning_run+0x51c>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 80016d8:	f000 ff84 	bl	80025e4 <acceptTraffic2Yellow>
			setTimer1(1000);
 80016dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e0:	f000 fd54 	bl	800218c <setTimer1>
			counter = max_red1;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <fsm_tuning_run+0x528>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a29      	ldr	r2, [pc, #164]	; (8001790 <fsm_tuning_run+0x524>)
 80016ea:	6013      	str	r3, [r2, #0]
			displayCounter();
 80016ec:	f000 ff94 	bl	8002618 <displayCounter>
			setTraffic1Red();
 80016f0:	f000 fdd0 	bl	8002294 <setTraffic1Red>
			setTraffic2Green();
 80016f4:	f000 fe1a 	bl	800232c <setTraffic2Green>
			break;
 80016f8:	e043      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(0)){
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff f91c 	bl	8000938 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff f919 	bl	8000938 <isButtonPressed>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d016      	beq.n	800173a <fsm_tuning_run+0x4ce>
			isButtonPressed(3);
 800170c:	2003      	movs	r0, #3
 800170e:	f7ff f913 	bl	8000938 <isButtonPressed>
			status = TUNING_RED1;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <fsm_tuning_run+0x51c>)
 8001714:	2215      	movs	r2, #21
 8001716:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800171c:	f000 fd36 	bl	800218c <setTimer1>
			acceptTraffic2Yellow();
 8001720:	f000 ff60 	bl	80025e4 <acceptTraffic2Yellow>
			counter = max_red1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <fsm_tuning_run+0x528>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <fsm_tuning_run+0x524>)
 800172a:	6013      	str	r3, [r2, #0]
			displayCounter();
 800172c:	f000 ff74 	bl	8002618 <displayCounter>
			clearTraffic1();
 8001730:	f000 fde8 	bl	8002304 <clearTraffic1>
			clearTraffic2();
 8001734:	f000 fe2e 	bl	8002394 <clearTraffic2>
			break;
 8001738:	e023      	b.n	8001782 <fsm_tuning_run+0x516>
		}

		if(isButtonPressed(3)){
 800173a:	2003      	movs	r0, #3
 800173c:	f7ff f8fc 	bl	8000938 <isButtonPressed>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d01c      	beq.n	8001780 <fsm_tuning_run+0x514>
			counter++;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <fsm_tuning_run+0x524>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a10      	ldr	r2, [pc, #64]	; (8001790 <fsm_tuning_run+0x524>)
 800174e:	6013      	str	r3, [r2, #0]
			if(counter > max_red1 - 1){
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <fsm_tuning_run+0x528>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <fsm_tuning_run+0x524>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	dc02      	bgt.n	8001762 <fsm_tuning_run+0x4f6>
				counter = 1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <fsm_tuning_run+0x524>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001762:	f000 ff59 	bl	8002618 <displayCounter>
		}
		break;
 8001766:	e00b      	b.n	8001780 <fsm_tuning_run+0x514>
	default:
		break;
 8001768:	bf00      	nop
 800176a:	e00a      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 800176c:	bf00      	nop
 800176e:	e008      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001770:	bf00      	nop
 8001772:	e006      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001774:	bf00      	nop
 8001776:	e004      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001778:	bf00      	nop
 800177a:	e002      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 800177c:	bf00      	nop
 800177e:	e000      	b.n	8001782 <fsm_tuning_run+0x516>
		break;
 8001780:	bf00      	nop
	}
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000118 	.word	0x20000118
 800178c:	20000018 	.word	0x20000018
 8001790:	20000120 	.word	0x20000120
 8001794:	20000010 	.word	0x20000010
 8001798:	2000013c 	.word	0x2000013c
 800179c:	20000024 	.word	0x20000024
 80017a0:	2000001c 	.word	0x2000001c

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a8:	f000 ff8a 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ac:	f000 f84c 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b0:	f000 f978 	bl	8001aa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017b4:	f000 f88a 	bl	80018cc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80017b8:	f000 f94a 	bl	8001a50 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80017bc:	f000 f8d2 	bl	8001964 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 80017c0:	f000 f9e3 	bl	8001b8a <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 80017c4:	4816      	ldr	r0, [pc, #88]	; (8001820 <main+0x7c>)
 80017c6:	f001 ffd1 	bl	800376c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017ca:	2100      	movs	r1, #0
 80017cc:	4815      	ldr	r0, [pc, #84]	; (8001824 <main+0x80>)
 80017ce:	f002 f877 	bl	80038c0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <main+0x84>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <main+0x88>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timer_run, 1, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <main+0x8c>)
 80017e4:	f000 fa16 	bl	8001c14 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 1, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <main+0x90>)
 80017ee:	f000 fa11 	bl	8001c14 <SCH_Add_Task>
  SCH_Add_Task(fsm_auto_run, 2, 10);
 80017f2:	220a      	movs	r2, #10
 80017f4:	2102      	movs	r1, #2
 80017f6:	4810      	ldr	r0, [pc, #64]	; (8001838 <main+0x94>)
 80017f8:	f000 fa0c 	bl	8001c14 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 3, 10);
 80017fc:	220a      	movs	r2, #10
 80017fe:	2103      	movs	r1, #3
 8001800:	480e      	ldr	r0, [pc, #56]	; (800183c <main+0x98>)
 8001802:	f000 fa07 	bl	8001c14 <SCH_Add_Task>
  SCH_Add_Task(fsm_tuning_run, 4, 10);
 8001806:	220a      	movs	r2, #10
 8001808:	2104      	movs	r1, #4
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <main+0x9c>)
 800180c:	f000 fa02 	bl	8001c14 <SCH_Add_Task>
  SCH_Add_Task(fsm_pedestrian_run, 5, 10);
 8001810:	220a      	movs	r2, #10
 8001812:	2105      	movs	r1, #5
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <main+0xa0>)
 8001816:	f000 f9fd 	bl	8001c14 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800181a:	f000 fae3 	bl	8001de4 <SCH_Dispatch_Tasks>
 800181e:	e7fc      	b.n	800181a <main+0x76>
 8001820:	200001a4 	.word	0x200001a4
 8001824:	2000015c 	.word	0x2000015c
 8001828:	20000118 	.word	0x20000118
 800182c:	2000011c 	.word	0x2000011c
 8001830:	080021fd 	.word	0x080021fd
 8001834:	08000999 	.word	0x08000999
 8001838:	08000ba5 	.word	0x08000ba5
 800183c:	08000df5 	.word	0x08000df5
 8001840:	0800126d 	.word	0x0800126d
 8001844:	0800107d 	.word	0x0800107d

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b090      	sub	sp, #64	; 0x40
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fb00 	bl	8004e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186e:	2301      	movs	r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001872:	2310      	movs	r3, #16
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001876:	2302      	movs	r3, #2
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800187e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fb05 	bl	8002e98 <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001894:	f000 f974 	bl	8001b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001898:	230f      	movs	r3, #15
 800189a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189c:	2302      	movs	r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 fd70 	bl	8003398 <HAL_RCC_ClockConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018be:	f000 f95f 	bl	8001b80 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3740      	adds	r7, #64	; 0x40
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_TIM2_Init+0x94>)
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_TIM2_Init+0x94>)
 80018f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80018f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_TIM2_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_TIM2_Init+0x94>)
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_TIM2_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_TIM2_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_TIM2_Init+0x94>)
 8001912:	f001 fedb 	bl	80036cc <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800191c:	f000 f930 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM2_Init+0x94>)
 800192e:	f002 fa2f 	bl	8003d90 <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001938:	f000 f922 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_TIM2_Init+0x94>)
 800194a:	f002 fdad 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001954:	f000 f914 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200001a4 	.word	0x200001a4

08001964 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <MX_TIM3_Init+0xe8>)
 8001998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <MX_TIM3_Init+0xe4>)
 800199c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019aa:	223f      	movs	r2, #63	; 0x3f
 80019ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ba:	4823      	ldr	r0, [pc, #140]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019bc:	f001 fe86 	bl	80036cc <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019c6:	f000 f8db 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d4:	4619      	mov	r1, r3
 80019d6:	481c      	ldr	r0, [pc, #112]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019d8:	f002 f9da 	bl	8003d90 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019e2:	f000 f8cd 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019e6:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM3_Init+0xe4>)
 80019e8:	f001 ff12 	bl	8003810 <HAL_TIM_PWM_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019f2:	f000 f8c5 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	4619      	mov	r1, r3
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001a06:	f002 fd4f 	bl	80044a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a10:	f000 f8b6 	bl	8001b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a14:	2360      	movs	r3, #96	; 0x60
 8001a16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001a2c:	f002 f8f2 	bl	8003c14 <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a36:	f000 f8a3 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM3_Init+0xe4>)
 8001a3c:	f000 faaa 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 8001a40:	bf00      	nop
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000015c 	.word	0x2000015c
 8001a4c:	40000400 	.word	0x40000400

08001a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_USART2_UART_Init+0x50>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a88:	f002 fd7e 	bl	8004588 <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a92:	f000 f875 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200001ec 	.word	0x200001ec
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a2d      	ldr	r2, [pc, #180]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_GPIO_Init+0xd0>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001aee:	4822      	ldr	r0, [pc, #136]	; (8001b78 <MX_GPIO_Init+0xd4>)
 8001af0:	f001 f9a1 	bl	8002e36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001afa:	4820      	ldr	r0, [pc, #128]	; (8001b7c <MX_GPIO_Init+0xd8>)
 8001afc:	f001 f99b 	bl	8002e36 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8001b00:	2313      	movs	r3, #19
 8001b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	481a      	ldr	r0, [pc, #104]	; (8001b7c <MX_GPIO_Init+0xd8>)
 8001b14:	f000 fff4 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MX_GPIO_Init+0xd4>)
 8001b2c:	f000 ffe8 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001b30:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <MX_GPIO_Init+0xd4>)
 8001b4a:	f000 ffd9 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8001b4e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_GPIO_Init+0xd8>)
 8001b68:	f000 ffca 	bl	8002b00 <HAL_GPIO_Init>

}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40010800 	.word	0x40010800

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>

08001b8a <SCH_Init>:
#include "scheduler.h"

struct sTask SCH_tasks_G[SCH_MAX_TASKS];
struct sTask *head = NULL;
struct sTask *pRun = NULL;
void SCH_Init(void){
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001b90:	2300      	movs	r3, #0
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	e006      	b.n	8001ba4 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f947 	bl	8001e2c <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b13      	cmp	r3, #19
 8001ba8:	d9f5      	bls.n	8001b96 <SCH_Init+0xc>
	}
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <SCH_Update>:

void SCH_Update(void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
//				SCH_tasks_G[index].RunMe += 1;
//				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
//			}
//		}
//	}
	while(head != NULL && head->Delay == 0){
 8001bb8:	e015      	b.n	8001be6 <SCH_Update+0x32>
		if(head->Period != 0) SCH_Add_Task(head->pTask, head->Period, head->Period);
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <SCH_Update+0x5c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00b      	beq.n	8001bdc <SCH_Update+0x28>
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <SCH_Update+0x5c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <SCH_Update+0x5c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6899      	ldr	r1, [r3, #8]
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <SCH_Update+0x5c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f000 f81c 	bl	8001c14 <SCH_Add_Task>
		head = head->pNext;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <SCH_Update+0x5c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <SCH_Update+0x5c>)
 8001be4:	6013      	str	r3, [r2, #0]
	while(head != NULL && head->Delay == 0){
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <SCH_Update+0x5c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <SCH_Update+0x44>
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <SCH_Update+0x5c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0e0      	beq.n	8001bba <SCH_Update+0x6>
	}
	if(head != NULL){
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SCH_Update+0x5c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <SCH_Update+0x56>
		head->Delay--;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <SCH_Update+0x5c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	3a01      	subs	r2, #1
 8001c08:	605a      	str	r2, [r3, #4]
	}
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000130 	.word	0x20000130

08001c14 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunc)(), uint32_t delay, uint32_t period){
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
//	SCH_tasks_G[index].Period = period;
//	SCH_tasks_G[index].Delay = delay;
//	SCH_tasks_G[index].RunMe = 0;
//	SCH_tasks_G[index].TaskID = index;
//	return index;
	uint32_t index = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
	uint8_t waiting = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	76fb      	strb	r3, [r7, #27]
	while(SCH_tasks_G[index].pTask != 0 && index < SCH_MAX_TASKS) index++;
 8001c28:	e002      	b.n	8001c30 <SCH_Add_Task+0x1c>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	4969      	ldr	r1, [pc, #420]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <SCH_Add_Task+0x36>
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b13      	cmp	r3, #19
 8001c48:	d9ef      	bls.n	8001c2a <SCH_Add_Task+0x16>
	if(index == SCH_MAX_TASKS){
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	2b14      	cmp	r3, #20
 8001c4e:	d101      	bne.n	8001c54 <SCH_Add_Task+0x40>
		return SCH_MAX_TASKS;
 8001c50:	2314      	movs	r3, #20
 8001c52:	e0bb      	b.n	8001dcc <SCH_Add_Task+0x1b8>
	}
	SCH_tasks_G[index].pTask = pFunc;
 8001c54:	4960      	ldr	r1, [pc, #384]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = period;
 8001c66:	495c      	ldr	r1, [pc, #368]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	3308      	adds	r3, #8
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
//	SCH_tasks_G[index].RunMe = 0;
	SCH_tasks_G[index].TaskID = index;
 8001c7a:	4957      	ldr	r1, [pc, #348]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	330c      	adds	r3, #12
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	601a      	str	r2, [r3, #0]
	struct sTask *cur = head;
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	617b      	str	r3, [r7, #20]
	struct sTask *prev = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
	if(head == NULL){
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d126      	bne.n	8001cee <SCH_Add_Task+0xda>
		head = &SCH_tasks_G[index];
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4a4b      	ldr	r2, [pc, #300]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001cac:	4413      	add	r3, r2
 8001cae:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001cb0:	6013      	str	r3, [r2, #0]
		SCH_tasks_G[index].Delay = delay;
 8001cb2:	4949      	ldr	r1, [pc, #292]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	601a      	str	r2, [r3, #0]
		pRun = head;
 8001cc6:	4b45      	ldr	r3, [pc, #276]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a45      	ldr	r2, [pc, #276]	; (8001de0 <SCH_Add_Task+0x1cc>)
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e07c      	b.n	8001dca <SCH_Add_Task+0x1b6>
	} else {
		while(cur != NULL){
			waiting += cur->Delay;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	7efb      	ldrb	r3, [r7, #27]
 8001cd8:	4413      	add	r3, r2
 8001cda:	76fb      	strb	r3, [r7, #27]
			if(waiting > delay) break;
 8001cdc:	7efb      	ldrb	r3, [r7, #27]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d308      	bcc.n	8001cf6 <SCH_Add_Task+0xe2>
			prev = cur;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
			cur = cur->pNext;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	617b      	str	r3, [r7, #20]
		while(cur != NULL){
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ed      	bne.n	8001cd0 <SCH_Add_Task+0xbc>
 8001cf4:	e000      	b.n	8001cf8 <SCH_Add_Task+0xe4>
			if(waiting > delay) break;
 8001cf6:	bf00      	nop
		}
		if(cur == NULL){
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d115      	bne.n	8001d2a <SCH_Add_Task+0x116>
			prev->pNext = &SCH_tasks_G[index];
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4a33      	ldr	r2, [pc, #204]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001d0a:	441a      	add	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	611a      	str	r2, [r3, #16]
			SCH_tasks_G[index].Delay = delay - waiting;
 8001d10:	7efb      	ldrb	r3, [r7, #27]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	1ad1      	subs	r1, r2, r3
 8001d16:	4830      	ldr	r0, [pc, #192]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	3304      	adds	r3, #4
 8001d26:	6019      	str	r1, [r3, #0]
 8001d28:	e04f      	b.n	8001dca <SCH_Add_Task+0x1b6>
		} else{
			if(cur == head){
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d11a      	bne.n	8001d6a <SCH_Add_Task+0x156>
				head = &SCH_tasks_G[index];
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001d40:	4413      	add	r3, r2
 8001d42:	4a26      	ldr	r2, [pc, #152]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001d44:	6013      	str	r3, [r2, #0]
				head->pNext = cur;
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	611a      	str	r2, [r3, #16]
				head->Delay = delay;
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	605a      	str	r2, [r3, #4]
				if(pRun == cur) pRun = head;
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <SCH_Add_Task+0x1cc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d126      	bne.n	8001dae <SCH_Add_Task+0x19a>
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <SCH_Add_Task+0x1c8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <SCH_Add_Task+0x1cc>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e021      	b.n	8001dae <SCH_Add_Task+0x19a>
			} else {
				prev->pNext =  &SCH_tasks_G[index];
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001d76:	441a      	add	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	611a      	str	r2, [r3, #16]
				SCH_tasks_G[index].Delay = delay - waiting + cur->Delay;
 8001d7c:	7efb      	ldrb	r3, [r7, #27]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	1ad2      	subs	r2, r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	18d1      	adds	r1, r2, r3
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4403      	add	r3, r0
 8001d96:	3304      	adds	r3, #4
 8001d98:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[index].pNext = cur;
 8001d9a:	490f      	ldr	r1, [pc, #60]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3310      	adds	r3, #16
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]
			}
			cur->Delay -= SCH_tasks_G[index].Delay;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <SCH_Add_Task+0x1c4>)
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4403      	add	r3, r0
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	1aca      	subs	r2, r1, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	605a      	str	r2, [r3, #4]
//				}
//				cur = cur->pNext;
//			}
		}
	}
	return index;
 8001dca:	69fb      	ldr	r3, [r7, #28]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3724      	adds	r7, #36	; 0x24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000230 	.word	0x20000230
 8001ddc:	20000130 	.word	0x20000130
 8001de0:	20000134 	.word	0x20000134

08001de4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
//			(*SCH_tasks_G[index].pTask)();
//			if(SCH_tasks_G[index].Period == 0) SCH_Delete_Task(index);
//		}
//	}
//	SCH_Go_To_Sleep();
	while(pRun != head){
 8001dea:	e00f      	b.n	8001e0c <SCH_Dispatch_Tasks+0x28>
		(pRun->pTask)();
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <SCH_Dispatch_Tasks+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4798      	blx	r3
		uint32_t id = pRun->TaskID;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <SCH_Dispatch_Tasks+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	607b      	str	r3, [r7, #4]
		pRun = pRun->pNext;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <SCH_Dispatch_Tasks+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <SCH_Dispatch_Tasks+0x40>)
 8001e04:	6013      	str	r3, [r2, #0]
		SCH_Delete_Task(id);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f810 	bl	8001e2c <SCH_Delete_Task>
	while(pRun != head){
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SCH_Dispatch_Tasks+0x40>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SCH_Dispatch_Tasks+0x44>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1e9      	bne.n	8001dec <SCH_Dispatch_Tasks+0x8>
	}
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000134 	.word	0x20000134
 8001e28:	20000130 	.word	0x20000130

08001e2c <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t index){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 8001e34:	4921      	ldr	r1, [pc, #132]	; (8001ebc <SCH_Delete_Task+0x90>)
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <SCH_Delete_Task+0x20>
		return 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e031      	b.n	8001eb0 <SCH_Delete_Task+0x84>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8001e4c:	491b      	ldr	r1, [pc, #108]	; (8001ebc <SCH_Delete_Task+0x90>)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8001e5e:	4917      	ldr	r1, [pc, #92]	; (8001ebc <SCH_Delete_Task+0x90>)
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 8001e72:	4912      	ldr	r1, [pc, #72]	; (8001ebc <SCH_Delete_Task+0x90>)
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3308      	adds	r3, #8
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
//		SCH_tasks_G[index].RunMe = 0;
		SCH_tasks_G[index].pNext = 0;
 8001e86:	490d      	ldr	r1, [pc, #52]	; (8001ebc <SCH_Delete_Task+0x90>)
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3310      	adds	r3, #16
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].TaskID = 0;
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <SCH_Delete_Task+0x90>)
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
		return 1;
 8001eae:	2301      	movs	r3, #1
	}
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000230 	.word	0x20000230

08001ec0 <HAL_MspInit>:
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x5c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_MspInit+0x60>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_MspInit+0x60>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6053      	str	r3, [r2, #4]
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000

08001f24 <HAL_TIM_Base_MspInit>:
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d114      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x3c>
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_TIM_Base_MspInit+0x68>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_TIM_Base_MspInit+0x68>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_TIM_Base_MspInit+0x68>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	201c      	movs	r0, #28
 8001f54:	f000 fced 	bl	8002932 <HAL_NVIC_SetPriority>
 8001f58:	201c      	movs	r0, #28
 8001f5a:	f000 fd06 	bl	800296a <HAL_NVIC_EnableIRQ>
 8001f5e:	e010      	b.n	8001f82 <HAL_TIM_Base_MspInit+0x5e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_TIM_Base_MspInit+0x6c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10b      	bne.n	8001f82 <HAL_TIM_Base_MspInit+0x5e>
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_TIM_Base_MspInit+0x68>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_TIM_Base_MspInit+0x68>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_TIM_Base_MspInit+0x68>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40000400 	.word	0x40000400

08001f94 <HAL_TIM_MspPostInit>:
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_TIM_MspPostInit+0x58>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d117      	bne.n	8001fe4 <HAL_TIM_MspPostInit+0x50>
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_TIM_MspPostInit+0x5c>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_TIM_MspPostInit+0x5c>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_TIM_MspPostInit+0x5c>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2340      	movs	r3, #64	; 0x40
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <HAL_TIM_MspPostInit+0x60>)
 8001fe0:	f000 fd8e 	bl	8002b00 <HAL_GPIO_Init>
 8001fe4:	bf00      	nop
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010800 	.word	0x40010800

08001ff8 <HAL_UART_MspInit>:
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_UART_MspInit+0x98>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d137      	bne.n	8002088 <HAL_UART_MspInit+0x90>
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_UART_MspInit+0x9c>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_UART_MspInit+0x9c>)
 800201e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002022:	61d3      	str	r3, [r2, #28]
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_UART_MspInit+0x9c>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_UART_MspInit+0x9c>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <HAL_UART_MspInit+0x9c>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_UART_MspInit+0x9c>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2304      	movs	r3, #4
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	2302      	movs	r3, #2
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	2303      	movs	r3, #3
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4619      	mov	r1, r3
 800205a:	480f      	ldr	r0, [pc, #60]	; (8002098 <HAL_UART_MspInit+0xa0>)
 800205c:	f000 fd50 	bl	8002b00 <HAL_GPIO_Init>
 8002060:	2308      	movs	r3, #8
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	4809      	ldr	r0, [pc, #36]	; (8002098 <HAL_UART_MspInit+0xa0>)
 8002074:	f000 fd44 	bl	8002b00 <HAL_GPIO_Init>
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2026      	movs	r0, #38	; 0x26
 800207e:	f000 fc58 	bl	8002932 <HAL_NVIC_SetPriority>
 8002082:	2026      	movs	r0, #38	; 0x26
 8002084:	f000 fc71 	bl	800296a <HAL_NVIC_EnableIRQ>
 8002088:	bf00      	nop
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40004400 	.word	0x40004400
 8002094:	40021000 	.word	0x40021000
 8002098:	40010800 	.word	0x40010800

0800209c <NMI_Handler>:
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
 80020a0:	e7fe      	b.n	80020a0 <NMI_Handler+0x4>

080020a2 <HardFault_Handler>:
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	e7fe      	b.n	80020a6 <HardFault_Handler+0x4>

080020a8 <MemManage_Handler>:
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	e7fe      	b.n	80020ac <MemManage_Handler+0x4>

080020ae <BusFault_Handler>:
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	e7fe      	b.n	80020b2 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	e7fe      	b.n	80020b8 <UsageFault_Handler+0x4>

080020ba <SVC_Handler>:
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <DebugMon_Handler>:
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <SysTick_Handler>:
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	f000 fb33 	bl	800274c <HAL_IncTick>
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <TIM2_IRQHandler>:
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM2_IRQHandler+0x10>)
 80020f2:	f001 fc87 	bl	8003a04 <HAL_TIM_IRQHandler>
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200001a4 	.word	0x200001a4

08002100 <USART2_IRQHandler>:
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <USART2_IRQHandler+0x10>)
 8002106:	f002 fad1 	bl	80046ac <HAL_UART_IRQHandler>
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200001ec 	.word	0x200001ec

08002114 <_sbrk>:
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <_sbrk+0x5c>)
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <_sbrk+0x60>)
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <_sbrk+0x22>
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <_sbrk+0x64>)
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <_sbrk+0x68>)
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <_sbrk+0x40>
 8002144:	f002 fe60 	bl	8004e08 <__errno>
 8002148:	4603      	mov	r3, r0
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e009      	b.n	8002168 <_sbrk+0x54>
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <_sbrk+0x64>)
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20005000 	.word	0x20005000
 8002174:	00000400 	.word	0x00000400
 8002178:	20000138 	.word	0x20000138
 800217c:	200003d8 	.word	0x200003d8

08002180 <SystemInit>:
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <setTimer1+0x2c>)
 8002198:	fb82 1203 	smull	r1, r2, r2, r3
 800219c:	1092      	asrs	r2, r2, #2
 800219e:	17db      	asrs	r3, r3, #31
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a06      	ldr	r2, [pc, #24]	; (80021bc <setTimer1+0x30>)
 80021a4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <setTimer1+0x34>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	66666667 	.word	0x66666667
 80021bc:	20000148 	.word	0x20000148
 80021c0:	2000013c 	.word	0x2000013c

080021c4 <setTimer2>:

void setTimer2(int duration){
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <setTimer2+0x2c>)
 80021d0:	fb82 1203 	smull	r1, r2, r2, r3
 80021d4:	1092      	asrs	r2, r2, #2
 80021d6:	17db      	asrs	r3, r3, #31
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <setTimer2+0x30>)
 80021dc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <setTimer2+0x34>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	66666667 	.word	0x66666667
 80021f4:	2000014c 	.word	0x2000014c
 80021f8:	20000140 	.word	0x20000140

080021fc <timer_run>:
void setTimer3(int duration){
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void timer_run(){
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <timer_run+0x6c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	dd0b      	ble.n	8002220 <timer_run+0x24>
		timer1_counter--;
 8002208:	4b17      	ldr	r3, [pc, #92]	; (8002268 <timer_run+0x6c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <timer_run+0x6c>)
 8002210:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <timer_run+0x6c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <timer_run+0x24>
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <timer_run+0x70>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <timer_run+0x74>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	dd0b      	ble.n	8002240 <timer_run+0x44>
		timer2_counter--;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <timer_run+0x74>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3b01      	subs	r3, #1
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <timer_run+0x74>)
 8002230:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <timer_run+0x74>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <timer_run+0x44>
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <timer_run+0x78>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <timer_run+0x7c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	dd0b      	ble.n	8002260 <timer_run+0x64>
		timer3_counter--;
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <timer_run+0x7c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <timer_run+0x7c>)
 8002250:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <timer_run+0x7c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <timer_run+0x64>
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <timer_run+0x80>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
	}
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000148 	.word	0x20000148
 800226c:	2000013c 	.word	0x2000013c
 8002270:	2000014c 	.word	0x2000014c
 8002274:	20000140 	.word	0x20000140
 8002278:	20000150 	.word	0x20000150
 800227c:	20000144 	.word	0x20000144

08002280 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8002288:	f7ff fc94 	bl	8001bb4 <SCH_Update>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <setTraffic1Red>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "traffic.h"

void setTraffic1Red(){
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <setTraffic1Red+0x20>)
 80022a0:	f000 fdc9 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2108      	movs	r1, #8
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <setTraffic1Red+0x24>)
 80022aa:	f000 fdc4 	bl	8002e36 <HAL_GPIO_WritePin>

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40010800 	.word	0x40010800
 80022b8:	40010c00 	.word	0x40010c00

080022bc <setTraffic2Red>:

void setTraffic2Red(){
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	2120      	movs	r1, #32
 80022c4:	4804      	ldr	r0, [pc, #16]	; (80022d8 <setTraffic2Red+0x1c>)
 80022c6:	f000 fdb6 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2110      	movs	r1, #16
 80022ce:	4802      	ldr	r0, [pc, #8]	; (80022d8 <setTraffic2Red+0x1c>)
 80022d0:	f000 fdb1 	bl	8002e36 <HAL_GPIO_WritePin>
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40010c00 	.word	0x40010c00

080022dc <setTraffic1Green>:

void setTraffic1Green(){
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <setTraffic1Green+0x20>)
 80022e8:	f000 fda5 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	2108      	movs	r1, #8
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <setTraffic1Green+0x24>)
 80022f2:	f000 fda0 	bl	8002e36 <HAL_GPIO_WritePin>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40010800 	.word	0x40010800
 8002300:	40010c00 	.word	0x40010c00

08002304 <clearTraffic1>:

void clearTraffic1(){
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <clearTraffic1+0x20>)
 8002310:	f000 fd91 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2108      	movs	r1, #8
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <clearTraffic1+0x24>)
 800231a:	f000 fd8c 	bl	8002e36 <HAL_GPIO_WritePin>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40010800 	.word	0x40010800
 8002328:	40010c00 	.word	0x40010c00

0800232c <setTraffic2Green>:


void setTraffic2Green(){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2120      	movs	r1, #32
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <setTraffic2Green+0x1c>)
 8002336:	f000 fd7e 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	2110      	movs	r1, #16
 800233e:	4802      	ldr	r0, [pc, #8]	; (8002348 <setTraffic2Green+0x1c>)
 8002340:	f000 fd79 	bl	8002e36 <HAL_GPIO_WritePin>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40010c00 	.word	0x40010c00

0800234c <setTraffic1Yellow>:

void setTraffic1Yellow(){
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <setTraffic1Yellow+0x20>)
 8002358:	f000 fd6d 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	2108      	movs	r1, #8
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <setTraffic1Yellow+0x24>)
 8002362:	f000 fd68 	bl	8002e36 <HAL_GPIO_WritePin>
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40010800 	.word	0x40010800
 8002370:	40010c00 	.word	0x40010c00

08002374 <setTraffic2Yellow>:

void setTraffic2Yellow(){
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	2120      	movs	r1, #32
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <setTraffic2Yellow+0x1c>)
 800237e:	f000 fd5a 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	2110      	movs	r1, #16
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <setTraffic2Yellow+0x1c>)
 8002388:	f000 fd55 	bl	8002e36 <HAL_GPIO_WritePin>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40010c00 	.word	0x40010c00

08002394 <clearTraffic2>:

void clearTraffic2(){
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	2120      	movs	r1, #32
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <clearTraffic2+0x1c>)
 800239e:	f000 fd4a 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2110      	movs	r1, #16
 80023a6:	4802      	ldr	r0, [pc, #8]	; (80023b0 <clearTraffic2+0x1c>)
 80023a8:	f000 fd45 	bl	8002e36 <HAL_GPIO_WritePin>
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40010c00 	.word	0x40010c00

080023b4 <setPedestrianRed>:

void setPedestrianRed(){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <setPedestrianRed+0x20>)
 80023c0:	f000 fd39 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <setPedestrianRed+0x24>)
 80023cc:	f000 fd33 	bl	8002e36 <HAL_GPIO_WritePin>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40010c00 	.word	0x40010c00
 80023d8:	40010800 	.word	0x40010800

080023dc <setPedestrianGreen>:

void setPedestrianGreen(){
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <setPedestrianGreen+0x20>)
 80023e8:	f000 fd25 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 80023ec:	2201      	movs	r2, #1
 80023ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f2:	4803      	ldr	r0, [pc, #12]	; (8002400 <setPedestrianGreen+0x24>)
 80023f4:	f000 fd1f 	bl	8002e36 <HAL_GPIO_WritePin>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40010800 	.word	0x40010800

08002404 <clearPedestrian>:
void setPedestrianYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void clearPedestrian(){
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <clearPedestrian+0x20>)
 8002410:	f000 fd11 	bl	8002e36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <clearPedestrian+0x24>)
 800241c:	f000 fd0b 	bl	8002e36 <HAL_GPIO_WritePin>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40010c00 	.word	0x40010c00
 8002428:	40010800 	.word	0x40010800

0800242c <toggleTraffic1Red>:

void toggleTraffic1Red(){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8002430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <toggleTraffic1Red+0x14>)
 8002436:	f000 fd16 	bl	8002e66 <HAL_GPIO_TogglePin>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40010800 	.word	0x40010800

08002444 <toggleTraffic2Red>:

void toggleTraffic2Red(){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8002448:	2120      	movs	r1, #32
 800244a:	4802      	ldr	r0, [pc, #8]	; (8002454 <toggleTraffic2Red+0x10>)
 800244c:	f000 fd0b 	bl	8002e66 <HAL_GPIO_TogglePin>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40010c00 	.word	0x40010c00

08002458 <toggleTraffic1Green>:

void toggleTraffic1Green(){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 800245c:	2108      	movs	r1, #8
 800245e:	4802      	ldr	r0, [pc, #8]	; (8002468 <toggleTraffic1Green+0x10>)
 8002460:	f000 fd01 	bl	8002e66 <HAL_GPIO_TogglePin>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40010c00 	.word	0x40010c00

0800246c <toggleTraffic2Green>:

void toggleTraffic2Green(){
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8002470:	2110      	movs	r1, #16
 8002472:	4802      	ldr	r0, [pc, #8]	; (800247c <toggleTraffic2Green+0x10>)
 8002474:	f000 fcf7 	bl	8002e66 <HAL_GPIO_TogglePin>
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40010c00 	.word	0x40010c00

08002480 <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8002484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <toggleTraffic1Yellow+0x1c>)
 800248a:	f000 fcec 	bl	8002e66 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 800248e:	2108      	movs	r1, #8
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <toggleTraffic1Yellow+0x20>)
 8002492:	f000 fce8 	bl	8002e66 <HAL_GPIO_TogglePin>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40010800 	.word	0x40010800
 80024a0:	40010c00 	.word	0x40010c00

080024a4 <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 80024a8:	2120      	movs	r1, #32
 80024aa:	4804      	ldr	r0, [pc, #16]	; (80024bc <toggleTraffic2Yellow+0x18>)
 80024ac:	f000 fcdb 	bl	8002e66 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 80024b0:	2110      	movs	r1, #16
 80024b2:	4802      	ldr	r0, [pc, #8]	; (80024bc <toggleTraffic2Yellow+0x18>)
 80024b4:	f000 fcd7 	bl	8002e66 <HAL_GPIO_TogglePin>
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40010c00 	.word	0x40010c00

080024c0 <acceptTraffic1Red>:

void acceptTraffic1Red(){
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
	max_red1 = counter;
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <acceptTraffic1Red+0x34>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <acceptTraffic1Red+0x38>)
 80024ca:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <acceptTraffic1Red+0x38>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <acceptTraffic1Red+0x3c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	dc02      	bgt.n	80024de <acceptTraffic1Red+0x1e>
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <acceptTraffic1Red+0x3c>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <acceptTraffic1Red+0x38>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <acceptTraffic1Red+0x3c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <acceptTraffic1Red+0x40>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	20000120 	.word	0x20000120
 80024f8:	20000010 	.word	0x20000010
 80024fc:	20000024 	.word	0x20000024
 8002500:	20000020 	.word	0x20000020

08002504 <acceptTraffic2Red>:

void acceptTraffic2Red(){
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
	max_red2 = counter;
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <acceptTraffic2Red+0x34>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0b      	ldr	r2, [pc, #44]	; (800253c <acceptTraffic2Red+0x38>)
 800250e:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <acceptTraffic2Red+0x38>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <acceptTraffic2Red+0x3c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	dc02      	bgt.n	8002522 <acceptTraffic2Red+0x1e>
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <acceptTraffic2Red+0x3c>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <acceptTraffic2Red+0x38>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <acceptTraffic2Red+0x3c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	4a05      	ldr	r2, [pc, #20]	; (8002544 <acceptTraffic2Red+0x40>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000120 	.word	0x20000120
 800253c:	2000001c 	.word	0x2000001c
 8002540:	20000018 	.word	0x20000018
 8002544:	20000014 	.word	0x20000014

08002548 <acceptTraffic1Green>:

void acceptTraffic1Green(){
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
	max_green1 = counter;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <acceptTraffic1Green+0x24>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <acceptTraffic1Green+0x28>)
 8002552:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <acceptTraffic1Green+0x2c>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <acceptTraffic1Green+0x28>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	4a06      	ldr	r2, [pc, #24]	; (8002578 <acceptTraffic1Green+0x30>)
 8002560:	6013      	str	r3, [r2, #0]
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000120 	.word	0x20000120
 8002570:	20000014 	.word	0x20000014
 8002574:	2000001c 	.word	0x2000001c
 8002578:	20000018 	.word	0x20000018

0800257c <acceptTraffic2Green>:

void acceptTraffic2Green(){
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	max_green2 = counter;
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <acceptTraffic2Green+0x24>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <acceptTraffic2Green+0x28>)
 8002586:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <acceptTraffic2Green+0x2c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <acceptTraffic2Green+0x28>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	4a06      	ldr	r2, [pc, #24]	; (80025ac <acceptTraffic2Green+0x30>)
 8002594:	6013      	str	r3, [r2, #0]
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000120 	.word	0x20000120
 80025a4:	20000020 	.word	0x20000020
 80025a8:	20000010 	.word	0x20000010
 80025ac:	20000024 	.word	0x20000024

080025b0 <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <acceptTraffic1Yellow+0x24>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <acceptTraffic1Yellow+0x28>)
 80025ba:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <acceptTraffic1Yellow+0x2c>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <acceptTraffic1Yellow+0x28>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <acceptTraffic1Yellow+0x30>)
 80025c8:	6013      	str	r3, [r2, #0]
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000120 	.word	0x20000120
 80025d8:	20000018 	.word	0x20000018
 80025dc:	2000001c 	.word	0x2000001c
 80025e0:	20000014 	.word	0x20000014

080025e4 <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <acceptTraffic2Yellow+0x24>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <acceptTraffic2Yellow+0x28>)
 80025ee:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <acceptTraffic2Yellow+0x2c>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <acceptTraffic2Yellow+0x28>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a06      	ldr	r2, [pc, #24]	; (8002614 <acceptTraffic2Yellow+0x30>)
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000120 	.word	0x20000120
 800260c:	20000024 	.word	0x20000024
 8002610:	20000010 	.word	0x20000010
 8002614:	20000020 	.word	0x20000020

08002618 <displayCounter>:

void displayCounter(){
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#", counter/10, counter%10);
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <displayCounter+0x48>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a10      	ldr	r2, [pc, #64]	; (8002664 <displayCounter+0x4c>)
 8002622:	fb82 1203 	smull	r1, r2, r2, r3
 8002626:	1092      	asrs	r2, r2, #2
 8002628:	17db      	asrs	r3, r3, #31
 800262a:	1ad0      	subs	r0, r2, r3
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <displayCounter+0x48>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <displayCounter+0x4c>)
 8002632:	fb83 1302 	smull	r1, r3, r3, r2
 8002636:	1099      	asrs	r1, r3, #2
 8002638:	17d3      	asrs	r3, r2, #31
 800263a:	1ac9      	subs	r1, r1, r3
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	1ad1      	subs	r1, r2, r3
 8002646:	460b      	mov	r3, r1
 8002648:	4602      	mov	r2, r0
 800264a:	4907      	ldr	r1, [pc, #28]	; (8002668 <displayCounter+0x50>)
 800264c:	4807      	ldr	r0, [pc, #28]	; (800266c <displayCounter+0x54>)
 800264e:	f002 fc0d 	bl	8004e6c <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 9);
 8002652:	2209      	movs	r2, #9
 8002654:	4905      	ldr	r1, [pc, #20]	; (800266c <displayCounter+0x54>)
 8002656:	4806      	ldr	r0, [pc, #24]	; (8002670 <displayCounter+0x58>)
 8002658:	f001 ffe3 	bl	8004622 <HAL_UART_Transmit_IT>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000120 	.word	0x20000120
 8002664:	66666667 	.word	0x66666667
 8002668:	080056f8 	.word	0x080056f8
 800266c:	20000124 	.word	0x20000124
 8002670:	200001ec 	.word	0x200001ec

08002674 <Reset_Handler>:
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <LoopFillZerobss+0x12>)
 8002676:	490d      	ldr	r1, [pc, #52]	; (80026ac <LoopFillZerobss+0x16>)
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <LoopFillZerobss+0x1a>)
 800267a:	2300      	movs	r3, #0
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:
 800267e:	58d4      	ldr	r4, [r2, r3]
 8002680:	50c4      	str	r4, [r0, r3]
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:
 8002684:	18c4      	adds	r4, r0, r3
 8002686:	428c      	cmp	r4, r1
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <LoopFillZerobss+0x1e>)
 800268c:	4c0a      	ldr	r4, [pc, #40]	; (80026b8 <LoopFillZerobss+0x22>)
 800268e:	2300      	movs	r3, #0
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:
 8002696:	42a2      	cmp	r2, r4
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>
 800269a:	f7ff fd71 	bl	8002180 <SystemInit>
 800269e:	f002 fbb9 	bl	8004e14 <__libc_init_array>
 80026a2:	f7ff f87f 	bl	80017a4 <main>
 80026a6:	4770      	bx	lr
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000098 	.word	0x20000098
 80026b0:	08005768 	.word	0x08005768
 80026b4:	20000098 	.word	0x20000098
 80026b8:	200003d4 	.word	0x200003d4

080026bc <ADC1_2_IRQHandler>:
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <HAL_Init>:
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_Init+0x28>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_Init+0x28>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f923 	bl	800291c <HAL_NVIC_SetPriorityGrouping>
 80026d6:	200f      	movs	r0, #15
 80026d8:	f000 f808 	bl	80026ec <HAL_InitTick>
 80026dc:	f7ff fbf0 	bl	8001ec0 <HAL_MspInit>
 80026e0:	2300      	movs	r3, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000

080026ec <HAL_InitTick>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f93b 	bl	8002986 <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f000 f903 	bl	8002932 <HAL_NVIC_SetPriority>
 800272c:	4a06      	ldr	r2, [pc, #24]	; (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
 8002736:	2301      	movs	r3, #1
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000028 	.word	0x20000028
 8002744:	20000030 	.word	0x20000030
 8002748:	2000002c 	.word	0x2000002c

0800274c <HAL_IncTick>:
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_IncTick+0x1c>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_IncTick+0x20>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_IncTick+0x20>)
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	20000030 	.word	0x20000030
 800276c:	200003c0 	.word	0x200003c0

08002770 <HAL_GetTick>:
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <HAL_GetTick+0x10>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	200003c0 	.word	0x200003c0

08002784 <__NVIC_SetPriorityGrouping>:
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_GetPriorityGrouping>:
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__NVIC_GetPriorityGrouping+0x18>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_EnableIRQ>:
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db0b      	blt.n	8002812 <__NVIC_EnableIRQ+0x2a>
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	4906      	ldr	r1, [pc, #24]	; (800281c <__NVIC_EnableIRQ+0x34>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2001      	movs	r0, #1
 800280a:	fa00 f202 	lsl.w	r2, r0, r2
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_SetPriority>:
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	; (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	; (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
 80028cc:	4313      	orrs	r3, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <SysTick_Config>:
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f7ff ff90 	bl	8002820 <__NVIC_SetPriority>
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff2d 	bl	8002784 <__NVIC_SetPriorityGrouping>
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f7ff ff42 	bl	80027cc <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff90 	bl	8002874 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5f 	bl	8002820 <__NVIC_SetPriority>
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff35 	bl	80027e8 <__NVIC_EnableIRQ>
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_DMA_Abort>:
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d008      	beq.n	80029c6 <HAL_DMA_Abort+0x28>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2020 	strb.w	r2, [r3, #32]
 80029c2:	2301      	movs	r3, #1
 80029c4:	e020      	b.n	8002a08 <HAL_DMA_Abort+0x6a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 020e 	bic.w	r2, r2, #14
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2020 	strb.w	r2, [r3, #32]
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_DMA_Abort_IT>:
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d005      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x22>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e051      	b.n	8002ada <HAL_DMA_Abort_IT+0xc6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 020e 	bic.w	r2, r2, #14
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_DMA_Abort_IT+0xd0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d029      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0xa0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_DMA_Abort_IT+0xd4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d022      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x9c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_DMA_Abort_IT+0xd8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d01a      	beq.n	8002aaa <HAL_DMA_Abort_IT+0x96>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_DMA_Abort_IT+0xdc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d012      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x90>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <HAL_DMA_Abort_IT+0xe0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00a      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x8a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_DMA_Abort_IT+0xe4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d102      	bne.n	8002a98 <HAL_DMA_Abort_IT+0x84>
 8002a92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a96:	e00e      	b.n	8002ab6 <HAL_DMA_Abort_IT+0xa2>
 8002a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a9c:	e00b      	b.n	8002ab6 <HAL_DMA_Abort_IT+0xa2>
 8002a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa2:	e008      	b.n	8002ab6 <HAL_DMA_Abort_IT+0xa2>
 8002aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa8:	e005      	b.n	8002ab6 <HAL_DMA_Abort_IT+0xa2>
 8002aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aae:	e002      	b.n	8002ab6 <HAL_DMA_Abort_IT+0xa2>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	e000      	b.n	8002ab6 <HAL_DMA_Abort_IT+0xa2>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <HAL_DMA_Abort_IT+0xe8>)
 8002ab8:	6053      	str	r3, [r2, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_DMA_Abort_IT+0xc6>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40020008 	.word	0x40020008
 8002ae8:	4002001c 	.word	0x4002001c
 8002aec:	40020030 	.word	0x40020030
 8002af0:	40020044 	.word	0x40020044
 8002af4:	40020058 	.word	0x40020058
 8002af8:	4002006c 	.word	0x4002006c
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_GPIO_Init>:
 8002b00:	b480      	push	{r7}
 8002b02:	b08b      	sub	sp, #44	; 0x2c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	e169      	b.n	8002de8 <HAL_GPIO_Init+0x2e8>
 8002b14:	2201      	movs	r2, #1
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 8158 	bne.w	8002de2 <HAL_GPIO_Init+0x2e2>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a9a      	ldr	r2, [pc, #616]	; (8002da0 <HAL_GPIO_Init+0x2a0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d05e      	beq.n	8002bfa <HAL_GPIO_Init+0xfa>
 8002b3c:	4a98      	ldr	r2, [pc, #608]	; (8002da0 <HAL_GPIO_Init+0x2a0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d875      	bhi.n	8002c2e <HAL_GPIO_Init+0x12e>
 8002b42:	4a98      	ldr	r2, [pc, #608]	; (8002da4 <HAL_GPIO_Init+0x2a4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d058      	beq.n	8002bfa <HAL_GPIO_Init+0xfa>
 8002b48:	4a96      	ldr	r2, [pc, #600]	; (8002da4 <HAL_GPIO_Init+0x2a4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d86f      	bhi.n	8002c2e <HAL_GPIO_Init+0x12e>
 8002b4e:	4a96      	ldr	r2, [pc, #600]	; (8002da8 <HAL_GPIO_Init+0x2a8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d052      	beq.n	8002bfa <HAL_GPIO_Init+0xfa>
 8002b54:	4a94      	ldr	r2, [pc, #592]	; (8002da8 <HAL_GPIO_Init+0x2a8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d869      	bhi.n	8002c2e <HAL_GPIO_Init+0x12e>
 8002b5a:	4a94      	ldr	r2, [pc, #592]	; (8002dac <HAL_GPIO_Init+0x2ac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d04c      	beq.n	8002bfa <HAL_GPIO_Init+0xfa>
 8002b60:	4a92      	ldr	r2, [pc, #584]	; (8002dac <HAL_GPIO_Init+0x2ac>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d863      	bhi.n	8002c2e <HAL_GPIO_Init+0x12e>
 8002b66:	4a92      	ldr	r2, [pc, #584]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d046      	beq.n	8002bfa <HAL_GPIO_Init+0xfa>
 8002b6c:	4a90      	ldr	r2, [pc, #576]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d85d      	bhi.n	8002c2e <HAL_GPIO_Init+0x12e>
 8002b72:	2b12      	cmp	r3, #18
 8002b74:	d82a      	bhi.n	8002bcc <HAL_GPIO_Init+0xcc>
 8002b76:	2b12      	cmp	r3, #18
 8002b78:	d859      	bhi.n	8002c2e <HAL_GPIO_Init+0x12e>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <HAL_GPIO_Init+0x80>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bfb 	.word	0x08002bfb
 8002b84:	08002bd5 	.word	0x08002bd5
 8002b88:	08002be7 	.word	0x08002be7
 8002b8c:	08002c29 	.word	0x08002c29
 8002b90:	08002c2f 	.word	0x08002c2f
 8002b94:	08002c2f 	.word	0x08002c2f
 8002b98:	08002c2f 	.word	0x08002c2f
 8002b9c:	08002c2f 	.word	0x08002c2f
 8002ba0:	08002c2f 	.word	0x08002c2f
 8002ba4:	08002c2f 	.word	0x08002c2f
 8002ba8:	08002c2f 	.word	0x08002c2f
 8002bac:	08002c2f 	.word	0x08002c2f
 8002bb0:	08002c2f 	.word	0x08002c2f
 8002bb4:	08002c2f 	.word	0x08002c2f
 8002bb8:	08002c2f 	.word	0x08002c2f
 8002bbc:	08002c2f 	.word	0x08002c2f
 8002bc0:	08002c2f 	.word	0x08002c2f
 8002bc4:	08002bdd 	.word	0x08002bdd
 8002bc8:	08002bf1 	.word	0x08002bf1
 8002bcc:	4a79      	ldr	r2, [pc, #484]	; (8002db4 <HAL_GPIO_Init+0x2b4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0xfa>
 8002bd2:	e02c      	b.n	8002c2e <HAL_GPIO_Init+0x12e>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	e029      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	3304      	adds	r3, #4
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	e024      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	3308      	adds	r3, #8
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	e01f      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	e01a      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_GPIO_Init+0x108>
 8002c02:	2304      	movs	r3, #4
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	e013      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_GPIO_Init+0x11c>
 8002c10:	2308      	movs	r3, #8
 8002c12:	623b      	str	r3, [r7, #32]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e009      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	615a      	str	r2, [r3, #20]
 8002c26:	e003      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	e000      	b.n	8002c30 <HAL_GPIO_Init+0x130>
 8002c2e:	bf00      	nop
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2bff      	cmp	r3, #255	; 0xff
 8002c34:	d801      	bhi.n	8002c3a <HAL_GPIO_Init+0x13a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	e001      	b.n	8002c3e <HAL_GPIO_Init+0x13e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2bff      	cmp	r3, #255	; 0xff
 8002c44:	d802      	bhi.n	8002c4c <HAL_GPIO_Init+0x14c>
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	e002      	b.n	8002c52 <HAL_GPIO_Init+0x152>
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	3b08      	subs	r3, #8
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	210f      	movs	r1, #15
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	401a      	ands	r2, r3
 8002c64:	6a39      	ldr	r1, [r7, #32]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80b1 	beq.w	8002de2 <HAL_GPIO_Init+0x2e2>
 8002c80:	4b4d      	ldr	r3, [pc, #308]	; (8002db8 <HAL_GPIO_Init+0x2b8>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4a4c      	ldr	r2, [pc, #304]	; (8002db8 <HAL_GPIO_Init+0x2b8>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6193      	str	r3, [r2, #24]
 8002c8c:	4b4a      	ldr	r3, [pc, #296]	; (8002db8 <HAL_GPIO_Init+0x2b8>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a48      	ldr	r2, [pc, #288]	; (8002dbc <HAL_GPIO_Init+0x2bc>)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	220f      	movs	r2, #15
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <HAL_GPIO_Init+0x2c0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_GPIO_Init+0x1ec>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3f      	ldr	r2, [pc, #252]	; (8002dc4 <HAL_GPIO_Init+0x2c4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00d      	beq.n	8002ce8 <HAL_GPIO_Init+0x1e8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <HAL_GPIO_Init+0x2c8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <HAL_GPIO_Init+0x1e4>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <HAL_GPIO_Init+0x2cc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <HAL_GPIO_Init+0x1e0>
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e006      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e004      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002cec:	2300      	movs	r3, #0
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	f002 0203 	and.w	r2, r2, #3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	492f      	ldr	r1, [pc, #188]	; (8002dbc <HAL_GPIO_Init+0x2bc>)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x226>
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	492c      	ldr	r1, [pc, #176]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x234>
 8002d26:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4928      	ldr	r1, [pc, #160]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_GPIO_Init+0x24e>
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4922      	ldr	r1, [pc, #136]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x25c>
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	491e      	ldr	r1, [pc, #120]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <HAL_GPIO_Init+0x276>
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4918      	ldr	r1, [pc, #96]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
 8002d74:	e006      	b.n	8002d84 <HAL_GPIO_Init+0x284>
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	4914      	ldr	r1, [pc, #80]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d021      	beq.n	8002dd4 <HAL_GPIO_Init+0x2d4>
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	490e      	ldr	r1, [pc, #56]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
 8002d9c:	e021      	b.n	8002de2 <HAL_GPIO_Init+0x2e2>
 8002d9e:	bf00      	nop
 8002da0:	10320000 	.word	0x10320000
 8002da4:	10310000 	.word	0x10310000
 8002da8:	10220000 	.word	0x10220000
 8002dac:	10210000 	.word	0x10210000
 8002db0:	10120000 	.word	0x10120000
 8002db4:	10110000 	.word	0x10110000
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	40010c00 	.word	0x40010c00
 8002dc8:	40011000 	.word	0x40011000
 8002dcc:	40011400 	.word	0x40011400
 8002dd0:	40010400 	.word	0x40010400
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	4909      	ldr	r1, [pc, #36]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	60cb      	str	r3, [r1, #12]
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	3301      	adds	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f47f ae8e 	bne.w	8002b14 <HAL_GPIO_Init+0x14>
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	372c      	adds	r7, #44	; 0x2c
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	40010400 	.word	0x40010400

08002e08 <HAL_GPIO_ReadPin>:
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_GPIO_ReadPin+0x1e>
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e001      	b.n	8002e2a <HAL_GPIO_ReadPin+0x22>
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <HAL_GPIO_WritePin>:
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	807b      	strh	r3, [r7, #2]
 8002e42:	4613      	mov	r3, r2
 8002e44:	707b      	strb	r3, [r7, #1]
 8002e46:	787b      	ldrb	r3, [r7, #1]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_WritePin+0x1e>
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	e003      	b.n	8002e5c <HAL_GPIO_WritePin+0x26>
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	041a      	lsls	r2, r3, #16
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_GPIO_TogglePin>:
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	807b      	strh	r3, [r7, #2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	041a      	lsls	r2, r3, #16
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	400b      	ands	r3, r1
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_RCC_OscConfig>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x12>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e26c      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8087 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x12e>
 8002eb8:	4b92      	ldr	r3, [pc, #584]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d00c      	beq.n	8002ede <HAL_RCC_OscConfig+0x46>
 8002ec4:	4b8f      	ldr	r3, [pc, #572]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d112      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x5e>
 8002ed0:	4b8c      	ldr	r3, [pc, #560]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d10b      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x5e>
 8002ede:	4b89      	ldr	r3, [pc, #548]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d06c      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x12c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d168      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x12c>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e246      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x76>
 8002f00:	4b80      	ldr	r3, [pc, #512]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a7f      	ldr	r2, [pc, #508]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e02e      	b.n	8002f6c <HAL_RCC_OscConfig+0xd4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x98>
 8002f16:	4b7b      	ldr	r3, [pc, #492]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7a      	ldr	r2, [pc, #488]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b78      	ldr	r3, [pc, #480]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a77      	ldr	r2, [pc, #476]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0xd4>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0xbc>
 8002f3a:	4b72      	ldr	r3, [pc, #456]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a71      	ldr	r2, [pc, #452]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6e      	ldr	r2, [pc, #440]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xd4>
 8002f54:	4b6b      	ldr	r3, [pc, #428]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6a      	ldr	r2, [pc, #424]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a67      	ldr	r2, [pc, #412]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_OscConfig+0x104>
 8002f74:	f7ff fbfc 	bl	8002770 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xf6>
 8002f7c:	f7ff fbf8 	bl	8002770 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xf6>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1fa      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8002f8e:	4b5d      	ldr	r3, [pc, #372]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0xe4>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x12e>
 8002f9c:	f7ff fbe8 	bl	8002770 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x11e>
 8002fa4:	f7ff fbe4 	bl	8002770 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x11e>
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1e6      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8002fb6:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x10c>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x12e>
 8002fc4:	bf00      	nop
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_OscConfig+0x202>
 8002fd2:	4b4c      	ldr	r3, [pc, #304]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x15e>
 8002fde:	4b49      	ldr	r3, [pc, #292]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x18c>
 8002fea:	4b46      	ldr	r3, [pc, #280]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <HAL_RCC_OscConfig+0x18c>
 8002ff6:	4b43      	ldr	r3, [pc, #268]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x176>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x176>
 800300a:	2301      	movs	r3, #1
 800300c:	e1ba      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4939      	ldr	r1, [pc, #228]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
 8003022:	e03a      	b.n	800309a <HAL_RCC_OscConfig+0x202>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_OscConfig+0x1d6>
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f7ff fb9d 	bl	8002770 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x1b4>
 800303a:	f7ff fb99 	bl	8002770 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x1b4>
 8003048:	2303      	movs	r3, #3
 800304a:	e19b      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x1a2>
 8003058:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4927      	ldr	r1, [pc, #156]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x202>
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <HAL_RCC_OscConfig+0x270>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f7ff fb7c 	bl	8002770 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x1f6>
 800307c:	f7ff fb78 	bl	8002770 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x1f6>
 800308a:	2303      	movs	r3, #3
 800308c:	e17a      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x1e4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03a      	beq.n	800311c <HAL_RCC_OscConfig+0x284>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <HAL_RCC_OscConfig+0x24a>
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_RCC_OscConfig+0x274>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f7ff fb5c 	bl	8002770 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x236>
 80030bc:	f7ff fb58 	bl	8002770 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x236>
 80030ca:	2303      	movs	r3, #3
 80030cc:	e15a      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x224>
 80030da:	2001      	movs	r0, #1
 80030dc:	f000 fad8 	bl	8003690 <RCC_Delay>
 80030e0:	e01c      	b.n	800311c <HAL_RCC_OscConfig+0x284>
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_RCC_OscConfig+0x274>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f7ff fb42 	bl	8002770 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]
 80030ee:	e00f      	b.n	8003110 <HAL_RCC_OscConfig+0x278>
 80030f0:	f7ff fb3e 	bl	8002770 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d908      	bls.n	8003110 <HAL_RCC_OscConfig+0x278>
 80030fe:	2303      	movs	r3, #3
 8003100:	e140      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	42420000 	.word	0x42420000
 800310c:	42420480 	.word	0x42420480
 8003110:	4b9e      	ldr	r3, [pc, #632]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e9      	bne.n	80030f0 <HAL_RCC_OscConfig+0x258>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a6 	beq.w	8003276 <HAL_RCC_OscConfig+0x3de>
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]
 800312e:	4b97      	ldr	r3, [pc, #604]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10d      	bne.n	8003156 <HAL_RCC_OscConfig+0x2be>
 800313a:	4b94      	ldr	r3, [pc, #592]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a93      	ldr	r2, [pc, #588]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
 8003156:	4b8e      	ldr	r3, [pc, #568]	; (8003390 <HAL_RCC_OscConfig+0x4f8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d118      	bne.n	8003194 <HAL_RCC_OscConfig+0x2fc>
 8003162:	4b8b      	ldr	r3, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x4f8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a8a      	ldr	r2, [pc, #552]	; (8003390 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	f7ff faff 	bl	8002770 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x2f0>
 8003176:	f7ff fafb 	bl	8002770 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b64      	cmp	r3, #100	; 0x64
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x2f0>
 8003184:	2303      	movs	r3, #3
 8003186:	e0fd      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8003188:	4b81      	ldr	r3, [pc, #516]	; (8003390 <HAL_RCC_OscConfig+0x4f8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x2de>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x312>
 800319c:	4b7b      	ldr	r3, [pc, #492]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a7a      	ldr	r2, [pc, #488]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	e02d      	b.n	8003206 <HAL_RCC_OscConfig+0x36e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x334>
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a75      	ldr	r2, [pc, #468]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6213      	str	r3, [r2, #32]
 80031be:	4b73      	ldr	r3, [pc, #460]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4a72      	ldr	r2, [pc, #456]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	6213      	str	r3, [r2, #32]
 80031ca:	e01c      	b.n	8003206 <HAL_RCC_OscConfig+0x36e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d10c      	bne.n	80031ee <HAL_RCC_OscConfig+0x356>
 80031d4:	4b6d      	ldr	r3, [pc, #436]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a6c      	ldr	r2, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4a69      	ldr	r2, [pc, #420]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6213      	str	r3, [r2, #32]
 80031ec:	e00b      	b.n	8003206 <HAL_RCC_OscConfig+0x36e>
 80031ee:	4b67      	ldr	r3, [pc, #412]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4a66      	ldr	r2, [pc, #408]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	6213      	str	r3, [r2, #32]
 80031fa:	4b64      	ldr	r3, [pc, #400]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a63      	ldr	r2, [pc, #396]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d015      	beq.n	800323a <HAL_RCC_OscConfig+0x3a2>
 800320e:	f7ff faaf 	bl	8002770 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x394>
 8003216:	f7ff faab 	bl	8002770 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x394>
 8003228:	2303      	movs	r3, #3
 800322a:	e0ab      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 800322c:	4b57      	ldr	r3, [pc, #348]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ee      	beq.n	8003216 <HAL_RCC_OscConfig+0x37e>
 8003238:	e014      	b.n	8003264 <HAL_RCC_OscConfig+0x3cc>
 800323a:	f7ff fa99 	bl	8002770 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x3c0>
 8003242:	f7ff fa95 	bl	8002770 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x3c0>
 8003254:	2303      	movs	r3, #3
 8003256:	e095      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8003258:	4b4c      	ldr	r3, [pc, #304]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ee      	bne.n	8003242 <HAL_RCC_OscConfig+0x3aa>
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <HAL_RCC_OscConfig+0x3de>
 800326a:	4b48      	ldr	r3, [pc, #288]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4a47      	ldr	r2, [pc, #284]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003274:	61d3      	str	r3, [r2, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8081 	beq.w	8003382 <HAL_RCC_OscConfig+0x4ea>
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b08      	cmp	r3, #8
 800328a:	d061      	beq.n	8003350 <HAL_RCC_OscConfig+0x4b8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d146      	bne.n	8003322 <HAL_RCC_OscConfig+0x48a>
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <HAL_RCC_OscConfig+0x4fc>)
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	f7ff fa69 	bl	8002770 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x41c>
 80032a2:	f7ff fa65 	bl	8002770 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x41c>
 80032b0:	2303      	movs	r3, #3
 80032b2:	e067      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x40a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d108      	bne.n	80032dc <HAL_RCC_OscConfig+0x444>
 80032ca:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	492d      	ldr	r1, [pc, #180]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a19      	ldr	r1, [r3, #32]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	430b      	orrs	r3, r1
 80032ee:	4927      	ldr	r1, [pc, #156]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_OscConfig+0x4fc>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f7ff fa39 	bl	8002770 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x47c>
 8003302:	f7ff fa35 	bl	8002770 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x47c>
 8003310:	2303      	movs	r3, #3
 8003312:	e037      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x46a>
 8003320:	e02f      	b.n	8003382 <HAL_RCC_OscConfig+0x4ea>
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_RCC_OscConfig+0x4fc>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f7ff fa22 	bl	8002770 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x4aa>
 8003330:	f7ff fa1e 	bl	8002770 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x4aa>
 800333e:	2303      	movs	r3, #3
 8003340:	e020      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x498>
 800334e:	e018      	b.n	8003382 <HAL_RCC_OscConfig+0x4ea>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_RCC_OscConfig+0x4c4>
 8003358:	2301      	movs	r3, #1
 800335a:	e013      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x4f4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	429a      	cmp	r2, r3
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x4e6>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	429a      	cmp	r2, r3
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x4ea>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_RCC_OscConfig+0x4ec>
 8003382:	2300      	movs	r3, #0
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	40007000 	.word	0x40007000
 8003394:	42420060 	.word	0x42420060

08003398 <HAL_RCC_ClockConfig>:
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x14>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0d0      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d910      	bls.n	80033dc <HAL_RCC_ClockConfig+0x44>
 80033ba:	4b67      	ldr	r3, [pc, #412]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	4965      	ldr	r1, [pc, #404]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x44>
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b8      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_ClockConfig+0x92>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x68>
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033fe:	6053      	str	r3, [r2, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x80>
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003416:	6053      	str	r3, [r2, #4]
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	494d      	ldr	r1, [pc, #308]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d040      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x120>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xb6>
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d115      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
 800344a:	2301      	movs	r3, #1
 800344c:	e07f      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xce>
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
 8003462:	2301      	movs	r3, #1
 8003464:	e073      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
 8003472:	2301      	movs	r3, #1
 8003474:	e06b      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4936      	ldr	r1, [pc, #216]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	f7ff f972 	bl	8002770 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
 8003490:	f7ff f96e 	bl	8002770 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e053      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0xf8>
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d210      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x150>
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0207 	bic.w	r2, r3, #7
 80034ce:	4922      	ldr	r1, [pc, #136]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x150>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e032      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x16e>
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4916      	ldr	r1, [pc, #88]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x18e>
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	490e      	ldr	r1, [pc, #56]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
 8003526:	f000 f821 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800352a:	4602      	mov	r2, r0
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	490a      	ldr	r1, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	5ccb      	ldrb	r3, [r1, r3]
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1cc>)
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1d0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f8d0 	bl	80026ec <HAL_InitTick>
 800354c:	2300      	movs	r3, #0
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40022000 	.word	0x40022000
 800355c:	40021000 	.word	0x40021000
 8003560:	08005714 	.word	0x08005714
 8003564:	20000028 	.word	0x20000028
 8003568:	2000002c 	.word	0x2000002c

0800356c <HAL_RCC_GetSysClockFreq>:
 800356c:	b490      	push	{r4, r7}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	4b2a      	ldr	r3, [pc, #168]	; (800361c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003574:	1d3c      	adds	r4, r7, #4
 8003576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800357c:	f240 2301 	movw	r3, #513	; 0x201
 8003580:	803b      	strh	r3, [r7, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61fb      	str	r3, [r7, #28]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x40>
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x46>
 80035aa:	e02d      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x9c>
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	e02d      	b.n	800360e <HAL_RCC_GetSysClockFreq+0xa2>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	0c9b      	lsrs	r3, r3, #18
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035be:	4413      	add	r3, r2
 80035c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x8c>
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c5b      	lsrs	r3, r3, #17
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035de:	4413      	add	r3, r2
 80035e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ea:	fb02 f203 	mul.w	r2, r2, r3
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	e004      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x96>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4a0b      	ldr	r2, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0xa2>
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_GetSysClockFreq+0xb8>)
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	bf00      	nop
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	4618      	mov	r0, r3
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc90      	pop	{r4, r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	08005704 	.word	0x08005704
 8003620:	40021000 	.word	0x40021000
 8003624:	007a1200 	.word	0x007a1200
 8003628:	003d0900 	.word	0x003d0900

0800362c <HAL_RCC_GetHCLKFreq>:
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
 8003630:	4b02      	ldr	r3, [pc, #8]	; (800363c <HAL_RCC_GetHCLKFreq+0x10>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	20000028 	.word	0x20000028

08003640 <HAL_RCC_GetPCLK1Freq>:
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
 8003644:	f7ff fff2 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08005724 	.word	0x08005724

08003668 <HAL_RCC_GetPCLK2Freq>:
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
 800366c:	f7ff ffde 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0adb      	lsrs	r3, r3, #11
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08005724 	.word	0x08005724

08003690 <RCC_Delay>:
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <RCC_Delay+0x34>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <RCC_Delay+0x38>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0a5b      	lsrs	r3, r3, #9
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	bf00      	nop
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	60fa      	str	r2, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f9      	bne.n	80036ac <RCC_Delay+0x1c>
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	20000028 	.word	0x20000028
 80036c8:	10624dd3 	.word	0x10624dd3

080036cc <HAL_TIM_Base_Init>:
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_Base_Init+0x12>
 80036da:	2301      	movs	r3, #1
 80036dc:	e041      	b.n	8003762 <HAL_TIM_Base_Init+0x96>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_Base_Init+0x2c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fc16 	bl	8001f24 <HAL_TIM_Base_MspInit>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 fc28 	bl	8003f60 <TIM_Base_SetConfig>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003760:	2300      	movs	r3, #0
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_TIM_Base_Start_IT>:
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x18>
 8003780:	2301      	movs	r3, #1
 8003782:	e03a      	b.n	80037fa <HAL_TIM_Base_Start_IT+0x8e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_TIM_Base_Start_IT+0x98>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x58>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x58>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a14      	ldr	r2, [pc, #80]	; (8003808 <HAL_TIM_Base_Start_IT+0x9c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x58>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_TIM_Base_Start_IT+0xa0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_TIM_Base_Start_IT+0x7c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d010      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x8c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e007      	b.n	80037f8 <HAL_TIM_Base_Start_IT+0x8c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800

08003810 <HAL_TIM_PWM_Init>:
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_TIM_PWM_Init+0x12>
 800381e:	2301      	movs	r3, #1
 8003820:	e041      	b.n	80038a6 <HAL_TIM_PWM_Init+0x96>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_TIM_PWM_Init+0x2c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f839 	bl	80038ae <HAL_TIM_PWM_MspInit>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f000 fb86 	bl	8003f60 <TIM_Base_SetConfig>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038a4:	2300      	movs	r3, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_TIM_PWM_MspInit>:
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_PWM_Start>:
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_TIM_PWM_Start+0x24>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e022      	b.n	800392a <HAL_TIM_PWM_Start+0x6a>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d109      	bne.n	80038fe <HAL_TIM_PWM_Start+0x3e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e015      	b.n	800392a <HAL_TIM_PWM_Start+0x6a>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start+0x58>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e008      	b.n	800392a <HAL_TIM_PWM_Start+0x6a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_TIM_PWM_Start+0x72>
 800392e:	2301      	movs	r3, #1
 8003930:	e05e      	b.n	80039f0 <HAL_TIM_PWM_Start+0x130>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Start+0x82>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003940:	e013      	b.n	800396a <HAL_TIM_PWM_Start+0xaa>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d104      	bne.n	8003952 <HAL_TIM_PWM_Start+0x92>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003950:	e00b      	b.n	800396a <HAL_TIM_PWM_Start+0xaa>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d104      	bne.n	8003962 <HAL_TIM_PWM_Start+0xa2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	e003      	b.n	800396a <HAL_TIM_PWM_Start+0xaa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fd74 	bl	8004460 <TIM_CCxChannelCmd>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_TIM_PWM_Start+0x138>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d107      	bne.n	8003992 <HAL_TIM_PWM_Start+0xd2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_TIM_PWM_Start+0x138>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_TIM_PWM_Start+0xfa>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_PWM_Start+0xfa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a14      	ldr	r2, [pc, #80]	; (80039fc <HAL_TIM_PWM_Start+0x13c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_PWM_Start+0xfa>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <HAL_TIM_PWM_Start+0x140>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d111      	bne.n	80039de <HAL_TIM_PWM_Start+0x11e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d010      	beq.n	80039ee <HAL_TIM_PWM_Start+0x12e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e007      	b.n	80039ee <HAL_TIM_PWM_Start+0x12e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800

08003a04 <HAL_TIM_IRQHandler>:
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d122      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x5c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d11b      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x5c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0202 	mvn.w	r2, #2
 8003a30:	611a      	str	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	771a      	strb	r2, [r3, #28]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x4a>
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa6f 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0x56>
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa62 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa71 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d122      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0xb0>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0xb0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0204 	mvn.w	r2, #4
 8003a84:	611a      	str	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	771a      	strb	r2, [r3, #28]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0x9e>
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa45 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003aa0:	e005      	b.n	8003aae <HAL_TIM_IRQHandler+0xaa>
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa38 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa47 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x104>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x104>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0208 	mvn.w	r2, #8
 8003ad8:	611a      	str	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2204      	movs	r2, #4
 8003ade:	771a      	strb	r2, [r3, #28]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0xf2>
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa1b 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0xfe>
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa0e 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa1d 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x158>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x158>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0210 	mvn.w	r2, #16
 8003b2c:	611a      	str	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2208      	movs	r2, #8
 8003b32:	771a      	strb	r2, [r3, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x146>
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9f1 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0x152>
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9e4 	bl	8003f18 <HAL_TIM_OC_DelayElapsedCallback>
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f9f3 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x184>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x184>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0201 	mvn.w	r2, #1
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fe fb7c 	bl	8002280 <HAL_TIM_PeriodElapsedCallback>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d10e      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x1b0>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d107      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x1b0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bac:	611a      	str	r2, [r3, #16]
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fce1 	bl	8004576 <HAL_TIMEx_BreakCallback>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d10e      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x1dc>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d107      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x1dc>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd8:	611a      	str	r2, [r3, #16]
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9b7 	bl	8003f4e <HAL_TIM_TriggerCallback>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x208>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x208>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0220 	mvn.w	r2, #32
 8003c04:	611a      	str	r2, [r3, #16]
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fcac 	bl	8004564 <HAL_TIMEx_CommutCallback>
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_PWM_ConfigChannel>:
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e0ac      	b.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	f200 809f 	bhi.w	8003d7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003d7d 	.word	0x08003d7d
 8003c4c:	08003d7d 	.word	0x08003d7d
 8003c50:	08003d7d 	.word	0x08003d7d
 8003c54:	08003cb9 	.word	0x08003cb9
 8003c58:	08003d7d 	.word	0x08003d7d
 8003c5c:	08003d7d 	.word	0x08003d7d
 8003c60:	08003d7d 	.word	0x08003d7d
 8003c64:	08003cfb 	.word	0x08003cfb
 8003c68:	08003d7d 	.word	0x08003d7d
 8003c6c:	08003d7d 	.word	0x08003d7d
 8003c70:	08003d7d 	.word	0x08003d7d
 8003c74:	08003d3b 	.word	0x08003d3b
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f9d0 	bl	8004024 <TIM_OC1_SetConfig>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	619a      	str	r2, [r3, #24]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0204 	bic.w	r2, r2, #4
 8003ca2:	619a      	str	r2, [r3, #24]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	619a      	str	r2, [r3, #24]
 8003cb6:	e062      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fa16 	bl	80040f0 <TIM_OC2_SetConfig>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd2:	619a      	str	r2, [r3, #24]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	619a      	str	r2, [r3, #24]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	021a      	lsls	r2, r3, #8
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	619a      	str	r2, [r3, #24]
 8003cf8:	e041      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa5f 	bl	80041c4 <TIM_OC3_SetConfig>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0208 	orr.w	r2, r2, #8
 8003d14:	61da      	str	r2, [r3, #28]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0204 	bic.w	r2, r2, #4
 8003d24:	61da      	str	r2, [r3, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	61da      	str	r2, [r3, #28]
 8003d38:	e021      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 faa9 	bl	8004298 <TIM_OC4_SetConfig>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d54:	61da      	str	r2, [r3, #28]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	61da      	str	r2, [r3, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	021a      	lsls	r2, r3, #8
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	61da      	str	r2, [r3, #28]
 8003d7a:	e000      	b.n	8003d7e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003d7c:	bf00      	nop
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d86:	2300      	movs	r3, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_ConfigClockSource>:
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIM_ConfigClockSource+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0b3      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x180>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d03e      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0xd0>
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de6:	f200 8087 	bhi.w	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	f000 8085 	beq.w	8003efc <HAL_TIM_ConfigClockSource+0x16c>
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d87f      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003df8:	2b70      	cmp	r3, #112	; 0x70
 8003dfa:	d01a      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0xa2>
 8003dfc:	2b70      	cmp	r3, #112	; 0x70
 8003dfe:	d87b      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d050      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x116>
 8003e04:	2b60      	cmp	r3, #96	; 0x60
 8003e06:	d877      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e08:	2b50      	cmp	r3, #80	; 0x50
 8003e0a:	d03c      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0xf6>
 8003e0c:	2b50      	cmp	r3, #80	; 0x50
 8003e0e:	d873      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d058      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0x136>
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d86f      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d064      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d86b      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d060      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d867      	bhi.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05c      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d05a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x156>
 8003e30:	e062      	b.n	8003ef8 <HAL_TIM_ConfigClockSource+0x168>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f000 faee 	bl	8004422 <TIM_ETR_SetConfig>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e04e      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6899      	ldr	r1, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f000 fad7 	bl	8004422 <TIM_ETR_SetConfig>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	e03b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 fa4e 	bl	8004334 <TIM_TI1_ConfigInputStage>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2150      	movs	r1, #80	; 0x50
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 faa5 	bl	80043ee <TIM_ITRx_SetConfig>
 8003ea4:	e02b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6859      	ldr	r1, [r3, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f000 fa6c 	bl	8004390 <TIM_TI2_ConfigInputStage>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2160      	movs	r1, #96	; 0x60
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fa95 	bl	80043ee <TIM_ITRx_SetConfig>
 8003ec4:	e01b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f000 fa2e 	bl	8004334 <TIM_TI1_ConfigInputStage>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2140      	movs	r1, #64	; 0x40
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fa85 	bl	80043ee <TIM_ITRx_SetConfig>
 8003ee4:	e00b      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f000 fa7c 	bl	80043ee <TIM_ITRx_SetConfig>
 8003ef6:	e002      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x16e>
 8003efc:	bf00      	nop
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_OC_DelayElapsedCallback>:
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_IC_CaptureCallback>:
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_PWM_PulseFinishedCallback>:
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_TIM_TriggerCallback>:
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <TIM_Base_SetConfig>:
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a29      	ldr	r2, [pc, #164]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a26      	ldr	r2, [pc, #152]	; (800401c <TIM_Base_SetConfig+0xbc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x30>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	; (8004020 <TIM_Base_SetConfig+0xc0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x42>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <TIM_Base_SetConfig+0xbc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <TIM_Base_SetConfig+0xc0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0x74>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a07      	ldr	r2, [pc, #28]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d103      	bne.n	8004008 <TIM_Base_SetConfig+0xa8>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	615a      	str	r2, [r3, #20]
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800

08004024 <TIM_OC1_SetConfig>:
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 0302 	bic.w	r3, r3, #2
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <TIM_OC1_SetConfig+0xc8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10c      	bne.n	800409a <TIM_OC1_SetConfig+0x76>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0308 	bic.w	r3, r3, #8
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <TIM_OC1_SetConfig+0xc8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d111      	bne.n	80040c6 <TIM_OC1_SetConfig+0xa2>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	619a      	str	r2, [r3, #24]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	621a      	str	r2, [r3, #32]
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00

080040f0 <TIM_OC2_SetConfig>:
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 0210 	bic.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	621a      	str	r2, [r3, #32]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0320 	bic.w	r3, r3, #32
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <TIM_OC2_SetConfig+0xd0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10d      	bne.n	800416c <TIM_OC2_SetConfig+0x7c>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <TIM_OC2_SetConfig+0xd0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d113      	bne.n	800419c <TIM_OC2_SetConfig+0xac>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	619a      	str	r2, [r3, #24]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	40012c00 	.word	0x40012c00

080041c4 <TIM_OC3_SetConfig>:
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <TIM_OC3_SetConfig+0xd0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10d      	bne.n	800423e <TIM_OC3_SetConfig+0x7a>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <TIM_OC3_SetConfig+0xd0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d113      	bne.n	800426e <TIM_OC3_SetConfig+0xaa>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	61da      	str	r2, [r3, #28]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	621a      	str	r2, [r3, #32]
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00

08004298 <TIM_OC4_SetConfig>:
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	621a      	str	r2, [r3, #32]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	031b      	lsls	r3, r3, #12
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <TIM_OC4_SetConfig+0x98>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d109      	bne.n	800430c <TIM_OC4_SetConfig+0x74>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	61da      	str	r2, [r3, #28]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00

08004334 <TIM_TI1_ConfigInputStage>:
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0201 	bic.w	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	621a      	str	r2, [r3, #32]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f023 030a 	bic.w	r3, r3, #10
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	619a      	str	r2, [r3, #24]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <TIM_TI2_ConfigInputStage>:
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f023 0210 	bic.w	r2, r3, #16
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	621a      	str	r2, [r3, #32]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	031b      	lsls	r3, r3, #12
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	619a      	str	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	621a      	str	r2, [r3, #32]
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <TIM_ITRx_SetConfig>:
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	f043 0307 	orr.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <TIM_ETR_SetConfig>:
 8004422:	b480      	push	{r7}
 8004424:	b087      	sub	sp, #28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	431a      	orrs	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <TIM_CCxChannelCmd>:
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_MasterConfigSynchronization>:
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044bc:	2302      	movs	r3, #2
 80044be:	e046      	b.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d009      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a10      	ldr	r2, [pc, #64]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10c      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4313      	orrs	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800454c:	2300      	movs	r3, #0
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800

08004564 <HAL_TIMEx_CommutCallback>:
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_TIMEx_BreakCallback>:
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_UART_Init>:
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x12>
 8004596:	2301      	movs	r3, #1
 8004598:	e03f      	b.n	800461a <HAL_UART_Init+0x92>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_UART_Init+0x2c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd fd22 	bl	8001ff8 <HAL_UART_MspInit>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ca:	60da      	str	r2, [r3, #12]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb8d 	bl	8004cec <UART_SetConfig>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e0:	611a      	str	r2, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f0:	615a      	str	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004618:	2300      	movs	r3, #0
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_UART_Transmit_IT>:
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	4613      	mov	r3, r2
 800462e:	80fb      	strh	r3, [r7, #6]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b20      	cmp	r3, #32
 800463a:	d130      	bne.n	800469e <HAL_UART_Transmit_IT+0x7c>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_UART_Transmit_IT+0x26>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_UART_Transmit_IT+0x2a>
 8004648:	2301      	movs	r3, #1
 800464a:	e029      	b.n	80046a0 <HAL_UART_Transmit_IT+0x7e>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Transmit_IT+0x38>
 8004656:	2302      	movs	r3, #2
 8004658:	e022      	b.n	80046a0 <HAL_UART_Transmit_IT+0x7e>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	621a      	str	r2, [r3, #32]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	849a      	strh	r2, [r3, #36]	; 0x24
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2221      	movs	r2, #33	; 0x21
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_UART_Transmit_IT+0x7e>
 800469e:	2302      	movs	r3, #2
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_UART_IRQHandler>:
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	623b      	str	r3, [r7, #32]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <HAL_UART_IRQHandler+0x52>
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_UART_IRQHandler+0x52>
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_UART_IRQHandler+0x52>
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa4f 	bl	8004b9a <UART_Receive_IT>
 80046fc:	e17b      	b.n	80049f6 <HAL_UART_IRQHandler+0x34a>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80b1 	beq.w	8004868 <HAL_UART_IRQHandler+0x1bc>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_UART_IRQHandler+0x70>
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80a6 	beq.w	8004868 <HAL_UART_IRQHandler+0x1bc>
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_UART_IRQHandler+0x90>
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_IRQHandler+0x90>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_UART_IRQHandler+0xb0>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_UART_IRQHandler+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f043 0202 	orr.w	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_UART_IRQHandler+0xd0>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_UART_IRQHandler+0xd0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f043 0204 	orr.w	r2, r3, #4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00f      	beq.n	80047a6 <HAL_UART_IRQHandler+0xfa>
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <HAL_UART_IRQHandler+0xee>
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_UART_IRQHandler+0xfa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f043 0208 	orr.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 811e 	beq.w	80049ec <HAL_UART_IRQHandler+0x340>
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_UART_IRQHandler+0x11e>
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UART_IRQHandler+0x11e>
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f9e8 	bl	8004b9a <UART_Receive_IT>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <HAL_UART_IRQHandler+0x146>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d031      	beq.n	8004856 <HAL_UART_IRQHandler+0x1aa>
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f92a 	bl	8004a4c <UART_EndRxTransfer>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d023      	beq.n	800484e <HAL_UART_IRQHandler+0x1a2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	615a      	str	r2, [r3, #20]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d013      	beq.n	8004846 <HAL_UART_IRQHandler+0x19a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	4a76      	ldr	r2, [pc, #472]	; (80049fc <HAL_UART_IRQHandler+0x350>)
 8004824:	635a      	str	r2, [r3, #52]	; 0x34
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe f8f2 	bl	8002a14 <HAL_DMA_Abort_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_UART_IRQHandler+0x1b8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
 8004844:	e00e      	b.n	8004864 <HAL_UART_IRQHandler+0x1b8>
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8ec 	bl	8004a24 <HAL_UART_ErrorCallback>
 800484c:	e00a      	b.n	8004864 <HAL_UART_IRQHandler+0x1b8>
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8e8 	bl	8004a24 <HAL_UART_ErrorCallback>
 8004854:	e006      	b.n	8004864 <HAL_UART_IRQHandler+0x1b8>
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8e4 	bl	8004a24 <HAL_UART_ErrorCallback>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
 8004862:	e0c3      	b.n	80049ec <HAL_UART_IRQHandler+0x340>
 8004864:	bf00      	nop
 8004866:	e0c1      	b.n	80049ec <HAL_UART_IRQHandler+0x340>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	2b01      	cmp	r3, #1
 800486e:	f040 80a1 	bne.w	80049b4 <HAL_UART_IRQHandler+0x308>
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 809b 	beq.w	80049b4 <HAL_UART_IRQHandler+0x308>
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8095 	beq.w	80049b4 <HAL_UART_IRQHandler+0x308>
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d04e      	beq.n	800494c <HAL_UART_IRQHandler+0x2a0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	823b      	strh	r3, [r7, #16]
 80048b8:	8a3b      	ldrh	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8098 	beq.w	80049f0 <HAL_UART_IRQHandler+0x344>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c4:	8a3a      	ldrh	r2, [r7, #16]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	f080 8092 	bcs.w	80049f0 <HAL_UART_IRQHandler+0x344>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8a3a      	ldrh	r2, [r7, #16]
 80048d0:	85da      	strh	r2, [r3, #46]	; 0x2e
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d02b      	beq.n	8004934 <HAL_UART_IRQHandler+0x288>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	615a      	str	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490a:	615a      	str	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0210 	bic.w	r2, r2, #16
 8004928:	60da      	str	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe f835 	bl	800299e <HAL_DMA_Abort>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493c:	b29b      	uxth	r3, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	b29b      	uxth	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f876 	bl	8004a36 <HAL_UARTEx_RxEventCallback>
 800494a:	e051      	b.n	80049f0 <HAL_UART_IRQHandler+0x344>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004954:	b29b      	uxth	r3, r3
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	827b      	strh	r3, [r7, #18]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d047      	beq.n	80049f4 <HAL_UART_IRQHandler+0x348>
 8004964:	8a7b      	ldrh	r3, [r7, #18]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d044      	beq.n	80049f4 <HAL_UART_IRQHandler+0x348>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	615a      	str	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0210 	bic.w	r2, r2, #16
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	8a7b      	ldrh	r3, [r7, #18]
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f842 	bl	8004a36 <HAL_UARTEx_RxEventCallback>
 80049b2:	e01f      	b.n	80049f4 <HAL_UART_IRQHandler+0x348>
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_UART_IRQHandler+0x324>
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_UART_IRQHandler+0x324>
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f87f 	bl	8004acc <UART_Transmit_IT>
 80049ce:	e012      	b.n	80049f6 <HAL_UART_IRQHandler+0x34a>
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <HAL_UART_IRQHandler+0x34a>
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_UART_IRQHandler+0x34a>
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8c0 	bl	8004b6a <UART_EndTransmit_IT>
 80049ea:	e004      	b.n	80049f6 <HAL_UART_IRQHandler+0x34a>
 80049ec:	bf00      	nop
 80049ee:	e002      	b.n	80049f6 <HAL_UART_IRQHandler+0x34a>
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <HAL_UART_IRQHandler+0x34a>
 80049f4:	bf00      	nop
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08004aa5 	.word	0x08004aa5

08004a00 <HAL_UART_TxCpltCallback>:
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <HAL_UART_RxCpltCallback>:
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <HAL_UART_ErrorCallback>:
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <HAL_UARTEx_RxEventCallback>:
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	807b      	strh	r3, [r7, #2]
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <UART_EndRxTransfer>:
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	615a      	str	r2, [r3, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d107      	bne.n	8004a8c <UART_EndRxTransfer+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0210 	bic.w	r2, r2, #16
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <UART_DMAAbortOnError>:
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	84da      	strh	r2, [r3, #38]	; 0x26
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ffb0 	bl	8004a24 <HAL_UART_ErrorCallback>
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_Transmit_IT>:
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b21      	cmp	r3, #33	; 0x21
 8004ade:	d13e      	bne.n	8004b5e <UART_Transmit_IT+0x92>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae8:	d114      	bne.n	8004b14 <UART_Transmit_IT+0x48>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d110      	bne.n	8004b14 <UART_Transmit_IT+0x48>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	1c9a      	adds	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]
 8004b12:	e008      	b.n	8004b26 <UART_Transmit_IT+0x5a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	1c59      	adds	r1, r3, #1
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6211      	str	r1, [r2, #32]
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	4619      	mov	r1, r3
 8004b34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <UART_Transmit_IT+0x8e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b48:	60da      	str	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e000      	b.n	8004b60 <UART_Transmit_IT+0x94>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <UART_EndTransmit_IT>:
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ff38 	bl	8004a00 <HAL_UART_TxCpltCallback>
 8004b90:	2300      	movs	r3, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <UART_Receive_IT>:
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b22      	cmp	r3, #34	; 0x22
 8004bac:	f040 8099 	bne.w	8004ce2 <UART_Receive_IT+0x148>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb8:	d117      	bne.n	8004bea <UART_Receive_IT+0x50>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d113      	bne.n	8004bea <UART_Receive_IT+0x50>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	1c9a      	adds	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
 8004be8:	e026      	b.n	8004c38 <UART_Receive_IT+0x9e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfc:	d007      	beq.n	8004c0e <UART_Receive_IT+0x74>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <UART_Receive_IT+0x82>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <UART_Receive_IT+0x82>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e008      	b.n	8004c2e <UART_Receive_IT+0x94>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4619      	mov	r1, r3
 8004c46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d148      	bne.n	8004cde <UART_Receive_IT+0x144>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0220 	bic.w	r2, r2, #32
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	615a      	str	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d123      	bne.n	8004cd4 <UART_Receive_IT+0x13a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0210 	bic.w	r2, r2, #16
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d10a      	bne.n	8004cc6 <UART_Receive_IT+0x12c>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff feb2 	bl	8004a36 <HAL_UARTEx_RxEventCallback>
 8004cd2:	e002      	b.n	8004cda <UART_Receive_IT+0x140>
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff fe9c 	bl	8004a12 <HAL_UART_RxCpltCallback>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e002      	b.n	8004ce4 <UART_Receive_IT+0x14a>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <UART_Receive_IT+0x14a>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_SetConfig>:
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	611a      	str	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d26:	f023 030c 	bic.w	r3, r3, #12
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	60d3      	str	r3, [r2, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	615a      	str	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <UART_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <UART_SetConfig+0x70>
 8004d54:	f7fe fc88 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	e002      	b.n	8004d62 <UART_SetConfig+0x76>
 8004d5c:	f7fe fc70 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009a      	lsls	r2, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <UART_SetConfig+0x118>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	0119      	lsls	r1, r3, #4
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009a      	lsls	r2, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d98:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <UART_SetConfig+0x118>)
 8004d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2064      	movs	r0, #100	; 0x64
 8004da2:	fb00 f303 	mul.w	r3, r0, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	; 0x32
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <UART_SetConfig+0x118>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db8:	4419      	add	r1, r3
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009a      	lsls	r2, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <UART_SetConfig+0x118>)
 8004dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2064      	movs	r0, #100	; 0x64
 8004dda:	fb00 f303 	mul.w	r3, r0, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	3332      	adds	r3, #50	; 0x32
 8004de4:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <UART_SetConfig+0x118>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	440a      	add	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40013800 	.word	0x40013800
 8004e04:	51eb851f 	.word	0x51eb851f

08004e08 <__errno>:
 8004e08:	4b01      	ldr	r3, [pc, #4]	; (8004e10 <__errno+0x8>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000034 	.word	0x20000034

08004e14 <__libc_init_array>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	2600      	movs	r6, #0
 8004e18:	4d0c      	ldr	r5, [pc, #48]	; (8004e4c <__libc_init_array+0x38>)
 8004e1a:	4c0d      	ldr	r4, [pc, #52]	; (8004e50 <__libc_init_array+0x3c>)
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	42a6      	cmp	r6, r4
 8004e22:	d109      	bne.n	8004e38 <__libc_init_array+0x24>
 8004e24:	f000 fc5c 	bl	80056e0 <_init>
 8004e28:	2600      	movs	r6, #0
 8004e2a:	4d0a      	ldr	r5, [pc, #40]	; (8004e54 <__libc_init_array+0x40>)
 8004e2c:	4c0a      	ldr	r4, [pc, #40]	; (8004e58 <__libc_init_array+0x44>)
 8004e2e:	1b64      	subs	r4, r4, r5
 8004e30:	10a4      	asrs	r4, r4, #2
 8004e32:	42a6      	cmp	r6, r4
 8004e34:	d105      	bne.n	8004e42 <__libc_init_array+0x2e>
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
 8004e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3c:	4798      	blx	r3
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7ee      	b.n	8004e20 <__libc_init_array+0xc>
 8004e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e46:	4798      	blx	r3
 8004e48:	3601      	adds	r6, #1
 8004e4a:	e7f2      	b.n	8004e32 <__libc_init_array+0x1e>
 8004e4c:	08005760 	.word	0x08005760
 8004e50:	08005760 	.word	0x08005760
 8004e54:	08005760 	.word	0x08005760
 8004e58:	08005764 	.word	0x08005764

08004e5c <memset>:
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4402      	add	r2, r0
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d100      	bne.n	8004e66 <memset+0xa>
 8004e64:	4770      	bx	lr
 8004e66:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6a:	e7f9      	b.n	8004e60 <memset+0x4>

08004e6c <siprintf>:
 8004e6c:	b40e      	push	{r1, r2, r3}
 8004e6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e72:	b500      	push	{lr}
 8004e74:	b09c      	sub	sp, #112	; 0x70
 8004e76:	ab1d      	add	r3, sp, #116	; 0x74
 8004e78:	9002      	str	r0, [sp, #8]
 8004e7a:	9006      	str	r0, [sp, #24]
 8004e7c:	9107      	str	r1, [sp, #28]
 8004e7e:	9104      	str	r1, [sp, #16]
 8004e80:	4808      	ldr	r0, [pc, #32]	; (8004ea4 <siprintf+0x38>)
 8004e82:	4909      	ldr	r1, [pc, #36]	; (8004ea8 <siprintf+0x3c>)
 8004e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e88:	9105      	str	r1, [sp, #20]
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	a902      	add	r1, sp, #8
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	f000 f868 	bl	8004f64 <_svfiprintf_r>
 8004e94:	2200      	movs	r2, #0
 8004e96:	9b02      	ldr	r3, [sp, #8]
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	b01c      	add	sp, #112	; 0x70
 8004e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ea0:	b003      	add	sp, #12
 8004ea2:	4770      	bx	lr
 8004ea4:	20000034 	.word	0x20000034
 8004ea8:	ffff0208 	.word	0xffff0208

08004eac <__ssputs_r>:
 8004eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	688e      	ldr	r6, [r1, #8]
 8004eb2:	4682      	mov	sl, r0
 8004eb4:	429e      	cmp	r6, r3
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	4690      	mov	r8, r2
 8004eba:	461f      	mov	r7, r3
 8004ebc:	d838      	bhi.n	8004f30 <__ssputs_r+0x84>
 8004ebe:	898a      	ldrh	r2, [r1, #12]
 8004ec0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ec4:	d032      	beq.n	8004f2c <__ssputs_r+0x80>
 8004ec6:	6825      	ldr	r5, [r4, #0]
 8004ec8:	6909      	ldr	r1, [r1, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	eba5 0901 	sub.w	r9, r5, r1
 8004ed0:	6965      	ldr	r5, [r4, #20]
 8004ed2:	444b      	add	r3, r9
 8004ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004edc:	106d      	asrs	r5, r5, #1
 8004ede:	429d      	cmp	r5, r3
 8004ee0:	bf38      	it	cc
 8004ee2:	461d      	movcc	r5, r3
 8004ee4:	0553      	lsls	r3, r2, #21
 8004ee6:	d531      	bpl.n	8004f4c <__ssputs_r+0xa0>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f000 fb53 	bl	8005594 <_malloc_r>
 8004eee:	4606      	mov	r6, r0
 8004ef0:	b950      	cbnz	r0, 8004f08 <__ssputs_r+0x5c>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	f8ca 3000 	str.w	r3, [sl]
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f02:	81a3      	strh	r3, [r4, #12]
 8004f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f08:	464a      	mov	r2, r9
 8004f0a:	6921      	ldr	r1, [r4, #16]
 8004f0c:	f000 face 	bl	80054ac <memcpy>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	6126      	str	r6, [r4, #16]
 8004f1e:	444e      	add	r6, r9
 8004f20:	6026      	str	r6, [r4, #0]
 8004f22:	463e      	mov	r6, r7
 8004f24:	6165      	str	r5, [r4, #20]
 8004f26:	eba5 0509 	sub.w	r5, r5, r9
 8004f2a:	60a5      	str	r5, [r4, #8]
 8004f2c:	42be      	cmp	r6, r7
 8004f2e:	d900      	bls.n	8004f32 <__ssputs_r+0x86>
 8004f30:	463e      	mov	r6, r7
 8004f32:	4632      	mov	r2, r6
 8004f34:	4641      	mov	r1, r8
 8004f36:	6820      	ldr	r0, [r4, #0]
 8004f38:	f000 fac6 	bl	80054c8 <memmove>
 8004f3c:	68a3      	ldr	r3, [r4, #8]
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	1b9b      	subs	r3, r3, r6
 8004f42:	4432      	add	r2, r6
 8004f44:	2000      	movs	r0, #0
 8004f46:	60a3      	str	r3, [r4, #8]
 8004f48:	6022      	str	r2, [r4, #0]
 8004f4a:	e7db      	b.n	8004f04 <__ssputs_r+0x58>
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	f000 fb7b 	bl	8005648 <_realloc_r>
 8004f52:	4606      	mov	r6, r0
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d1e1      	bne.n	8004f1c <__ssputs_r+0x70>
 8004f58:	4650      	mov	r0, sl
 8004f5a:	6921      	ldr	r1, [r4, #16]
 8004f5c:	f000 face 	bl	80054fc <_free_r>
 8004f60:	e7c7      	b.n	8004ef2 <__ssputs_r+0x46>
	...

08004f64 <_svfiprintf_r>:
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	4698      	mov	r8, r3
 8004f6a:	898b      	ldrh	r3, [r1, #12]
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	061b      	lsls	r3, r3, #24
 8004f70:	460d      	mov	r5, r1
 8004f72:	4614      	mov	r4, r2
 8004f74:	b09d      	sub	sp, #116	; 0x74
 8004f76:	d50e      	bpl.n	8004f96 <_svfiprintf_r+0x32>
 8004f78:	690b      	ldr	r3, [r1, #16]
 8004f7a:	b963      	cbnz	r3, 8004f96 <_svfiprintf_r+0x32>
 8004f7c:	2140      	movs	r1, #64	; 0x40
 8004f7e:	f000 fb09 	bl	8005594 <_malloc_r>
 8004f82:	6028      	str	r0, [r5, #0]
 8004f84:	6128      	str	r0, [r5, #16]
 8004f86:	b920      	cbnz	r0, 8004f92 <_svfiprintf_r+0x2e>
 8004f88:	230c      	movs	r3, #12
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f90:	e0d1      	b.n	8005136 <_svfiprintf_r+0x1d2>
 8004f92:	2340      	movs	r3, #64	; 0x40
 8004f94:	616b      	str	r3, [r5, #20]
 8004f96:	2300      	movs	r3, #0
 8004f98:	9309      	str	r3, [sp, #36]	; 0x24
 8004f9a:	2320      	movs	r3, #32
 8004f9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fa0:	2330      	movs	r3, #48	; 0x30
 8004fa2:	f04f 0901 	mov.w	r9, #1
 8004fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004faa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005150 <_svfiprintf_r+0x1ec>
 8004fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	469a      	mov	sl, r3
 8004fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fba:	b10a      	cbz	r2, 8004fc0 <_svfiprintf_r+0x5c>
 8004fbc:	2a25      	cmp	r2, #37	; 0x25
 8004fbe:	d1f9      	bne.n	8004fb4 <_svfiprintf_r+0x50>
 8004fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8004fc4:	d00b      	beq.n	8004fde <_svfiprintf_r+0x7a>
 8004fc6:	465b      	mov	r3, fp
 8004fc8:	4622      	mov	r2, r4
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f7ff ff6d 	bl	8004eac <__ssputs_r>
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	f000 80aa 	beq.w	800512c <_svfiprintf_r+0x1c8>
 8004fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fda:	445a      	add	r2, fp
 8004fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8004fde:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80a2 	beq.w	800512c <_svfiprintf_r+0x1c8>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f04f 32ff 	mov.w	r2, #4294967295
 8004fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ff2:	f10a 0a01 	add.w	sl, sl, #1
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	9307      	str	r3, [sp, #28]
 8004ffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ffe:	931a      	str	r3, [sp, #104]	; 0x68
 8005000:	4654      	mov	r4, sl
 8005002:	2205      	movs	r2, #5
 8005004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005008:	4851      	ldr	r0, [pc, #324]	; (8005150 <_svfiprintf_r+0x1ec>)
 800500a:	f000 fa41 	bl	8005490 <memchr>
 800500e:	9a04      	ldr	r2, [sp, #16]
 8005010:	b9d8      	cbnz	r0, 800504a <_svfiprintf_r+0xe6>
 8005012:	06d0      	lsls	r0, r2, #27
 8005014:	bf44      	itt	mi
 8005016:	2320      	movmi	r3, #32
 8005018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800501c:	0711      	lsls	r1, r2, #28
 800501e:	bf44      	itt	mi
 8005020:	232b      	movmi	r3, #43	; 0x2b
 8005022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005026:	f89a 3000 	ldrb.w	r3, [sl]
 800502a:	2b2a      	cmp	r3, #42	; 0x2a
 800502c:	d015      	beq.n	800505a <_svfiprintf_r+0xf6>
 800502e:	4654      	mov	r4, sl
 8005030:	2000      	movs	r0, #0
 8005032:	f04f 0c0a 	mov.w	ip, #10
 8005036:	9a07      	ldr	r2, [sp, #28]
 8005038:	4621      	mov	r1, r4
 800503a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800503e:	3b30      	subs	r3, #48	; 0x30
 8005040:	2b09      	cmp	r3, #9
 8005042:	d94e      	bls.n	80050e2 <_svfiprintf_r+0x17e>
 8005044:	b1b0      	cbz	r0, 8005074 <_svfiprintf_r+0x110>
 8005046:	9207      	str	r2, [sp, #28]
 8005048:	e014      	b.n	8005074 <_svfiprintf_r+0x110>
 800504a:	eba0 0308 	sub.w	r3, r0, r8
 800504e:	fa09 f303 	lsl.w	r3, r9, r3
 8005052:	4313      	orrs	r3, r2
 8005054:	46a2      	mov	sl, r4
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	e7d2      	b.n	8005000 <_svfiprintf_r+0x9c>
 800505a:	9b03      	ldr	r3, [sp, #12]
 800505c:	1d19      	adds	r1, r3, #4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	9103      	str	r1, [sp, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	bfbb      	ittet	lt
 8005066:	425b      	neglt	r3, r3
 8005068:	f042 0202 	orrlt.w	r2, r2, #2
 800506c:	9307      	strge	r3, [sp, #28]
 800506e:	9307      	strlt	r3, [sp, #28]
 8005070:	bfb8      	it	lt
 8005072:	9204      	strlt	r2, [sp, #16]
 8005074:	7823      	ldrb	r3, [r4, #0]
 8005076:	2b2e      	cmp	r3, #46	; 0x2e
 8005078:	d10c      	bne.n	8005094 <_svfiprintf_r+0x130>
 800507a:	7863      	ldrb	r3, [r4, #1]
 800507c:	2b2a      	cmp	r3, #42	; 0x2a
 800507e:	d135      	bne.n	80050ec <_svfiprintf_r+0x188>
 8005080:	9b03      	ldr	r3, [sp, #12]
 8005082:	3402      	adds	r4, #2
 8005084:	1d1a      	adds	r2, r3, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	9203      	str	r2, [sp, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfb8      	it	lt
 800508e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005092:	9305      	str	r3, [sp, #20]
 8005094:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005160 <_svfiprintf_r+0x1fc>
 8005098:	2203      	movs	r2, #3
 800509a:	4650      	mov	r0, sl
 800509c:	7821      	ldrb	r1, [r4, #0]
 800509e:	f000 f9f7 	bl	8005490 <memchr>
 80050a2:	b140      	cbz	r0, 80050b6 <_svfiprintf_r+0x152>
 80050a4:	2340      	movs	r3, #64	; 0x40
 80050a6:	eba0 000a 	sub.w	r0, r0, sl
 80050aa:	fa03 f000 	lsl.w	r0, r3, r0
 80050ae:	9b04      	ldr	r3, [sp, #16]
 80050b0:	3401      	adds	r4, #1
 80050b2:	4303      	orrs	r3, r0
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ba:	2206      	movs	r2, #6
 80050bc:	4825      	ldr	r0, [pc, #148]	; (8005154 <_svfiprintf_r+0x1f0>)
 80050be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050c2:	f000 f9e5 	bl	8005490 <memchr>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d038      	beq.n	800513c <_svfiprintf_r+0x1d8>
 80050ca:	4b23      	ldr	r3, [pc, #140]	; (8005158 <_svfiprintf_r+0x1f4>)
 80050cc:	bb1b      	cbnz	r3, 8005116 <_svfiprintf_r+0x1b2>
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	3308      	adds	r3, #8
 80050d8:	9303      	str	r3, [sp, #12]
 80050da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050dc:	4433      	add	r3, r6
 80050de:	9309      	str	r3, [sp, #36]	; 0x24
 80050e0:	e767      	b.n	8004fb2 <_svfiprintf_r+0x4e>
 80050e2:	460c      	mov	r4, r1
 80050e4:	2001      	movs	r0, #1
 80050e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ea:	e7a5      	b.n	8005038 <_svfiprintf_r+0xd4>
 80050ec:	2300      	movs	r3, #0
 80050ee:	f04f 0c0a 	mov.w	ip, #10
 80050f2:	4619      	mov	r1, r3
 80050f4:	3401      	adds	r4, #1
 80050f6:	9305      	str	r3, [sp, #20]
 80050f8:	4620      	mov	r0, r4
 80050fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050fe:	3a30      	subs	r2, #48	; 0x30
 8005100:	2a09      	cmp	r2, #9
 8005102:	d903      	bls.n	800510c <_svfiprintf_r+0x1a8>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0c5      	beq.n	8005094 <_svfiprintf_r+0x130>
 8005108:	9105      	str	r1, [sp, #20]
 800510a:	e7c3      	b.n	8005094 <_svfiprintf_r+0x130>
 800510c:	4604      	mov	r4, r0
 800510e:	2301      	movs	r3, #1
 8005110:	fb0c 2101 	mla	r1, ip, r1, r2
 8005114:	e7f0      	b.n	80050f8 <_svfiprintf_r+0x194>
 8005116:	ab03      	add	r3, sp, #12
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	462a      	mov	r2, r5
 800511c:	4638      	mov	r0, r7
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <_svfiprintf_r+0x1f8>)
 8005120:	a904      	add	r1, sp, #16
 8005122:	f3af 8000 	nop.w
 8005126:	1c42      	adds	r2, r0, #1
 8005128:	4606      	mov	r6, r0
 800512a:	d1d6      	bne.n	80050da <_svfiprintf_r+0x176>
 800512c:	89ab      	ldrh	r3, [r5, #12]
 800512e:	065b      	lsls	r3, r3, #25
 8005130:	f53f af2c 	bmi.w	8004f8c <_svfiprintf_r+0x28>
 8005134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005136:	b01d      	add	sp, #116	; 0x74
 8005138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513c:	ab03      	add	r3, sp, #12
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	462a      	mov	r2, r5
 8005142:	4638      	mov	r0, r7
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <_svfiprintf_r+0x1f8>)
 8005146:	a904      	add	r1, sp, #16
 8005148:	f000 f87c 	bl	8005244 <_printf_i>
 800514c:	e7eb      	b.n	8005126 <_svfiprintf_r+0x1c2>
 800514e:	bf00      	nop
 8005150:	0800572c 	.word	0x0800572c
 8005154:	08005736 	.word	0x08005736
 8005158:	00000000 	.word	0x00000000
 800515c:	08004ead 	.word	0x08004ead
 8005160:	08005732 	.word	0x08005732

08005164 <_printf_common>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	4616      	mov	r6, r2
 800516a:	4699      	mov	r9, r3
 800516c:	688a      	ldr	r2, [r1, #8]
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	4607      	mov	r7, r0
 8005172:	4293      	cmp	r3, r2
 8005174:	bfb8      	it	lt
 8005176:	4613      	movlt	r3, r2
 8005178:	6033      	str	r3, [r6, #0]
 800517a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800517e:	460c      	mov	r4, r1
 8005180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005184:	b10a      	cbz	r2, 800518a <_printf_common+0x26>
 8005186:	3301      	adds	r3, #1
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	0699      	lsls	r1, r3, #26
 800518e:	bf42      	ittt	mi
 8005190:	6833      	ldrmi	r3, [r6, #0]
 8005192:	3302      	addmi	r3, #2
 8005194:	6033      	strmi	r3, [r6, #0]
 8005196:	6825      	ldr	r5, [r4, #0]
 8005198:	f015 0506 	ands.w	r5, r5, #6
 800519c:	d106      	bne.n	80051ac <_printf_common+0x48>
 800519e:	f104 0a19 	add.w	sl, r4, #25
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	6832      	ldr	r2, [r6, #0]
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	42ab      	cmp	r3, r5
 80051aa:	dc28      	bgt.n	80051fe <_printf_common+0x9a>
 80051ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051b0:	1e13      	subs	r3, r2, #0
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	bf18      	it	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	0692      	lsls	r2, r2, #26
 80051ba:	d42d      	bmi.n	8005218 <_printf_common+0xb4>
 80051bc:	4649      	mov	r1, r9
 80051be:	4638      	mov	r0, r7
 80051c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d020      	beq.n	800520c <_printf_common+0xa8>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	68e5      	ldr	r5, [r4, #12]
 80051ce:	f003 0306 	and.w	r3, r3, #6
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	bf18      	it	ne
 80051d6:	2500      	movne	r5, #0
 80051d8:	6832      	ldr	r2, [r6, #0]
 80051da:	f04f 0600 	mov.w	r6, #0
 80051de:	68a3      	ldr	r3, [r4, #8]
 80051e0:	bf08      	it	eq
 80051e2:	1aad      	subeq	r5, r5, r2
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	bf08      	it	eq
 80051e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bfc4      	itt	gt
 80051f0:	1a9b      	subgt	r3, r3, r2
 80051f2:	18ed      	addgt	r5, r5, r3
 80051f4:	341a      	adds	r4, #26
 80051f6:	42b5      	cmp	r5, r6
 80051f8:	d11a      	bne.n	8005230 <_printf_common+0xcc>
 80051fa:	2000      	movs	r0, #0
 80051fc:	e008      	b.n	8005210 <_printf_common+0xac>
 80051fe:	2301      	movs	r3, #1
 8005200:	4652      	mov	r2, sl
 8005202:	4649      	mov	r1, r9
 8005204:	4638      	mov	r0, r7
 8005206:	47c0      	blx	r8
 8005208:	3001      	adds	r0, #1
 800520a:	d103      	bne.n	8005214 <_printf_common+0xb0>
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	3501      	adds	r5, #1
 8005216:	e7c4      	b.n	80051a2 <_printf_common+0x3e>
 8005218:	2030      	movs	r0, #48	; 0x30
 800521a:	18e1      	adds	r1, r4, r3
 800521c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005226:	4422      	add	r2, r4
 8005228:	3302      	adds	r3, #2
 800522a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800522e:	e7c5      	b.n	80051bc <_printf_common+0x58>
 8005230:	2301      	movs	r3, #1
 8005232:	4622      	mov	r2, r4
 8005234:	4649      	mov	r1, r9
 8005236:	4638      	mov	r0, r7
 8005238:	47c0      	blx	r8
 800523a:	3001      	adds	r0, #1
 800523c:	d0e6      	beq.n	800520c <_printf_common+0xa8>
 800523e:	3601      	adds	r6, #1
 8005240:	e7d9      	b.n	80051f6 <_printf_common+0x92>
	...

08005244 <_printf_i>:
 8005244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	460c      	mov	r4, r1
 800524a:	7e27      	ldrb	r7, [r4, #24]
 800524c:	4691      	mov	r9, r2
 800524e:	2f78      	cmp	r7, #120	; 0x78
 8005250:	4680      	mov	r8, r0
 8005252:	469a      	mov	sl, r3
 8005254:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005256:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800525a:	d807      	bhi.n	800526c <_printf_i+0x28>
 800525c:	2f62      	cmp	r7, #98	; 0x62
 800525e:	d80a      	bhi.n	8005276 <_printf_i+0x32>
 8005260:	2f00      	cmp	r7, #0
 8005262:	f000 80d9 	beq.w	8005418 <_printf_i+0x1d4>
 8005266:	2f58      	cmp	r7, #88	; 0x58
 8005268:	f000 80a4 	beq.w	80053b4 <_printf_i+0x170>
 800526c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005274:	e03a      	b.n	80052ec <_printf_i+0xa8>
 8005276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800527a:	2b15      	cmp	r3, #21
 800527c:	d8f6      	bhi.n	800526c <_printf_i+0x28>
 800527e:	a001      	add	r0, pc, #4	; (adr r0, 8005284 <_printf_i+0x40>)
 8005280:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005284:	080052dd 	.word	0x080052dd
 8005288:	080052f1 	.word	0x080052f1
 800528c:	0800526d 	.word	0x0800526d
 8005290:	0800526d 	.word	0x0800526d
 8005294:	0800526d 	.word	0x0800526d
 8005298:	0800526d 	.word	0x0800526d
 800529c:	080052f1 	.word	0x080052f1
 80052a0:	0800526d 	.word	0x0800526d
 80052a4:	0800526d 	.word	0x0800526d
 80052a8:	0800526d 	.word	0x0800526d
 80052ac:	0800526d 	.word	0x0800526d
 80052b0:	080053ff 	.word	0x080053ff
 80052b4:	08005321 	.word	0x08005321
 80052b8:	080053e1 	.word	0x080053e1
 80052bc:	0800526d 	.word	0x0800526d
 80052c0:	0800526d 	.word	0x0800526d
 80052c4:	08005421 	.word	0x08005421
 80052c8:	0800526d 	.word	0x0800526d
 80052cc:	08005321 	.word	0x08005321
 80052d0:	0800526d 	.word	0x0800526d
 80052d4:	0800526d 	.word	0x0800526d
 80052d8:	080053e9 	.word	0x080053e9
 80052dc:	680b      	ldr	r3, [r1, #0]
 80052de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052e2:	1d1a      	adds	r2, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	600a      	str	r2, [r1, #0]
 80052e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0a4      	b.n	800543a <_printf_i+0x1f6>
 80052f0:	6825      	ldr	r5, [r4, #0]
 80052f2:	6808      	ldr	r0, [r1, #0]
 80052f4:	062e      	lsls	r6, r5, #24
 80052f6:	f100 0304 	add.w	r3, r0, #4
 80052fa:	d50a      	bpl.n	8005312 <_printf_i+0xce>
 80052fc:	6805      	ldr	r5, [r0, #0]
 80052fe:	600b      	str	r3, [r1, #0]
 8005300:	2d00      	cmp	r5, #0
 8005302:	da03      	bge.n	800530c <_printf_i+0xc8>
 8005304:	232d      	movs	r3, #45	; 0x2d
 8005306:	426d      	negs	r5, r5
 8005308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530c:	230a      	movs	r3, #10
 800530e:	485e      	ldr	r0, [pc, #376]	; (8005488 <_printf_i+0x244>)
 8005310:	e019      	b.n	8005346 <_printf_i+0x102>
 8005312:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005316:	6805      	ldr	r5, [r0, #0]
 8005318:	600b      	str	r3, [r1, #0]
 800531a:	bf18      	it	ne
 800531c:	b22d      	sxthne	r5, r5
 800531e:	e7ef      	b.n	8005300 <_printf_i+0xbc>
 8005320:	680b      	ldr	r3, [r1, #0]
 8005322:	6825      	ldr	r5, [r4, #0]
 8005324:	1d18      	adds	r0, r3, #4
 8005326:	6008      	str	r0, [r1, #0]
 8005328:	0628      	lsls	r0, r5, #24
 800532a:	d501      	bpl.n	8005330 <_printf_i+0xec>
 800532c:	681d      	ldr	r5, [r3, #0]
 800532e:	e002      	b.n	8005336 <_printf_i+0xf2>
 8005330:	0669      	lsls	r1, r5, #25
 8005332:	d5fb      	bpl.n	800532c <_printf_i+0xe8>
 8005334:	881d      	ldrh	r5, [r3, #0]
 8005336:	2f6f      	cmp	r7, #111	; 0x6f
 8005338:	bf0c      	ite	eq
 800533a:	2308      	moveq	r3, #8
 800533c:	230a      	movne	r3, #10
 800533e:	4852      	ldr	r0, [pc, #328]	; (8005488 <_printf_i+0x244>)
 8005340:	2100      	movs	r1, #0
 8005342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005346:	6866      	ldr	r6, [r4, #4]
 8005348:	2e00      	cmp	r6, #0
 800534a:	bfa8      	it	ge
 800534c:	6821      	ldrge	r1, [r4, #0]
 800534e:	60a6      	str	r6, [r4, #8]
 8005350:	bfa4      	itt	ge
 8005352:	f021 0104 	bicge.w	r1, r1, #4
 8005356:	6021      	strge	r1, [r4, #0]
 8005358:	b90d      	cbnz	r5, 800535e <_printf_i+0x11a>
 800535a:	2e00      	cmp	r6, #0
 800535c:	d04d      	beq.n	80053fa <_printf_i+0x1b6>
 800535e:	4616      	mov	r6, r2
 8005360:	fbb5 f1f3 	udiv	r1, r5, r3
 8005364:	fb03 5711 	mls	r7, r3, r1, r5
 8005368:	5dc7      	ldrb	r7, [r0, r7]
 800536a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800536e:	462f      	mov	r7, r5
 8005370:	42bb      	cmp	r3, r7
 8005372:	460d      	mov	r5, r1
 8005374:	d9f4      	bls.n	8005360 <_printf_i+0x11c>
 8005376:	2b08      	cmp	r3, #8
 8005378:	d10b      	bne.n	8005392 <_printf_i+0x14e>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	07df      	lsls	r7, r3, #31
 800537e:	d508      	bpl.n	8005392 <_printf_i+0x14e>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	6861      	ldr	r1, [r4, #4]
 8005384:	4299      	cmp	r1, r3
 8005386:	bfde      	ittt	le
 8005388:	2330      	movle	r3, #48	; 0x30
 800538a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800538e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005392:	1b92      	subs	r2, r2, r6
 8005394:	6122      	str	r2, [r4, #16]
 8005396:	464b      	mov	r3, r9
 8005398:	4621      	mov	r1, r4
 800539a:	4640      	mov	r0, r8
 800539c:	f8cd a000 	str.w	sl, [sp]
 80053a0:	aa03      	add	r2, sp, #12
 80053a2:	f7ff fedf 	bl	8005164 <_printf_common>
 80053a6:	3001      	adds	r0, #1
 80053a8:	d14c      	bne.n	8005444 <_printf_i+0x200>
 80053aa:	f04f 30ff 	mov.w	r0, #4294967295
 80053ae:	b004      	add	sp, #16
 80053b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b4:	4834      	ldr	r0, [pc, #208]	; (8005488 <_printf_i+0x244>)
 80053b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053ba:	680e      	ldr	r6, [r1, #0]
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	f856 5b04 	ldr.w	r5, [r6], #4
 80053c2:	061f      	lsls	r7, r3, #24
 80053c4:	600e      	str	r6, [r1, #0]
 80053c6:	d514      	bpl.n	80053f2 <_printf_i+0x1ae>
 80053c8:	07d9      	lsls	r1, r3, #31
 80053ca:	bf44      	itt	mi
 80053cc:	f043 0320 	orrmi.w	r3, r3, #32
 80053d0:	6023      	strmi	r3, [r4, #0]
 80053d2:	b91d      	cbnz	r5, 80053dc <_printf_i+0x198>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	f023 0320 	bic.w	r3, r3, #32
 80053da:	6023      	str	r3, [r4, #0]
 80053dc:	2310      	movs	r3, #16
 80053de:	e7af      	b.n	8005340 <_printf_i+0xfc>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	2378      	movs	r3, #120	; 0x78
 80053ea:	4828      	ldr	r0, [pc, #160]	; (800548c <_printf_i+0x248>)
 80053ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f0:	e7e3      	b.n	80053ba <_printf_i+0x176>
 80053f2:	065e      	lsls	r6, r3, #25
 80053f4:	bf48      	it	mi
 80053f6:	b2ad      	uxthmi	r5, r5
 80053f8:	e7e6      	b.n	80053c8 <_printf_i+0x184>
 80053fa:	4616      	mov	r6, r2
 80053fc:	e7bb      	b.n	8005376 <_printf_i+0x132>
 80053fe:	680b      	ldr	r3, [r1, #0]
 8005400:	6826      	ldr	r6, [r4, #0]
 8005402:	1d1d      	adds	r5, r3, #4
 8005404:	6960      	ldr	r0, [r4, #20]
 8005406:	600d      	str	r5, [r1, #0]
 8005408:	0635      	lsls	r5, r6, #24
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	d501      	bpl.n	8005412 <_printf_i+0x1ce>
 800540e:	6018      	str	r0, [r3, #0]
 8005410:	e002      	b.n	8005418 <_printf_i+0x1d4>
 8005412:	0671      	lsls	r1, r6, #25
 8005414:	d5fb      	bpl.n	800540e <_printf_i+0x1ca>
 8005416:	8018      	strh	r0, [r3, #0]
 8005418:	2300      	movs	r3, #0
 800541a:	4616      	mov	r6, r2
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	e7ba      	b.n	8005396 <_printf_i+0x152>
 8005420:	680b      	ldr	r3, [r1, #0]
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	600a      	str	r2, [r1, #0]
 8005426:	681e      	ldr	r6, [r3, #0]
 8005428:	2100      	movs	r1, #0
 800542a:	4630      	mov	r0, r6
 800542c:	6862      	ldr	r2, [r4, #4]
 800542e:	f000 f82f 	bl	8005490 <memchr>
 8005432:	b108      	cbz	r0, 8005438 <_printf_i+0x1f4>
 8005434:	1b80      	subs	r0, r0, r6
 8005436:	6060      	str	r0, [r4, #4]
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	6123      	str	r3, [r4, #16]
 800543c:	2300      	movs	r3, #0
 800543e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005442:	e7a8      	b.n	8005396 <_printf_i+0x152>
 8005444:	4632      	mov	r2, r6
 8005446:	4649      	mov	r1, r9
 8005448:	4640      	mov	r0, r8
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	47d0      	blx	sl
 800544e:	3001      	adds	r0, #1
 8005450:	d0ab      	beq.n	80053aa <_printf_i+0x166>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	079b      	lsls	r3, r3, #30
 8005456:	d413      	bmi.n	8005480 <_printf_i+0x23c>
 8005458:	68e0      	ldr	r0, [r4, #12]
 800545a:	9b03      	ldr	r3, [sp, #12]
 800545c:	4298      	cmp	r0, r3
 800545e:	bfb8      	it	lt
 8005460:	4618      	movlt	r0, r3
 8005462:	e7a4      	b.n	80053ae <_printf_i+0x16a>
 8005464:	2301      	movs	r3, #1
 8005466:	4632      	mov	r2, r6
 8005468:	4649      	mov	r1, r9
 800546a:	4640      	mov	r0, r8
 800546c:	47d0      	blx	sl
 800546e:	3001      	adds	r0, #1
 8005470:	d09b      	beq.n	80053aa <_printf_i+0x166>
 8005472:	3501      	adds	r5, #1
 8005474:	68e3      	ldr	r3, [r4, #12]
 8005476:	9903      	ldr	r1, [sp, #12]
 8005478:	1a5b      	subs	r3, r3, r1
 800547a:	42ab      	cmp	r3, r5
 800547c:	dcf2      	bgt.n	8005464 <_printf_i+0x220>
 800547e:	e7eb      	b.n	8005458 <_printf_i+0x214>
 8005480:	2500      	movs	r5, #0
 8005482:	f104 0619 	add.w	r6, r4, #25
 8005486:	e7f5      	b.n	8005474 <_printf_i+0x230>
 8005488:	0800573d 	.word	0x0800573d
 800548c:	0800574e 	.word	0x0800574e

08005490 <memchr>:
 8005490:	4603      	mov	r3, r0
 8005492:	b510      	push	{r4, lr}
 8005494:	b2c9      	uxtb	r1, r1
 8005496:	4402      	add	r2, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	4618      	mov	r0, r3
 800549c:	d101      	bne.n	80054a2 <memchr+0x12>
 800549e:	2000      	movs	r0, #0
 80054a0:	e003      	b.n	80054aa <memchr+0x1a>
 80054a2:	7804      	ldrb	r4, [r0, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	428c      	cmp	r4, r1
 80054a8:	d1f6      	bne.n	8005498 <memchr+0x8>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <memcpy>:
 80054ac:	440a      	add	r2, r1
 80054ae:	4291      	cmp	r1, r2
 80054b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xc>
 80054b6:	4770      	bx	lr
 80054b8:	b510      	push	{r4, lr}
 80054ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054be:	4291      	cmp	r1, r2
 80054c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c4:	d1f9      	bne.n	80054ba <memcpy+0xe>
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <memmove>:
 80054c8:	4288      	cmp	r0, r1
 80054ca:	b510      	push	{r4, lr}
 80054cc:	eb01 0402 	add.w	r4, r1, r2
 80054d0:	d902      	bls.n	80054d8 <memmove+0x10>
 80054d2:	4284      	cmp	r4, r0
 80054d4:	4623      	mov	r3, r4
 80054d6:	d807      	bhi.n	80054e8 <memmove+0x20>
 80054d8:	1e43      	subs	r3, r0, #1
 80054da:	42a1      	cmp	r1, r4
 80054dc:	d008      	beq.n	80054f0 <memmove+0x28>
 80054de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054e6:	e7f8      	b.n	80054da <memmove+0x12>
 80054e8:	4601      	mov	r1, r0
 80054ea:	4402      	add	r2, r0
 80054ec:	428a      	cmp	r2, r1
 80054ee:	d100      	bne.n	80054f2 <memmove+0x2a>
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054fa:	e7f7      	b.n	80054ec <memmove+0x24>

080054fc <_free_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4605      	mov	r5, r0
 8005500:	2900      	cmp	r1, #0
 8005502:	d043      	beq.n	800558c <_free_r+0x90>
 8005504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005508:	1f0c      	subs	r4, r1, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfb8      	it	lt
 800550e:	18e4      	addlt	r4, r4, r3
 8005510:	f000 f8d0 	bl	80056b4 <__malloc_lock>
 8005514:	4a1e      	ldr	r2, [pc, #120]	; (8005590 <_free_r+0x94>)
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	4610      	mov	r0, r2
 800551a:	b933      	cbnz	r3, 800552a <_free_r+0x2e>
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	6014      	str	r4, [r2, #0]
 8005520:	4628      	mov	r0, r5
 8005522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005526:	f000 b8cb 	b.w	80056c0 <__malloc_unlock>
 800552a:	42a3      	cmp	r3, r4
 800552c:	d90a      	bls.n	8005544 <_free_r+0x48>
 800552e:	6821      	ldr	r1, [r4, #0]
 8005530:	1862      	adds	r2, r4, r1
 8005532:	4293      	cmp	r3, r2
 8005534:	bf01      	itttt	eq
 8005536:	681a      	ldreq	r2, [r3, #0]
 8005538:	685b      	ldreq	r3, [r3, #4]
 800553a:	1852      	addeq	r2, r2, r1
 800553c:	6022      	streq	r2, [r4, #0]
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	6004      	str	r4, [r0, #0]
 8005542:	e7ed      	b.n	8005520 <_free_r+0x24>
 8005544:	461a      	mov	r2, r3
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	b10b      	cbz	r3, 800554e <_free_r+0x52>
 800554a:	42a3      	cmp	r3, r4
 800554c:	d9fa      	bls.n	8005544 <_free_r+0x48>
 800554e:	6811      	ldr	r1, [r2, #0]
 8005550:	1850      	adds	r0, r2, r1
 8005552:	42a0      	cmp	r0, r4
 8005554:	d10b      	bne.n	800556e <_free_r+0x72>
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	4401      	add	r1, r0
 800555a:	1850      	adds	r0, r2, r1
 800555c:	4283      	cmp	r3, r0
 800555e:	6011      	str	r1, [r2, #0]
 8005560:	d1de      	bne.n	8005520 <_free_r+0x24>
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4401      	add	r1, r0
 8005568:	6011      	str	r1, [r2, #0]
 800556a:	6053      	str	r3, [r2, #4]
 800556c:	e7d8      	b.n	8005520 <_free_r+0x24>
 800556e:	d902      	bls.n	8005576 <_free_r+0x7a>
 8005570:	230c      	movs	r3, #12
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	e7d4      	b.n	8005520 <_free_r+0x24>
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	1821      	adds	r1, r4, r0
 800557a:	428b      	cmp	r3, r1
 800557c:	bf01      	itttt	eq
 800557e:	6819      	ldreq	r1, [r3, #0]
 8005580:	685b      	ldreq	r3, [r3, #4]
 8005582:	1809      	addeq	r1, r1, r0
 8005584:	6021      	streq	r1, [r4, #0]
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6054      	str	r4, [r2, #4]
 800558a:	e7c9      	b.n	8005520 <_free_r+0x24>
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	bf00      	nop
 8005590:	20000154 	.word	0x20000154

08005594 <_malloc_r>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	1ccd      	adds	r5, r1, #3
 8005598:	f025 0503 	bic.w	r5, r5, #3
 800559c:	3508      	adds	r5, #8
 800559e:	2d0c      	cmp	r5, #12
 80055a0:	bf38      	it	cc
 80055a2:	250c      	movcc	r5, #12
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	4606      	mov	r6, r0
 80055a8:	db01      	blt.n	80055ae <_malloc_r+0x1a>
 80055aa:	42a9      	cmp	r1, r5
 80055ac:	d903      	bls.n	80055b6 <_malloc_r+0x22>
 80055ae:	230c      	movs	r3, #12
 80055b0:	6033      	str	r3, [r6, #0]
 80055b2:	2000      	movs	r0, #0
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b6:	f000 f87d 	bl	80056b4 <__malloc_lock>
 80055ba:	4921      	ldr	r1, [pc, #132]	; (8005640 <_malloc_r+0xac>)
 80055bc:	680a      	ldr	r2, [r1, #0]
 80055be:	4614      	mov	r4, r2
 80055c0:	b99c      	cbnz	r4, 80055ea <_malloc_r+0x56>
 80055c2:	4f20      	ldr	r7, [pc, #128]	; (8005644 <_malloc_r+0xb0>)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	b923      	cbnz	r3, 80055d2 <_malloc_r+0x3e>
 80055c8:	4621      	mov	r1, r4
 80055ca:	4630      	mov	r0, r6
 80055cc:	f000 f862 	bl	8005694 <_sbrk_r>
 80055d0:	6038      	str	r0, [r7, #0]
 80055d2:	4629      	mov	r1, r5
 80055d4:	4630      	mov	r0, r6
 80055d6:	f000 f85d 	bl	8005694 <_sbrk_r>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	d123      	bne.n	8005626 <_malloc_r+0x92>
 80055de:	230c      	movs	r3, #12
 80055e0:	4630      	mov	r0, r6
 80055e2:	6033      	str	r3, [r6, #0]
 80055e4:	f000 f86c 	bl	80056c0 <__malloc_unlock>
 80055e8:	e7e3      	b.n	80055b2 <_malloc_r+0x1e>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	1b5b      	subs	r3, r3, r5
 80055ee:	d417      	bmi.n	8005620 <_malloc_r+0x8c>
 80055f0:	2b0b      	cmp	r3, #11
 80055f2:	d903      	bls.n	80055fc <_malloc_r+0x68>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	441c      	add	r4, r3
 80055f8:	6025      	str	r5, [r4, #0]
 80055fa:	e004      	b.n	8005606 <_malloc_r+0x72>
 80055fc:	6863      	ldr	r3, [r4, #4]
 80055fe:	42a2      	cmp	r2, r4
 8005600:	bf0c      	ite	eq
 8005602:	600b      	streq	r3, [r1, #0]
 8005604:	6053      	strne	r3, [r2, #4]
 8005606:	4630      	mov	r0, r6
 8005608:	f000 f85a 	bl	80056c0 <__malloc_unlock>
 800560c:	f104 000b 	add.w	r0, r4, #11
 8005610:	1d23      	adds	r3, r4, #4
 8005612:	f020 0007 	bic.w	r0, r0, #7
 8005616:	1ac2      	subs	r2, r0, r3
 8005618:	d0cc      	beq.n	80055b4 <_malloc_r+0x20>
 800561a:	1a1b      	subs	r3, r3, r0
 800561c:	50a3      	str	r3, [r4, r2]
 800561e:	e7c9      	b.n	80055b4 <_malloc_r+0x20>
 8005620:	4622      	mov	r2, r4
 8005622:	6864      	ldr	r4, [r4, #4]
 8005624:	e7cc      	b.n	80055c0 <_malloc_r+0x2c>
 8005626:	1cc4      	adds	r4, r0, #3
 8005628:	f024 0403 	bic.w	r4, r4, #3
 800562c:	42a0      	cmp	r0, r4
 800562e:	d0e3      	beq.n	80055f8 <_malloc_r+0x64>
 8005630:	1a21      	subs	r1, r4, r0
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f82e 	bl	8005694 <_sbrk_r>
 8005638:	3001      	adds	r0, #1
 800563a:	d1dd      	bne.n	80055f8 <_malloc_r+0x64>
 800563c:	e7cf      	b.n	80055de <_malloc_r+0x4a>
 800563e:	bf00      	nop
 8005640:	20000154 	.word	0x20000154
 8005644:	20000158 	.word	0x20000158

08005648 <_realloc_r>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	4607      	mov	r7, r0
 800564c:	4614      	mov	r4, r2
 800564e:	460e      	mov	r6, r1
 8005650:	b921      	cbnz	r1, 800565c <_realloc_r+0x14>
 8005652:	4611      	mov	r1, r2
 8005654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005658:	f7ff bf9c 	b.w	8005594 <_malloc_r>
 800565c:	b922      	cbnz	r2, 8005668 <_realloc_r+0x20>
 800565e:	f7ff ff4d 	bl	80054fc <_free_r>
 8005662:	4625      	mov	r5, r4
 8005664:	4628      	mov	r0, r5
 8005666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005668:	f000 f830 	bl	80056cc <_malloc_usable_size_r>
 800566c:	42a0      	cmp	r0, r4
 800566e:	d20f      	bcs.n	8005690 <_realloc_r+0x48>
 8005670:	4621      	mov	r1, r4
 8005672:	4638      	mov	r0, r7
 8005674:	f7ff ff8e 	bl	8005594 <_malloc_r>
 8005678:	4605      	mov	r5, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d0f2      	beq.n	8005664 <_realloc_r+0x1c>
 800567e:	4631      	mov	r1, r6
 8005680:	4622      	mov	r2, r4
 8005682:	f7ff ff13 	bl	80054ac <memcpy>
 8005686:	4631      	mov	r1, r6
 8005688:	4638      	mov	r0, r7
 800568a:	f7ff ff37 	bl	80054fc <_free_r>
 800568e:	e7e9      	b.n	8005664 <_realloc_r+0x1c>
 8005690:	4635      	mov	r5, r6
 8005692:	e7e7      	b.n	8005664 <_realloc_r+0x1c>

08005694 <_sbrk_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	2300      	movs	r3, #0
 8005698:	4d05      	ldr	r5, [pc, #20]	; (80056b0 <_sbrk_r+0x1c>)
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	f7fc fd38 	bl	8002114 <_sbrk>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_sbrk_r+0x1a>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_sbrk_r+0x1a>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	200003c4 	.word	0x200003c4

080056b4 <__malloc_lock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__malloc_lock+0x8>)
 80056b6:	f000 b811 	b.w	80056dc <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	200003cc 	.word	0x200003cc

080056c0 <__malloc_unlock>:
 80056c0:	4801      	ldr	r0, [pc, #4]	; (80056c8 <__malloc_unlock+0x8>)
 80056c2:	f000 b80c 	b.w	80056de <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	200003cc 	.word	0x200003cc

080056cc <_malloc_usable_size_r>:
 80056cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d0:	1f18      	subs	r0, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfbc      	itt	lt
 80056d6:	580b      	ldrlt	r3, [r1, r0]
 80056d8:	18c0      	addlt	r0, r0, r3
 80056da:	4770      	bx	lr

080056dc <__retarget_lock_acquire_recursive>:
 80056dc:	4770      	bx	lr

080056de <__retarget_lock_release_recursive>:
 80056de:	4770      	bx	lr

080056e0 <_init>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr

080056ec <_fini>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr
