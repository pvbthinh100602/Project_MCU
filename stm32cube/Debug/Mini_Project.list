
Mini_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003adc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c50  08003c50  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003c50  08003c50  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c50  08003c50  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000088  08003ce0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08003ce0  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dc1  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e37  00000000  00000000  00034e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00037cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00038ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a11  00000000  00000000  000397a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116e2  00000000  00000000  000531b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b33b  00000000  00000000  00064893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efbce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000efc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bd0 	.word	0x08003bd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003bd0 	.word	0x08003bd0

0800014c <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000a4 	.word	0x200000a4

08000180 <fsm_auto_run>:
 *      Author: phamv
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	switch (status)
 8000184:	4b91      	ldr	r3, [pc, #580]	; (80003cc <fsm_auto_run+0x24c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	3b01      	subs	r3, #1
 800018a:	2b04      	cmp	r3, #4
 800018c:	f200 811b 	bhi.w	80003c6 <fsm_auto_run+0x246>
 8000190:	a201      	add	r2, pc, #4	; (adr r2, 8000198 <fsm_auto_run+0x18>)
 8000192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000196:	bf00      	nop
 8000198:	080001ad 	.word	0x080001ad
 800019c:	080001d1 	.word	0x080001d1
 80001a0:	08000247 	.word	0x08000247
 80001a4:	080002c5 	.word	0x080002c5
 80001a8:	0800033d 	.word	0x0800033d
	{
	case INIT:
		status=AUTO_RED_GREEN;
 80001ac:	4b87      	ldr	r3, [pc, #540]	; (80003cc <fsm_auto_run+0x24c>)
 80001ae:	2202      	movs	r2, #2
 80001b0:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b6:	f000 ffbd 	bl	8001134 <setTimer1>
		counter = max_red1;
 80001ba:	4b85      	ldr	r3, [pc, #532]	; (80003d0 <fsm_auto_run+0x250>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a85      	ldr	r2, [pc, #532]	; (80003d4 <fsm_auto_run+0x254>)
 80001c0:	6013      	str	r3, [r2, #0]
		displayCounter();
 80001c2:	f001 f959 	bl	8001478 <displayCounter>
		setTraffic1Red();
 80001c6:	f000 ffd1 	bl	800116c <setTraffic1Red>
		setTraffic2Green();
 80001ca:	f001 f81b 	bl	8001204 <setTraffic2Green>
		break;
 80001ce:	e0fa      	b.n	80003c6 <fsm_auto_run+0x246>
	case AUTO_RED_GREEN:
		isButtonPressed(0);
 80001d0:	2000      	movs	r0, #0
 80001d2:	f7ff ffbb 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 80001d6:	2002      	movs	r0, #2
 80001d8:	f7ff ffb8 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 80001dc:	2003      	movs	r0, #3
 80001de:	f7ff ffb5 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 80001e2:	4b7d      	ldr	r3, [pc, #500]	; (80003d8 <fsm_auto_run+0x258>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d115      	bne.n	8000216 <fsm_auto_run+0x96>
			counter--;
 80001ea:	4b7a      	ldr	r3, [pc, #488]	; (80003d4 <fsm_auto_run+0x254>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a78      	ldr	r2, [pc, #480]	; (80003d4 <fsm_auto_run+0x254>)
 80001f2:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80001f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f8:	f000 ff9c 	bl	8001134 <setTimer1>
			if(counter == max_yellow2){
 80001fc:	4b75      	ldr	r3, [pc, #468]	; (80003d4 <fsm_auto_run+0x254>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b76      	ldr	r3, [pc, #472]	; (80003dc <fsm_auto_run+0x25c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	429a      	cmp	r2, r3
 8000206:	d104      	bne.n	8000212 <fsm_auto_run+0x92>
				setTraffic2Yellow();
 8000208:	f001 f820 	bl	800124c <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 800020c:	4b6f      	ldr	r3, [pc, #444]	; (80003cc <fsm_auto_run+0x24c>)
 800020e:	2203      	movs	r2, #3
 8000210:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000212:	f001 f931 	bl	8001478 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000216:	2001      	movs	r0, #1
 8000218:	f7ff ff98 	bl	800014c <isButtonPressed>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	f000 80ca 	beq.w	80003b8 <fsm_auto_run+0x238>
			status=MAN_RED_GREEN;
 8000224:	4b69      	ldr	r3, [pc, #420]	; (80003cc <fsm_auto_run+0x24c>)
 8000226:	220b      	movs	r2, #11
 8000228:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 800022a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800022e:	f000 ff81 	bl	8001134 <setTimer1>
			setTraffic1Red();
 8000232:	f000 ff9b 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 8000236:	f000 ffe5 	bl	8001204 <setTraffic2Green>
			counter = 99;
 800023a:	4b66      	ldr	r3, [pc, #408]	; (80003d4 <fsm_auto_run+0x254>)
 800023c:	2263      	movs	r2, #99	; 0x63
 800023e:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000240:	f001 f91a 	bl	8001478 <displayCounter>
			break;
 8000244:	e0bf      	b.n	80003c6 <fsm_auto_run+0x246>
		}
		break;
	case AUTO_RED_YELLOW:
		isButtonPressed(0);
 8000246:	2000      	movs	r0, #0
 8000248:	f7ff ff80 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 800024c:	2002      	movs	r0, #2
 800024e:	f7ff ff7d 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 8000252:	2003      	movs	r0, #3
 8000254:	f7ff ff7a 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 8000258:	4b5f      	ldr	r3, [pc, #380]	; (80003d8 <fsm_auto_run+0x258>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d119      	bne.n	8000294 <fsm_auto_run+0x114>
			counter--;
 8000260:	4b5c      	ldr	r3, [pc, #368]	; (80003d4 <fsm_auto_run+0x254>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3b01      	subs	r3, #1
 8000266:	4a5b      	ldr	r2, [pc, #364]	; (80003d4 <fsm_auto_run+0x254>)
 8000268:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 800026a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026e:	f000 ff61 	bl	8001134 <setTimer1>
			if(counter == 0){
 8000272:	4b58      	ldr	r3, [pc, #352]	; (80003d4 <fsm_auto_run+0x254>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d10a      	bne.n	8000290 <fsm_auto_run+0x110>
				counter = max_green1;
 800027a:	4b59      	ldr	r3, [pc, #356]	; (80003e0 <fsm_auto_run+0x260>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a55      	ldr	r2, [pc, #340]	; (80003d4 <fsm_auto_run+0x254>)
 8000280:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 8000282:	f000 ff97 	bl	80011b4 <setTraffic1Green>
				setTraffic2Red();
 8000286:	f000 ff85 	bl	8001194 <setTraffic2Red>
				status=AUTO_GREEN_RED;
 800028a:	4b50      	ldr	r3, [pc, #320]	; (80003cc <fsm_auto_run+0x24c>)
 800028c:	2204      	movs	r2, #4
 800028e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000290:	f001 f8f2 	bl	8001478 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000294:	2001      	movs	r0, #1
 8000296:	f7ff ff59 	bl	800014c <isButtonPressed>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	f000 808d 	beq.w	80003bc <fsm_auto_run+0x23c>
			status=MAN_RED_GREEN;
 80002a2:	4b4a      	ldr	r3, [pc, #296]	; (80003cc <fsm_auto_run+0x24c>)
 80002a4:	220b      	movs	r2, #11
 80002a6:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 80002a8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80002ac:	f000 ff42 	bl	8001134 <setTimer1>
			setTraffic1Red();
 80002b0:	f000 ff5c 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 80002b4:	f000 ffa6 	bl	8001204 <setTraffic2Green>
			counter = 99;
 80002b8:	4b46      	ldr	r3, [pc, #280]	; (80003d4 <fsm_auto_run+0x254>)
 80002ba:	2263      	movs	r2, #99	; 0x63
 80002bc:	601a      	str	r2, [r3, #0]
			displayCounter();
 80002be:	f001 f8db 	bl	8001478 <displayCounter>
			break;
 80002c2:	e080      	b.n	80003c6 <fsm_auto_run+0x246>
		}
		break;

	case AUTO_GREEN_RED:
		isButtonPressed(0);
 80002c4:	2000      	movs	r0, #0
 80002c6:	f7ff ff41 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 80002ca:	2002      	movs	r0, #2
 80002cc:	f7ff ff3e 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 80002d0:	2003      	movs	r0, #3
 80002d2:	f7ff ff3b 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 80002d6:	4b40      	ldr	r3, [pc, #256]	; (80003d8 <fsm_auto_run+0x258>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d117      	bne.n	800030e <fsm_auto_run+0x18e>
			counter--;
 80002de:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <fsm_auto_run+0x254>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	4a3b      	ldr	r2, [pc, #236]	; (80003d4 <fsm_auto_run+0x254>)
 80002e6:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80002e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ec:	f000 ff22 	bl	8001134 <setTimer1>
			if(counter == 0){
 80002f0:	4b38      	ldr	r3, [pc, #224]	; (80003d4 <fsm_auto_run+0x254>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d108      	bne.n	800030a <fsm_auto_run+0x18a>
				counter = max_yellow1;
 80002f8:	4b3a      	ldr	r3, [pc, #232]	; (80003e4 <fsm_auto_run+0x264>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a35      	ldr	r2, [pc, #212]	; (80003d4 <fsm_auto_run+0x254>)
 80002fe:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 8000300:	f000 ff90 	bl	8001224 <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 8000304:	4b31      	ldr	r3, [pc, #196]	; (80003cc <fsm_auto_run+0x24c>)
 8000306:	2205      	movs	r2, #5
 8000308:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800030a:	f001 f8b5 	bl	8001478 <displayCounter>
		}

		if(isButtonPressed(1)){
 800030e:	2001      	movs	r0, #1
 8000310:	f7ff ff1c 	bl	800014c <isButtonPressed>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d052      	beq.n	80003c0 <fsm_auto_run+0x240>
			status=MAN_RED_GREEN;
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <fsm_auto_run+0x24c>)
 800031c:	220b      	movs	r2, #11
 800031e:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 8000320:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000324:	f000 ff06 	bl	8001134 <setTimer1>
			setTraffic1Red();
 8000328:	f000 ff20 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 800032c:	f000 ff6a 	bl	8001204 <setTraffic2Green>
			counter = 99;
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <fsm_auto_run+0x254>)
 8000332:	2263      	movs	r2, #99	; 0x63
 8000334:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000336:	f001 f89f 	bl	8001478 <displayCounter>
			break;
 800033a:	e044      	b.n	80003c6 <fsm_auto_run+0x246>
		}
		break;

	case AUTO_YELLOW_RED:
		isButtonPressed(0);
 800033c:	2000      	movs	r0, #0
 800033e:	f7ff ff05 	bl	800014c <isButtonPressed>
		isButtonPressed(2);
 8000342:	2002      	movs	r0, #2
 8000344:	f7ff ff02 	bl	800014c <isButtonPressed>
		isButtonPressed(3);
 8000348:	2003      	movs	r0, #3
 800034a:	f7ff feff 	bl	800014c <isButtonPressed>
		if(timer1_flag == 1){
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <fsm_auto_run+0x258>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d119      	bne.n	800038a <fsm_auto_run+0x20a>
			counter--;
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <fsm_auto_run+0x254>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3b01      	subs	r3, #1
 800035c:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <fsm_auto_run+0x254>)
 800035e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000364:	f000 fee6 	bl	8001134 <setTimer1>
			if(counter == 0){
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <fsm_auto_run+0x254>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d10a      	bne.n	8000386 <fsm_auto_run+0x206>
				counter = max_red1;
 8000370:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <fsm_auto_run+0x250>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <fsm_auto_run+0x254>)
 8000376:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 8000378:	f000 fef8 	bl	800116c <setTraffic1Red>
				setTraffic2Green();
 800037c:	f000 ff42 	bl	8001204 <setTraffic2Green>
				status=AUTO_RED_GREEN;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <fsm_auto_run+0x24c>)
 8000382:	2202      	movs	r2, #2
 8000384:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000386:	f001 f877 	bl	8001478 <displayCounter>
		}

		if(isButtonPressed(1)==1){
 800038a:	2001      	movs	r0, #1
 800038c:	f7ff fede 	bl	800014c <isButtonPressed>
 8000390:	4603      	mov	r3, r0
 8000392:	2b01      	cmp	r3, #1
 8000394:	d116      	bne.n	80003c4 <fsm_auto_run+0x244>
			status=MAN_RED_GREEN;
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <fsm_auto_run+0x24c>)
 8000398:	220b      	movs	r2, #11
 800039a:	601a      	str	r2, [r3, #0]
			setTimer1(60000);
 800039c:	f64e 2060 	movw	r0, #60000	; 0xea60
 80003a0:	f000 fec8 	bl	8001134 <setTimer1>
			setTraffic1Red();
 80003a4:	f000 fee2 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 80003a8:	f000 ff2c 	bl	8001204 <setTraffic2Green>
			counter = 99;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <fsm_auto_run+0x254>)
 80003ae:	2263      	movs	r2, #99	; 0x63
 80003b0:	601a      	str	r2, [r3, #0]
			displayCounter();
 80003b2:	f001 f861 	bl	8001478 <displayCounter>
			break;
 80003b6:	e006      	b.n	80003c6 <fsm_auto_run+0x246>
		break;
 80003b8:	bf00      	nop
 80003ba:	e004      	b.n	80003c6 <fsm_auto_run+0x246>
		break;
 80003bc:	bf00      	nop
 80003be:	e002      	b.n	80003c6 <fsm_auto_run+0x246>
		break;
 80003c0:	bf00      	nop
 80003c2:	e000      	b.n	80003c6 <fsm_auto_run+0x246>
		}
		break;
 80003c4:	bf00      	nop
	}

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200000b4 	.word	0x200000b4
 80003d0:	20000000 	.word	0x20000000
 80003d4:	200000b8 	.word	0x200000b8
 80003d8:	200000cc 	.word	0x200000cc
 80003dc:	20000014 	.word	0x20000014
 80003e0:	20000004 	.word	0x20000004
 80003e4:	20000008 	.word	0x20000008

080003e8 <fsm_manual_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	switch (status) {
 80003ec:	4b99      	ldr	r3, [pc, #612]	; (8000654 <fsm_manual_run+0x26c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3b0b      	subs	r3, #11
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	f200 8122 	bhi.w	800063c <fsm_manual_run+0x254>
 80003f8:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <fsm_manual_run+0x18>)
 80003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fe:	bf00      	nop
 8000400:	08000411 	.word	0x08000411
 8000404:	0800049b 	.word	0x0800049b
 8000408:	08000529 	.word	0x08000529
 800040c:	080005b5 	.word	0x080005b5
		case MAN_RED_GREEN:
			isButtonPressed(0);
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff fe9b 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000416:	2003      	movs	r0, #3
 8000418:	f7ff fe98 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 800041c:	4b8e      	ldr	r3, [pc, #568]	; (8000658 <fsm_manual_run+0x270>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d010      	beq.n	8000446 <fsm_manual_run+0x5e>
				status = AUTO_RED_YELLOW;
 8000424:	4b8b      	ldr	r3, [pc, #556]	; (8000654 <fsm_manual_run+0x26c>)
 8000426:	2203      	movs	r2, #3
 8000428:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800042a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042e:	f000 fe81 	bl	8001134 <setTimer1>
				counter = max_yellow2;
 8000432:	4b8a      	ldr	r3, [pc, #552]	; (800065c <fsm_manual_run+0x274>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a8a      	ldr	r2, [pc, #552]	; (8000660 <fsm_manual_run+0x278>)
 8000438:	6013      	str	r3, [r2, #0]
				displayCounter();
 800043a:	f001 f81d 	bl	8001478 <displayCounter>
				setTraffic1Red();
 800043e:	f000 fe95 	bl	800116c <setTraffic1Red>
				setTraffic2Yellow();
 8000442:	f000 ff03 	bl	800124c <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff fe80 	bl	800014c <isButtonPressed>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d014      	beq.n	800047c <fsm_manual_run+0x94>
				isButtonPressed(2);
 8000452:	2002      	movs	r0, #2
 8000454:	f7ff fe7a 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 8000458:	4b7e      	ldr	r3, [pc, #504]	; (8000654 <fsm_manual_run+0x26c>)
 800045a:	2215      	movs	r2, #21
 800045c:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800045e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000462:	f000 fe67 	bl	8001134 <setTimer1>
				counter = max_red1;
 8000466:	4b7f      	ldr	r3, [pc, #508]	; (8000664 <fsm_manual_run+0x27c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a7d      	ldr	r2, [pc, #500]	; (8000660 <fsm_manual_run+0x278>)
 800046c:	6013      	str	r3, [r2, #0]
				displayCounter();
 800046e:	f001 f803 	bl	8001478 <displayCounter>
				clearTraffic1();
 8000472:	f000 feb3 	bl	80011dc <clearTraffic1>
				clearTraffic2();
 8000476:	f000 fef9 	bl	800126c <clearTraffic2>
				break;
 800047a:	e0e8      	b.n	800064e <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 800047c:	2002      	movs	r0, #2
 800047e:	f7ff fe65 	bl	800014c <isButtonPressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	f000 80db 	beq.w	8000640 <fsm_manual_run+0x258>
				status = MAN_RED_YELLOW;
 800048a:	4b72      	ldr	r3, [pc, #456]	; (8000654 <fsm_manual_run+0x26c>)
 800048c:	220c      	movs	r2, #12
 800048e:	601a      	str	r2, [r3, #0]
				setTimer1(60000);
 8000490:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000494:	f000 fe4e 	bl	8001134 <setTimer1>
			}
			break;
 8000498:	e0d2      	b.n	8000640 <fsm_manual_run+0x258>

		case MAN_RED_YELLOW:
			isButtonPressed(0);
 800049a:	2000      	movs	r0, #0
 800049c:	f7ff fe56 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 80004a0:	2003      	movs	r0, #3
 80004a2:	f7ff fe53 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 80004a6:	4b6c      	ldr	r3, [pc, #432]	; (8000658 <fsm_manual_run+0x270>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d010      	beq.n	80004d0 <fsm_manual_run+0xe8>
				status = AUTO_GREEN_RED;
 80004ae:	4b69      	ldr	r3, [pc, #420]	; (8000654 <fsm_manual_run+0x26c>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80004b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b8:	f000 fe3c 	bl	8001134 <setTimer1>
				counter = max_green1;
 80004bc:	4b6a      	ldr	r3, [pc, #424]	; (8000668 <fsm_manual_run+0x280>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a67      	ldr	r2, [pc, #412]	; (8000660 <fsm_manual_run+0x278>)
 80004c2:	6013      	str	r3, [r2, #0]
				displayCounter();
 80004c4:	f000 ffd8 	bl	8001478 <displayCounter>
				setTraffic1Green();
 80004c8:	f000 fe74 	bl	80011b4 <setTraffic1Green>
				setTraffic2Red();
 80004cc:	f000 fe62 	bl	8001194 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff fe3b 	bl	800014c <isButtonPressed>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d016      	beq.n	800050a <fsm_manual_run+0x122>
				isButtonPressed(2);
 80004dc:	2002      	movs	r0, #2
 80004de:	f7ff fe35 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 80004e2:	4b5c      	ldr	r3, [pc, #368]	; (8000654 <fsm_manual_run+0x26c>)
 80004e4:	2215      	movs	r2, #21
 80004e6:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80004e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ec:	f000 fe22 	bl	8001134 <setTimer1>
				counter = max_red1;
 80004f0:	4b5c      	ldr	r3, [pc, #368]	; (8000664 <fsm_manual_run+0x27c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a5a      	ldr	r2, [pc, #360]	; (8000660 <fsm_manual_run+0x278>)
 80004f6:	6013      	str	r3, [r2, #0]
				displayCounter();
 80004f8:	f000 ffbe 	bl	8001478 <displayCounter>
				clearTraffic1();
 80004fc:	f000 fe6e 	bl	80011dc <clearTraffic1>
				clearTraffic2();
 8000500:	f000 feb4 	bl	800126c <clearTraffic2>
				isButtonPressed(2);
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe21 	bl	800014c <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 800050a:	2002      	movs	r0, #2
 800050c:	f7ff fe1e 	bl	800014c <isButtonPressed>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	f000 8096 	beq.w	8000644 <fsm_manual_run+0x25c>
				status = MAN_GREEN_RED;
 8000518:	4b4e      	ldr	r3, [pc, #312]	; (8000654 <fsm_manual_run+0x26c>)
 800051a:	220d      	movs	r2, #13
 800051c:	601a      	str	r2, [r3, #0]
				setTimer1(60000);
 800051e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000522:	f000 fe07 	bl	8001134 <setTimer1>
			}


			break;
 8000526:	e08d      	b.n	8000644 <fsm_manual_run+0x25c>

		case MAN_GREEN_RED:
			isButtonPressed(0);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fe0f 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 800052e:	2003      	movs	r0, #3
 8000530:	f7ff fe0c 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 8000534:	4b48      	ldr	r3, [pc, #288]	; (8000658 <fsm_manual_run+0x270>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d010      	beq.n	800055e <fsm_manual_run+0x176>
				status = AUTO_YELLOW_RED;
 800053c:	4b45      	ldr	r3, [pc, #276]	; (8000654 <fsm_manual_run+0x26c>)
 800053e:	2205      	movs	r2, #5
 8000540:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000546:	f000 fdf5 	bl	8001134 <setTimer1>
				counter = max_yellow1;
 800054a:	4b48      	ldr	r3, [pc, #288]	; (800066c <fsm_manual_run+0x284>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a44      	ldr	r2, [pc, #272]	; (8000660 <fsm_manual_run+0x278>)
 8000550:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000552:	f000 ff91 	bl	8001478 <displayCounter>
				setTraffic1Yellow();
 8000556:	f000 fe65 	bl	8001224 <setTraffic1Yellow>
				setTraffic2Red();
 800055a:	f000 fe1b 	bl	8001194 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fdf4 	bl	800014c <isButtonPressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d016      	beq.n	8000598 <fsm_manual_run+0x1b0>
				isButtonPressed(2);
 800056a:	2002      	movs	r0, #2
 800056c:	f7ff fdee 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 8000570:	4b38      	ldr	r3, [pc, #224]	; (8000654 <fsm_manual_run+0x26c>)
 8000572:	2215      	movs	r2, #21
 8000574:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057a:	f000 fddb 	bl	8001134 <setTimer1>
				counter = max_red1;
 800057e:	4b39      	ldr	r3, [pc, #228]	; (8000664 <fsm_manual_run+0x27c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a37      	ldr	r2, [pc, #220]	; (8000660 <fsm_manual_run+0x278>)
 8000584:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000586:	f000 ff77 	bl	8001478 <displayCounter>
				clearTraffic1();
 800058a:	f000 fe27 	bl	80011dc <clearTraffic1>
				clearTraffic2();
 800058e:	f000 fe6d 	bl	800126c <clearTraffic2>
				isButtonPressed(2);
 8000592:	2002      	movs	r0, #2
 8000594:	f7ff fdda 	bl	800014c <isButtonPressed>
			}

			if (isButtonPressed(2)) {
 8000598:	2002      	movs	r0, #2
 800059a:	f7ff fdd7 	bl	800014c <isButtonPressed>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d051      	beq.n	8000648 <fsm_manual_run+0x260>
				status = MAN_YELLOW_RED;
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <fsm_manual_run+0x26c>)
 80005a6:	220e      	movs	r2, #14
 80005a8:	601a      	str	r2, [r3, #0]
				setTimer1(60000);
 80005aa:	f64e 2060 	movw	r0, #60000	; 0xea60
 80005ae:	f000 fdc1 	bl	8001134 <setTimer1>
			}

			break;
 80005b2:	e049      	b.n	8000648 <fsm_manual_run+0x260>

		case MAN_YELLOW_RED:
			isButtonPressed(0);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff fdc9 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f7ff fdc6 	bl	800014c <isButtonPressed>
			if(timer1_flag) {
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <fsm_manual_run+0x270>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d010      	beq.n	80005ea <fsm_manual_run+0x202>
				status = AUTO_RED_GREEN;
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <fsm_manual_run+0x26c>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 fdaf 	bl	8001134 <setTimer1>
				counter = max_red1;
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <fsm_manual_run+0x27c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a21      	ldr	r2, [pc, #132]	; (8000660 <fsm_manual_run+0x278>)
 80005dc:	6013      	str	r3, [r2, #0]
				displayCounter();
 80005de:	f000 ff4b 	bl	8001478 <displayCounter>
				setTraffic1Red();
 80005e2:	f000 fdc3 	bl	800116c <setTraffic1Red>
				setTraffic2Green();
 80005e6:	f000 fe0d 	bl	8001204 <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fdae 	bl	800014c <isButtonPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d014      	beq.n	8000620 <fsm_manual_run+0x238>
				isButtonPressed(2);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f7ff fda8 	bl	800014c <isButtonPressed>
				status = TUNING_RED1;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <fsm_manual_run+0x26c>)
 80005fe:	2215      	movs	r2, #21
 8000600:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f000 fd95 	bl	8001134 <setTimer1>
				counter = max_red1;
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <fsm_manual_run+0x27c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <fsm_manual_run+0x278>)
 8000610:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000612:	f000 ff31 	bl	8001478 <displayCounter>
				clearTraffic1();
 8000616:	f000 fde1 	bl	80011dc <clearTraffic1>
				clearTraffic2();
 800061a:	f000 fe27 	bl	800126c <clearTraffic2>
				break;
 800061e:	e016      	b.n	800064e <fsm_manual_run+0x266>
			}

			if (isButtonPressed(2)) {
 8000620:	2002      	movs	r0, #2
 8000622:	f7ff fd93 	bl	800014c <isButtonPressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00f      	beq.n	800064c <fsm_manual_run+0x264>
				status = MAN_RED_GREEN;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <fsm_manual_run+0x26c>)
 800062e:	220b      	movs	r2, #11
 8000630:	601a      	str	r2, [r3, #0]
				setTimer1(60000);
 8000632:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000636:	f000 fd7d 	bl	8001134 <setTimer1>
			}


			break;
 800063a:	e007      	b.n	800064c <fsm_manual_run+0x264>
		default:
			break;
 800063c:	bf00      	nop
 800063e:	e006      	b.n	800064e <fsm_manual_run+0x266>
			break;
 8000640:	bf00      	nop
 8000642:	e004      	b.n	800064e <fsm_manual_run+0x266>
			break;
 8000644:	bf00      	nop
 8000646:	e002      	b.n	800064e <fsm_manual_run+0x266>
			break;
 8000648:	bf00      	nop
 800064a:	e000      	b.n	800064e <fsm_manual_run+0x266>
			break;
 800064c:	bf00      	nop
	}
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000b4 	.word	0x200000b4
 8000658:	200000cc 	.word	0x200000cc
 800065c:	20000014 	.word	0x20000014
 8000660:	200000b8 	.word	0x200000b8
 8000664:	20000000 	.word	0x20000000
 8000668:	20000004 	.word	0x20000004
 800066c:	20000008 	.word	0x20000008

08000670 <fsm_pedestrian_run>:
 *      Author: phamv
 */

#include "fsm_pedestrian.h"

void fsm_pedestrian_run(){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <fsm_tuning_run>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "fsm_tuning.h"

void fsm_tuning_run(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	switch(status){
 8000680:	4bb8      	ldr	r3, [pc, #736]	; (8000964 <fsm_tuning_run+0x2e8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3b15      	subs	r3, #21
 8000686:	2b05      	cmp	r3, #5
 8000688:	f200 827b 	bhi.w	8000b82 <fsm_tuning_run+0x506>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <fsm_tuning_run+0x18>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006ad 	.word	0x080006ad
 8000698:	08000775 	.word	0x08000775
 800069c:	0800083d 	.word	0x0800083d
 80006a0:	08000909 	.word	0x08000909
 80006a4:	080009f3 	.word	0x080009f3
 80006a8:	08000abb 	.word	0x08000abb
	case TUNING_RED1:

		if(timer1_flag){
 80006ac:	4bae      	ldr	r3, [pc, #696]	; (8000968 <fsm_tuning_run+0x2ec>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 80006b4:	4bac      	ldr	r3, [pc, #688]	; (8000968 <fsm_tuning_run+0x2ec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80006ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006be:	f000 fd39 	bl	8001134 <setTimer1>
			toggleTraffic1Red();
 80006c2:	f000 fde3 	bl	800128c <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff fd40 	bl	800014c <isButtonPressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d019      	beq.n	8000706 <fsm_tuning_run+0x8a>
			isButtonPressed(2);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff fd3a 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 80006d8:	2003      	movs	r0, #3
 80006da:	f7ff fd37 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 80006de:	4ba1      	ldr	r3, [pc, #644]	; (8000964 <fsm_tuning_run+0x2e8>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 80006e4:	f000 fe1c 	bl	8001320 <acceptTraffic1Red>
			setTimer1(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f000 fd22 	bl	8001134 <setTimer1>
			counter = max_red1;
 80006f0:	4b9e      	ldr	r3, [pc, #632]	; (800096c <fsm_tuning_run+0x2f0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a9e      	ldr	r2, [pc, #632]	; (8000970 <fsm_tuning_run+0x2f4>)
 80006f6:	6013      	str	r3, [r2, #0]
			displayCounter();
 80006f8:	f000 febe 	bl	8001478 <displayCounter>
			setTraffic1Red();
 80006fc:	f000 fd36 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 8000700:	f000 fd80 	bl	8001204 <setTraffic2Green>
			break;
 8000704:	e24a      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(0)){
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff fd20 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff fd1d 	bl	800014c <isButtonPressed>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d016      	beq.n	8000746 <fsm_tuning_run+0xca>
			isButtonPressed(3);
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff fd17 	bl	800014c <isButtonPressed>
			status = TUNING_RED2;
 800071e:	4b91      	ldr	r3, [pc, #580]	; (8000964 <fsm_tuning_run+0x2e8>)
 8000720:	2216      	movs	r2, #22
 8000722:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f000 fd04 	bl	8001134 <setTimer1>
			acceptTraffic1Red();
 800072c:	f000 fdf8 	bl	8001320 <acceptTraffic1Red>
			counter = max_red2;
 8000730:	4b90      	ldr	r3, [pc, #576]	; (8000974 <fsm_tuning_run+0x2f8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a8e      	ldr	r2, [pc, #568]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000736:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000738:	f000 fe9e 	bl	8001478 <displayCounter>
			clearTraffic1();
 800073c:	f000 fd4e 	bl	80011dc <clearTraffic1>
			clearTraffic2();
 8000740:	f000 fd94 	bl	800126c <clearTraffic2>
			break;
 8000744:	e22a      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(3)){
 8000746:	2003      	movs	r0, #3
 8000748:	f7ff fd00 	bl	800014c <isButtonPressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	f000 8219 	beq.w	8000b86 <fsm_tuning_run+0x50a>
			counter++;
 8000754:	4b86      	ldr	r3, [pc, #536]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a85      	ldr	r2, [pc, #532]	; (8000970 <fsm_tuning_run+0x2f4>)
 800075c:	6013      	str	r3, [r2, #0]
			displayCounter();
 800075e:	f000 fe8b 	bl	8001478 <displayCounter>
			if(counter > 99){
 8000762:	4b83      	ldr	r3, [pc, #524]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b63      	cmp	r3, #99	; 0x63
 8000768:	f340 820d 	ble.w	8000b86 <fsm_tuning_run+0x50a>
				counter = 2;
 800076c:	4b80      	ldr	r3, [pc, #512]	; (8000970 <fsm_tuning_run+0x2f4>)
 800076e:	2202      	movs	r2, #2
 8000770:	601a      	str	r2, [r3, #0]
			}
		}

		break;
 8000772:	e208      	b.n	8000b86 <fsm_tuning_run+0x50a>
	case TUNING_RED2:
		if(timer1_flag){
 8000774:	4b7c      	ldr	r3, [pc, #496]	; (8000968 <fsm_tuning_run+0x2ec>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d008      	beq.n	800078e <fsm_tuning_run+0x112>
			timer1_flag = 0;
 800077c:	4b7a      	ldr	r3, [pc, #488]	; (8000968 <fsm_tuning_run+0x2ec>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f000 fcd5 	bl	8001134 <setTimer1>
			toggleTraffic2Red();
 800078a:	f000 fd8b 	bl	80012a4 <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fcdc 	bl	800014c <isButtonPressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d019      	beq.n	80007ce <fsm_tuning_run+0x152>
			isButtonPressed(2);
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff fcd6 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f7ff fcd3 	bl	800014c <isButtonPressed>
			acceptTraffic2Red();
 80007a6:	f000 fddd 	bl	8001364 <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 80007aa:	4b6e      	ldr	r3, [pc, #440]	; (8000964 <fsm_tuning_run+0x2e8>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fcbe 	bl	8001134 <setTimer1>
			counter = max_red1;
 80007b8:	4b6c      	ldr	r3, [pc, #432]	; (800096c <fsm_tuning_run+0x2f0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a6c      	ldr	r2, [pc, #432]	; (8000970 <fsm_tuning_run+0x2f4>)
 80007be:	6013      	str	r3, [r2, #0]
			displayCounter();
 80007c0:	f000 fe5a 	bl	8001478 <displayCounter>
			setTraffic1Red();
 80007c4:	f000 fcd2 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 80007c8:	f000 fd1c 	bl	8001204 <setTraffic2Green>
			break;
 80007cc:	e1e6      	b.n	8000b9c <fsm_tuning_run+0x520>
		}
		if(isButtonPressed(0)){
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff fcbc 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff fcb9 	bl	800014c <isButtonPressed>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d016      	beq.n	800080e <fsm_tuning_run+0x192>
			isButtonPressed(3);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f7ff fcb3 	bl	800014c <isButtonPressed>
			status = TUNING_GREEN1;
 80007e6:	4b5f      	ldr	r3, [pc, #380]	; (8000964 <fsm_tuning_run+0x2e8>)
 80007e8:	2217      	movs	r2, #23
 80007ea:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80007ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f0:	f000 fca0 	bl	8001134 <setTimer1>
			acceptTraffic2Red();
 80007f4:	f000 fdb6 	bl	8001364 <acceptTraffic2Red>
			counter = max_green1;
 80007f8:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <fsm_tuning_run+0x2fc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <fsm_tuning_run+0x2f4>)
 80007fe:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000800:	f000 fe3a 	bl	8001478 <displayCounter>
			clearTraffic1();
 8000804:	f000 fcea 	bl	80011dc <clearTraffic1>
			clearTraffic2();
 8000808:	f000 fd30 	bl	800126c <clearTraffic2>
			break;
 800080c:	e1c6      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(3)){
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff fc9c 	bl	800014c <isButtonPressed>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	f000 81b7 	beq.w	8000b8a <fsm_tuning_run+0x50e>
			counter++;
 800081c:	4b54      	ldr	r3, [pc, #336]	; (8000970 <fsm_tuning_run+0x2f4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a53      	ldr	r2, [pc, #332]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000824:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000826:	f000 fe27 	bl	8001478 <displayCounter>
			if(counter > 99){
 800082a:	4b51      	ldr	r3, [pc, #324]	; (8000970 <fsm_tuning_run+0x2f4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b63      	cmp	r3, #99	; 0x63
 8000830:	f340 81ab 	ble.w	8000b8a <fsm_tuning_run+0x50e>
				counter = 2;
 8000834:	4b4e      	ldr	r3, [pc, #312]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000836:	2202      	movs	r2, #2
 8000838:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 800083a:	e1a6      	b.n	8000b8a <fsm_tuning_run+0x50e>
	case TUNING_GREEN1:

		if(timer1_flag){
 800083c:	4b4a      	ldr	r3, [pc, #296]	; (8000968 <fsm_tuning_run+0x2ec>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d008      	beq.n	8000856 <fsm_tuning_run+0x1da>
			timer1_flag = 0;
 8000844:	4b48      	ldr	r3, [pc, #288]	; (8000968 <fsm_tuning_run+0x2ec>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800084a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084e:	f000 fc71 	bl	8001134 <setTimer1>
			toggleTraffic1Green();
 8000852:	f000 fd31 	bl	80012b8 <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff fc78 	bl	800014c <isButtonPressed>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d019      	beq.n	8000896 <fsm_tuning_run+0x21a>
			isButtonPressed(2);
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff fc72 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000868:	2003      	movs	r0, #3
 800086a:	f7ff fc6f 	bl	800014c <isButtonPressed>
			acceptTraffic1Green();
 800086e:	f000 fd9b 	bl	80013a8 <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <fsm_tuning_run+0x2e8>)
 8000874:	2202      	movs	r2, #2
 8000876:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f000 fc5a 	bl	8001134 <setTimer1>
			counter = max_red1;
 8000880:	4b3a      	ldr	r3, [pc, #232]	; (800096c <fsm_tuning_run+0x2f0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a3a      	ldr	r2, [pc, #232]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000886:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000888:	f000 fdf6 	bl	8001478 <displayCounter>
			setTraffic1Red();
 800088c:	f000 fc6e 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 8000890:	f000 fcb8 	bl	8001204 <setTraffic2Green>
			break;
 8000894:	e182      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(0)){
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fc58 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fc55 	bl	800014c <isButtonPressed>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d016      	beq.n	80008d6 <fsm_tuning_run+0x25a>
			isButtonPressed(3);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f7ff fc4f 	bl	800014c <isButtonPressed>
			status = TUNING_GREEN2;
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <fsm_tuning_run+0x2e8>)
 80008b0:	2218      	movs	r2, #24
 80008b2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fc3c 	bl	8001134 <setTimer1>
			acceptTraffic1Green();
 80008bc:	f000 fd74 	bl	80013a8 <acceptTraffic1Green>
			counter = max_green2;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <fsm_tuning_run+0x300>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a2a      	ldr	r2, [pc, #168]	; (8000970 <fsm_tuning_run+0x2f4>)
 80008c6:	6013      	str	r3, [r2, #0]
			displayCounter();
 80008c8:	f000 fdd6 	bl	8001478 <displayCounter>
			clearTraffic1();
 80008cc:	f000 fc86 	bl	80011dc <clearTraffic1>
			clearTraffic2();
 80008d0:	f000 fccc 	bl	800126c <clearTraffic2>
			break;
 80008d4:	e162      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(3)){
 80008d6:	2003      	movs	r0, #3
 80008d8:	f7ff fc38 	bl	800014c <isButtonPressed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 8155 	beq.w	8000b8e <fsm_tuning_run+0x512>
			counter++;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <fsm_tuning_run+0x2f4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <fsm_tuning_run+0x2f4>)
 80008ec:	6013      	str	r3, [r2, #0]
			displayCounter();
 80008ee:	f000 fdc3 	bl	8001478 <displayCounter>
			if(counter > max_red2 - 1){
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <fsm_tuning_run+0x2f8>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <fsm_tuning_run+0x2f4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	f300 8147 	bgt.w	8000b8e <fsm_tuning_run+0x512>
				counter = 1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000906:	e142      	b.n	8000b8e <fsm_tuning_run+0x512>
	case TUNING_GREEN2:

		if(timer1_flag){
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <fsm_tuning_run+0x2ec>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d008      	beq.n	8000922 <fsm_tuning_run+0x2a6>
			timer1_flag = 0;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <fsm_tuning_run+0x2ec>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f000 fc0b 	bl	8001134 <setTimer1>
			toggleTraffic2Green();
 800091e:	f000 fcd5 	bl	80012cc <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff fc12 	bl	800014c <isButtonPressed>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d028      	beq.n	8000980 <fsm_tuning_run+0x304>
			isButtonPressed(2);
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fc0c 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff fc09 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <fsm_tuning_run+0x2e8>)
 800093c:	2202      	movs	r2, #2
 800093e:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 8000940:	f000 fd4c 	bl	80013dc <acceptTraffic2Green>
			setTimer1(1000);
 8000944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000948:	f000 fbf4 	bl	8001134 <setTimer1>
			counter = max_red1;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <fsm_tuning_run+0x2f0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <fsm_tuning_run+0x2f4>)
 8000952:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000954:	f000 fd90 	bl	8001478 <displayCounter>
			setTraffic1Red();
 8000958:	f000 fc08 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 800095c:	f000 fc52 	bl	8001204 <setTraffic2Green>
			break;
 8000960:	e11c      	b.n	8000b9c <fsm_tuning_run+0x520>
 8000962:	bf00      	nop
 8000964:	200000b4 	.word	0x200000b4
 8000968:	200000cc 	.word	0x200000cc
 800096c:	20000000 	.word	0x20000000
 8000970:	200000b8 	.word	0x200000b8
 8000974:	2000000c 	.word	0x2000000c
 8000978:	20000004 	.word	0x20000004
 800097c:	20000010 	.word	0x20000010
		}

		if(isButtonPressed(0)){
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fbe3 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fbe0 	bl	800014c <isButtonPressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d016      	beq.n	80009c0 <fsm_tuning_run+0x344>
			isButtonPressed(3);
 8000992:	2003      	movs	r0, #3
 8000994:	f7ff fbda 	bl	800014c <isButtonPressed>
			status = TUNING_YELLOW1;
 8000998:	4b81      	ldr	r3, [pc, #516]	; (8000ba0 <fsm_tuning_run+0x524>)
 800099a:	2219      	movs	r2, #25
 800099c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800099e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a2:	f000 fbc7 	bl	8001134 <setTimer1>
			acceptTraffic2Green();
 80009a6:	f000 fd19 	bl	80013dc <acceptTraffic2Green>
			counter = max_yellow1;
 80009aa:	4b7e      	ldr	r3, [pc, #504]	; (8000ba4 <fsm_tuning_run+0x528>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a7e      	ldr	r2, [pc, #504]	; (8000ba8 <fsm_tuning_run+0x52c>)
 80009b0:	6013      	str	r3, [r2, #0]
			displayCounter();
 80009b2:	f000 fd61 	bl	8001478 <displayCounter>
			clearTraffic1();
 80009b6:	f000 fc11 	bl	80011dc <clearTraffic1>
			clearTraffic2();
 80009ba:	f000 fc57 	bl	800126c <clearTraffic2>
			break;
 80009be:	e0ed      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(3)){
 80009c0:	2003      	movs	r0, #3
 80009c2:	f7ff fbc3 	bl	800014c <isButtonPressed>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 80e2 	beq.w	8000b92 <fsm_tuning_run+0x516>
			counter++;
 80009ce:	4b76      	ldr	r3, [pc, #472]	; (8000ba8 <fsm_tuning_run+0x52c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a74      	ldr	r2, [pc, #464]	; (8000ba8 <fsm_tuning_run+0x52c>)
 80009d6:	6013      	str	r3, [r2, #0]
			displayCounter();
 80009d8:	f000 fd4e 	bl	8001478 <displayCounter>
			if(counter > max_red1 - 1){
 80009dc:	4b73      	ldr	r3, [pc, #460]	; (8000bac <fsm_tuning_run+0x530>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b71      	ldr	r3, [pc, #452]	; (8000ba8 <fsm_tuning_run+0x52c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	f300 80d4 	bgt.w	8000b92 <fsm_tuning_run+0x516>
				counter = 1;
 80009ea:	4b6f      	ldr	r3, [pc, #444]	; (8000ba8 <fsm_tuning_run+0x52c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80009f0:	e0cf      	b.n	8000b92 <fsm_tuning_run+0x516>
	case TUNING_YELLOW1:
		if(timer1_flag){
 80009f2:	4b6f      	ldr	r3, [pc, #444]	; (8000bb0 <fsm_tuning_run+0x534>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d008      	beq.n	8000a0c <fsm_tuning_run+0x390>
			timer1_flag = 0;
 80009fa:	4b6d      	ldr	r3, [pc, #436]	; (8000bb0 <fsm_tuning_run+0x534>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a04:	f000 fb96 	bl	8001134 <setTimer1>
			toggleTraffic1Yellow();
 8000a08:	f000 fc6a 	bl	80012e0 <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fb9d 	bl	800014c <isButtonPressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d019      	beq.n	8000a4c <fsm_tuning_run+0x3d0>
			isButtonPressed(2);
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff fb97 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f7ff fb94 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000a24:	4b5e      	ldr	r3, [pc, #376]	; (8000ba0 <fsm_tuning_run+0x524>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 8000a2a:	f000 fcf1 	bl	8001410 <acceptTraffic1Yellow>
			setTimer1(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a32:	f000 fb7f 	bl	8001134 <setTimer1>
			counter = max_red1;
 8000a36:	4b5d      	ldr	r3, [pc, #372]	; (8000bac <fsm_tuning_run+0x530>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a5b      	ldr	r2, [pc, #364]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000a3c:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000a3e:	f000 fd1b 	bl	8001478 <displayCounter>
			setTraffic1Red();
 8000a42:	f000 fb93 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 8000a46:	f000 fbdd 	bl	8001204 <setTraffic2Green>
			break;
 8000a4a:	e0a7      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(0)){
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fb7d 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000a52:	2002      	movs	r0, #2
 8000a54:	f7ff fb7a 	bl	800014c <isButtonPressed>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d016      	beq.n	8000a8c <fsm_tuning_run+0x410>
			isButtonPressed(3);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f7ff fb74 	bl	800014c <isButtonPressed>
			status = TUNING_YELLOW2;
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <fsm_tuning_run+0x524>)
 8000a66:	221a      	movs	r2, #26
 8000a68:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f000 fb61 	bl	8001134 <setTimer1>
			acceptTraffic1Yellow();
 8000a72:	f000 fccd 	bl	8001410 <acceptTraffic1Yellow>
			counter = max_yellow2;
 8000a76:	4b4f      	ldr	r3, [pc, #316]	; (8000bb4 <fsm_tuning_run+0x538>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000a7c:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000a7e:	f000 fcfb 	bl	8001478 <displayCounter>
			clearTraffic1();
 8000a82:	f000 fbab 	bl	80011dc <clearTraffic1>
			clearTraffic2();
 8000a86:	f000 fbf1 	bl	800126c <clearTraffic2>
			break;
 8000a8a:	e087      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(3)){
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f7ff fb5d 	bl	800014c <isButtonPressed>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d07e      	beq.n	8000b96 <fsm_tuning_run+0x51a>
			counter++;
 8000a98:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a42      	ldr	r2, [pc, #264]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000aa0:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000aa2:	f000 fce9 	bl	8001478 <displayCounter>
			if(counter > max_red2 - 1){
 8000aa6:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <fsm_tuning_run+0x53c>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dc71      	bgt.n	8000b96 <fsm_tuning_run+0x51a>
				counter = 1;
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000ab8:	e06d      	b.n	8000b96 <fsm_tuning_run+0x51a>
	case TUNING_YELLOW2:
		if(timer1_flag){
 8000aba:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <fsm_tuning_run+0x534>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d008      	beq.n	8000ad4 <fsm_tuning_run+0x458>
			timer1_flag = 0;
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <fsm_tuning_run+0x534>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f000 fb32 	bl	8001134 <setTimer1>
			toggleTraffic2Yellow();
 8000ad0:	f000 fc18 	bl	8001304 <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff fb39 	bl	800014c <isButtonPressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d019      	beq.n	8000b14 <fsm_tuning_run+0x498>
			isButtonPressed(2);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff fb33 	bl	800014c <isButtonPressed>
			isButtonPressed(3);
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f7ff fb30 	bl	800014c <isButtonPressed>
			status = AUTO_RED_GREEN;
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <fsm_tuning_run+0x524>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 8000af2:	f000 fca7 	bl	8001444 <acceptTraffic2Yellow>
			setTimer1(1000);
 8000af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afa:	f000 fb1b 	bl	8001134 <setTimer1>
			counter = max_red1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <fsm_tuning_run+0x530>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000b04:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000b06:	f000 fcb7 	bl	8001478 <displayCounter>
			setTraffic1Red();
 8000b0a:	f000 fb2f 	bl	800116c <setTraffic1Red>
			setTraffic2Green();
 8000b0e:	f000 fb79 	bl	8001204 <setTraffic2Green>
			break;
 8000b12:	e043      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(0)){
 8000b14:	2000      	movs	r0, #0
 8000b16:	f7ff fb19 	bl	800014c <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fb16 	bl	800014c <isButtonPressed>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d016      	beq.n	8000b54 <fsm_tuning_run+0x4d8>
			isButtonPressed(3);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f7ff fb10 	bl	800014c <isButtonPressed>
			status = TUNING_RED1;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <fsm_tuning_run+0x524>)
 8000b2e:	2215      	movs	r2, #21
 8000b30:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b36:	f000 fafd 	bl	8001134 <setTimer1>
			acceptTraffic2Yellow();
 8000b3a:	f000 fc83 	bl	8001444 <acceptTraffic2Yellow>
			counter = max_red1;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <fsm_tuning_run+0x530>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000b44:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000b46:	f000 fc97 	bl	8001478 <displayCounter>
			clearTraffic1();
 8000b4a:	f000 fb47 	bl	80011dc <clearTraffic1>
			clearTraffic2();
 8000b4e:	f000 fb8d 	bl	800126c <clearTraffic2>
			break;
 8000b52:	e023      	b.n	8000b9c <fsm_tuning_run+0x520>
		}

		if(isButtonPressed(3)){
 8000b54:	2003      	movs	r0, #3
 8000b56:	f7ff faf9 	bl	800014c <isButtonPressed>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01c      	beq.n	8000b9a <fsm_tuning_run+0x51e>
			counter++;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000b68:	6013      	str	r3, [r2, #0]
			displayCounter();
 8000b6a:	f000 fc85 	bl	8001478 <displayCounter>
			if(counter > max_red1 - 1){
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <fsm_tuning_run+0x530>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dc0f      	bgt.n	8000b9a <fsm_tuning_run+0x51e>
				counter = 1;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <fsm_tuning_run+0x52c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000b80:	e00b      	b.n	8000b9a <fsm_tuning_run+0x51e>
	default:
		break;
 8000b82:	bf00      	nop
 8000b84:	e00a      	b.n	8000b9c <fsm_tuning_run+0x520>
		break;
 8000b86:	bf00      	nop
 8000b88:	e008      	b.n	8000b9c <fsm_tuning_run+0x520>
		break;
 8000b8a:	bf00      	nop
 8000b8c:	e006      	b.n	8000b9c <fsm_tuning_run+0x520>
		break;
 8000b8e:	bf00      	nop
 8000b90:	e004      	b.n	8000b9c <fsm_tuning_run+0x520>
		break;
 8000b92:	bf00      	nop
 8000b94:	e002      	b.n	8000b9c <fsm_tuning_run+0x520>
		break;
 8000b96:	bf00      	nop
 8000b98:	e000      	b.n	8000b9c <fsm_tuning_run+0x520>
		break;
 8000b9a:	bf00      	nop
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000b4 	.word	0x200000b4
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200000b8 	.word	0x200000b8
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	200000cc 	.word	0x200000cc
 8000bb4:	20000014 	.word	0x20000014
 8000bb8:	2000000c 	.word	0x2000000c

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc0:	f000 fcae 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc4:	f000 f81c 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc8:	f000 f8d2 	bl	8000d70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bcc:	f000 f85a 	bl	8000c84 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bd0:	f000 f8a4 	bl	8000d1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8000bd4:	f000 f94b 	bl	8000e6e <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <main+0x3c>)
 8000bda:	f001 fce1 	bl	80025a0 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <main+0x40>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_auto_run();
 8000be4:	f7ff facc 	bl	8000180 <fsm_auto_run>
	  fsm_manual_run();
 8000be8:	f7ff fbfe 	bl	80003e8 <fsm_manual_run>
	  fsm_tuning_run();
 8000bec:	f7ff fd46 	bl	800067c <fsm_tuning_run>
	  fsm_pedestrian_run();
 8000bf0:	f7ff fd3e 	bl	8000670 <fsm_pedestrian_run>
	  fsm_auto_run();
 8000bf4:	e7f6      	b.n	8000be4 <main+0x28>
 8000bf6:	bf00      	nop
 8000bf8:	20000120 	.word	0x20000120
 8000bfc:	200000b4 	.word	0x200000b4

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fb9c 	bl	800334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c36:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0318 	add.w	r3, r7, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 f843 	bl	8001ccc <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c4c:	f000 f90a 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 faae 	bl	80021cc <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c76:	f000 f8f5 	bl	8000e64 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3740      	adds	r7, #64	; 0x40
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000caa:	220a      	movs	r2, #10
 8000cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc8:	4813      	ldr	r0, [pc, #76]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000cca:	f001 fc19 	bl	8002500 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cd4:	f000 f8c6 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000ce6:	f001 fcad 	bl	8002644 <HAL_TIM_ConfigClockSource>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cf0:	f000 f8b8 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_TIM2_Init+0x94>)
 8000d02:	f001 fe5b 	bl	80029bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f000 f8aa 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000120 	.word	0x20000120

08000d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_USART2_UART_Init+0x50>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f001 fe90 	bl	8002a78 <HAL_UART_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d5e:	f000 f881 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000dc 	.word	0x200000dc
 8000d6c:	40004400 	.word	0x40004400

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <MX_GPIO_Init+0xe8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a33      	ldr	r2, [pc, #204]	; (8000e58 <MX_GPIO_Init+0xe8>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <MX_GPIO_Init+0xe8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <MX_GPIO_Init+0xe8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <MX_GPIO_Init+0xe8>)
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_GPIO_Init+0xe8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000dba:	4828      	ldr	r0, [pc, #160]	; (8000e5c <MX_GPIO_Init+0xec>)
 8000dbc:	f000 ff54 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000dc6:	4826      	ldr	r0, [pc, #152]	; (8000e60 <MX_GPIO_Init+0xf0>)
 8000dc8:	f000 ff4e 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8000dcc:	2313      	movs	r3, #19
 8000dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4820      	ldr	r0, [pc, #128]	; (8000e60 <MX_GPIO_Init+0xf0>)
 8000de0:	f000 fdbe 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2302      	movs	r3, #2
 8000dee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	4619      	mov	r1, r3
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <MX_GPIO_Init+0xf0>)
 8000df8:	f000 fdb2 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4813      	ldr	r0, [pc, #76]	; (8000e5c <MX_GPIO_Init+0xec>)
 8000e10:	f000 fda6 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8000e14:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2302      	movs	r3, #2
 8000e24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <MX_GPIO_Init+0xec>)
 8000e2e:	f000 fd97 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8000e32:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_GPIO_Init+0xf0>)
 8000e4c:	f000 fd88 	bl	8001960 <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40010800 	.word	0x40010800

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>

08000e6e <SCH_Init>:
 */
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8000e74:	2300      	movs	r3, #0
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	e006      	b.n	8000e88 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f80b 	bl	8000e98 <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	3301      	adds	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b27      	cmp	r3, #39	; 0x27
 8000e8c:	d9f5      	bls.n	8000e7a <SCH_Init+0xc>
	}
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <SCH_Delete_Task>:
		}
	}
	SCH_Go_To_Sleep();
}

uint8_t SCH_Delete_Task(uint32_t index){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 8000ea0:	491c      	ldr	r1, [pc, #112]	; (8000f14 <SCH_Delete_Task+0x7c>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <SCH_Delete_Task+0x20>
		return 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e027      	b.n	8000f08 <SCH_Delete_Task+0x70>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8000eb8:	4916      	ldr	r1, [pc, #88]	; (8000f14 <SCH_Delete_Task+0x7c>)
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8000eca:	4912      	ldr	r1, [pc, #72]	; (8000f14 <SCH_Delete_Task+0x7c>)
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <SCH_Delete_Task+0x7c>)
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3308      	adds	r3, #8
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <SCH_Delete_Task+0x7c>)
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	330c      	adds	r3, #12
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
		return 1;
 8000f06:	2301      	movs	r3, #1
	}
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000168 	.word	0x20000168

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_MspInit+0x60>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_MspInit+0x60>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_TIM_Base_MspInit+0x34>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_TIM_Base_MspInit+0x34>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_TIM_Base_MspInit+0x34>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <HAL_UART_MspInit+0x98>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d137      	bne.n	8001044 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001004:	2304      	movs	r3, #4
 8001006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8001018:	f000 fca2 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800101c:	2308      	movs	r3, #8
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8001030:	f000 fc96 	bl	8001960 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2026      	movs	r0, #38	; 0x26
 800103a:	f000 fbaa 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103e:	2026      	movs	r0, #38	; 0x26
 8001040:	f000 fbc3 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004400 	.word	0x40004400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 fa85 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <USART2_IRQHandler+0x10>)
 80010ae:	f001 fd75 	bl	8002b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000dc 	.word	0x200000dc

080010bc <_sbrk>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
 80010ec:	f002 f904 	bl	80032f8 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20005000 	.word	0x20005000
 800111c:	00000400 	.word	0x00000400
 8001120:	200000c8 	.word	0x200000c8
 8001124:	200004a0 	.word	0x200004a0

08001128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <setTimer1+0x2c>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1092      	asrs	r2, r2, #2
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <setTimer1+0x30>)
 800114c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <setTimer1+0x34>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	66666667 	.word	0x66666667
 8001164:	200000d0 	.word	0x200000d0
 8001168:	200000cc 	.word	0x200000cc

0800116c <setTraffic1Red>:
 *  Created on: Nov 29, 2022
 *      Author: phamv
 */
#include "traffic.h"

void setTraffic1Red(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <setTraffic1Red+0x20>)
 8001178:	f000 fd76 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2108      	movs	r1, #8
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <setTraffic1Red+0x24>)
 8001182:	f000 fd71 	bl	8001c68 <HAL_GPIO_WritePin>

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00

08001194 <setTraffic2Red>:

void setTraffic2Red(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2120      	movs	r1, #32
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <setTraffic2Red+0x1c>)
 800119e:	f000 fd63 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <setTraffic2Red+0x1c>)
 80011a8:	f000 fd5e 	bl	8001c68 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <setTraffic1Green>:

void setTraffic1Green(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <setTraffic1Green+0x20>)
 80011c0:	f000 fd52 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2108      	movs	r1, #8
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <setTraffic1Green+0x24>)
 80011ca:	f000 fd4d 	bl	8001c68 <HAL_GPIO_WritePin>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40010800 	.word	0x40010800
 80011d8:	40010c00 	.word	0x40010c00

080011dc <clearTraffic1>:

void clearTraffic1(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <clearTraffic1+0x20>)
 80011e8:	f000 fd3e 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2108      	movs	r1, #8
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <clearTraffic1+0x24>)
 80011f2:	f000 fd39 	bl	8001c68 <HAL_GPIO_WritePin>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00

08001204 <setTraffic2Green>:


void setTraffic2Green(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2120      	movs	r1, #32
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <setTraffic2Green+0x1c>)
 800120e:	f000 fd2b 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2110      	movs	r1, #16
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <setTraffic2Green+0x1c>)
 8001218:	f000 fd26 	bl	8001c68 <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010c00 	.word	0x40010c00

08001224 <setTraffic1Yellow>:

void setTraffic1Yellow(){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <setTraffic1Yellow+0x20>)
 8001230:	f000 fd1a 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <setTraffic1Yellow+0x24>)
 800123a:	f000 fd15 	bl	8001c68 <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00

0800124c <setTraffic2Yellow>:

void setTraffic2Yellow(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2120      	movs	r1, #32
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <setTraffic2Yellow+0x1c>)
 8001256:	f000 fd07 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2110      	movs	r1, #16
 800125e:	4802      	ldr	r0, [pc, #8]	; (8001268 <setTraffic2Yellow+0x1c>)
 8001260:	f000 fd02 	bl	8001c68 <HAL_GPIO_WritePin>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010c00 	.word	0x40010c00

0800126c <clearTraffic2>:

void clearTraffic2(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2120      	movs	r1, #32
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <clearTraffic2+0x1c>)
 8001276:	f000 fcf7 	bl	8001c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2110      	movs	r1, #16
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <clearTraffic2+0x1c>)
 8001280:	f000 fcf2 	bl	8001c68 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010c00 	.word	0x40010c00

0800128c <toggleTraffic1Red>:
void clearPedestrian(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
}

void toggleTraffic1Red(){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8001290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <toggleTraffic1Red+0x14>)
 8001296:	f000 fcff 	bl	8001c98 <HAL_GPIO_TogglePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010800 	.word	0x40010800

080012a4 <toggleTraffic2Red>:

void toggleTraffic2Red(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 80012a8:	2120      	movs	r1, #32
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <toggleTraffic2Red+0x10>)
 80012ac:	f000 fcf4 	bl	8001c98 <HAL_GPIO_TogglePin>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <toggleTraffic1Green>:

void toggleTraffic1Green(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 80012bc:	2108      	movs	r1, #8
 80012be:	4802      	ldr	r0, [pc, #8]	; (80012c8 <toggleTraffic1Green+0x10>)
 80012c0:	f000 fcea 	bl	8001c98 <HAL_GPIO_TogglePin>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010c00 	.word	0x40010c00

080012cc <toggleTraffic2Green>:

void toggleTraffic2Green(){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 80012d0:	2110      	movs	r1, #16
 80012d2:	4802      	ldr	r0, [pc, #8]	; (80012dc <toggleTraffic2Green+0x10>)
 80012d4:	f000 fce0 	bl	8001c98 <HAL_GPIO_TogglePin>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 80012e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <toggleTraffic1Yellow+0x1c>)
 80012ea:	f000 fcd5 	bl	8001c98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 80012ee:	2108      	movs	r1, #8
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <toggleTraffic1Yellow+0x20>)
 80012f2:	f000 fcd1 	bl	8001c98 <HAL_GPIO_TogglePin>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40010800 	.word	0x40010800
 8001300:	40010c00 	.word	0x40010c00

08001304 <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8001308:	2120      	movs	r1, #32
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <toggleTraffic2Yellow+0x18>)
 800130c:	f000 fcc4 	bl	8001c98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8001310:	2110      	movs	r1, #16
 8001312:	4802      	ldr	r0, [pc, #8]	; (800131c <toggleTraffic2Yellow+0x18>)
 8001314:	f000 fcc0 	bl	8001c98 <HAL_GPIO_TogglePin>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40010c00 	.word	0x40010c00

08001320 <acceptTraffic1Red>:

void acceptTraffic1Red(){
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	max_red1 = counter;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <acceptTraffic1Red+0x34>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <acceptTraffic1Red+0x38>)
 800132a:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <acceptTraffic1Red+0x38>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <acceptTraffic1Red+0x3c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	dc02      	bgt.n	800133e <acceptTraffic1Red+0x1e>
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <acceptTraffic1Red+0x3c>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <acceptTraffic1Red+0x38>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <acceptTraffic1Red+0x3c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	4a05      	ldr	r2, [pc, #20]	; (8001360 <acceptTraffic1Red+0x40>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	200000b8 	.word	0x200000b8
 8001358:	20000000 	.word	0x20000000
 800135c:	20000014 	.word	0x20000014
 8001360:	20000010 	.word	0x20000010

08001364 <acceptTraffic2Red>:

void acceptTraffic2Red(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	max_red2 = counter;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <acceptTraffic2Red+0x34>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0b      	ldr	r2, [pc, #44]	; (800139c <acceptTraffic2Red+0x38>)
 800136e:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <acceptTraffic2Red+0x38>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <acceptTraffic2Red+0x3c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	dc02      	bgt.n	8001382 <acceptTraffic2Red+0x1e>
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <acceptTraffic2Red+0x3c>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <acceptTraffic2Red+0x38>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <acceptTraffic2Red+0x3c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <acceptTraffic2Red+0x40>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	200000b8 	.word	0x200000b8
 800139c:	2000000c 	.word	0x2000000c
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <acceptTraffic1Green>:

void acceptTraffic1Green(){
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	max_green1 = counter;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <acceptTraffic1Green+0x24>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <acceptTraffic1Green+0x28>)
 80013b2:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <acceptTraffic1Green+0x2c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <acceptTraffic1Green+0x28>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <acceptTraffic1Green+0x30>)
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200000b8 	.word	0x200000b8
 80013d0:	20000004 	.word	0x20000004
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	20000008 	.word	0x20000008

080013dc <acceptTraffic2Green>:

void acceptTraffic2Green(){
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	max_green2 = counter;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <acceptTraffic2Green+0x24>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <acceptTraffic2Green+0x28>)
 80013e6:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <acceptTraffic2Green+0x2c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <acceptTraffic2Green+0x28>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <acceptTraffic2Green+0x30>)
 80013f4:	6013      	str	r3, [r2, #0]
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200000b8 	.word	0x200000b8
 8001404:	20000010 	.word	0x20000010
 8001408:	20000000 	.word	0x20000000
 800140c:	20000014 	.word	0x20000014

08001410 <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <acceptTraffic1Yellow+0x24>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <acceptTraffic1Yellow+0x28>)
 800141a:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <acceptTraffic1Yellow+0x2c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <acceptTraffic1Yellow+0x28>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <acceptTraffic1Yellow+0x30>)
 8001428:	6013      	str	r3, [r2, #0]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200000b8 	.word	0x200000b8
 8001438:	20000008 	.word	0x20000008
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000004 	.word	0x20000004

08001444 <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <acceptTraffic2Yellow+0x24>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <acceptTraffic2Yellow+0x28>)
 800144e:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <acceptTraffic2Yellow+0x2c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <acceptTraffic2Yellow+0x28>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	4a06      	ldr	r2, [pc, #24]	; (8001474 <acceptTraffic2Yellow+0x30>)
 800145c:	6013      	str	r3, [r2, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200000b8 	.word	0x200000b8
 800146c:	20000014 	.word	0x20000014
 8001470:	20000000 	.word	0x20000000
 8001474:	20000010 	.word	0x20000010

08001478 <displayCounter>:

void displayCounter(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#", counter/10, counter%10);
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <displayCounter+0x48>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <displayCounter+0x4c>)
 8001482:	fb82 1203 	smull	r1, r2, r2, r3
 8001486:	1092      	asrs	r2, r2, #2
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad0      	subs	r0, r2, r3
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <displayCounter+0x48>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <displayCounter+0x4c>)
 8001492:	fb83 1302 	smull	r1, r3, r3, r2
 8001496:	1099      	asrs	r1, r3, #2
 8001498:	17d3      	asrs	r3, r2, #31
 800149a:	1ac9      	subs	r1, r1, r3
 800149c:	460b      	mov	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	1ad1      	subs	r1, r2, r3
 80014a6:	460b      	mov	r3, r1
 80014a8:	4602      	mov	r2, r0
 80014aa:	4907      	ldr	r1, [pc, #28]	; (80014c8 <displayCounter+0x50>)
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <displayCounter+0x54>)
 80014ae:	f001 ff55 	bl	800335c <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 9);
 80014b2:	2209      	movs	r2, #9
 80014b4:	4905      	ldr	r1, [pc, #20]	; (80014cc <displayCounter+0x54>)
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <displayCounter+0x58>)
 80014b8:	f001 fb2b 	bl	8002b12 <HAL_UART_Transmit_IT>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200000b8 	.word	0x200000b8
 80014c4:	66666667 	.word	0x66666667
 80014c8:	08003be8 	.word	0x08003be8
 80014cc:	200000bc 	.word	0x200000bc
 80014d0:	200000dc 	.word	0x200000dc

080014d4 <Reset_Handler>:
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <LoopFillZerobss+0x12>)
 80014d6:	490d      	ldr	r1, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <LoopFillZerobss+0x1a>)
 80014da:	2300      	movs	r3, #0
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:
 80014de:	58d4      	ldr	r4, [r2, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:
 80014e4:	18c4      	adds	r4, r0, r3
 80014e6:	428c      	cmp	r4, r1
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopFillZerobss+0x1e>)
 80014ec:	4c0a      	ldr	r4, [pc, #40]	; (8001518 <LoopFillZerobss+0x22>)
 80014ee:	2300      	movs	r3, #0
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:
 80014f6:	42a2      	cmp	r2, r4
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>
 80014fa:	f7ff fe15 	bl	8001128 <SystemInit>
 80014fe:	f001 ff01 	bl	8003304 <__libc_init_array>
 8001502:	f7ff fb5b 	bl	8000bbc <main>
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	20000088 	.word	0x20000088
 8001510:	08003c58 	.word	0x08003c58
 8001514:	20000088 	.word	0x20000088
 8001518:	2000049c 	.word	0x2000049c

0800151c <ADC1_2_IRQHandler>:
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f923 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fcec 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f93b 	bl	80017e6 <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f903 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000020 	.word	0x20000020
 80015a8:	2000001c 	.word	0x2000001c

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_IncTick+0x20>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	20000020 	.word	0x20000020
 80015cc:	20000488 	.word	0x20000488

080015d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000488 	.word	0x20000488

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <__NVIC_EnableIRQ+0x34>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff90 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff2d 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff42 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff35 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001810:	2b02      	cmp	r3, #2
 8001812:	d008      	beq.n	8001826 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2204      	movs	r2, #4
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e020      	b.n	8001868 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020e 	bic.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001886:	2b02      	cmp	r3, #2
 8001888:	d005      	beq.n	8001896 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2204      	movs	r2, #4
 800188e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e051      	b.n	800193a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 020e 	bic.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_DMA_Abort_IT+0xd0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d029      	beq.n	8001914 <HAL_DMA_Abort_IT+0xa0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_DMA_Abort_IT+0xd4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d022      	beq.n	8001910 <HAL_DMA_Abort_IT+0x9c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <HAL_DMA_Abort_IT+0xd8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d01a      	beq.n	800190a <HAL_DMA_Abort_IT+0x96>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_DMA_Abort_IT+0xdc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d012      	beq.n	8001904 <HAL_DMA_Abort_IT+0x90>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_DMA_Abort_IT+0xe0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00a      	beq.n	80018fe <HAL_DMA_Abort_IT+0x8a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1a      	ldr	r2, [pc, #104]	; (8001958 <HAL_DMA_Abort_IT+0xe4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d102      	bne.n	80018f8 <HAL_DMA_Abort_IT+0x84>
 80018f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018f6:	e00e      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 80018f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018fc:	e00b      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 80018fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001902:	e008      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	e005      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 800190a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190e:	e002      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001910:	2310      	movs	r3, #16
 8001912:	e000      	b.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 8001914:	2301      	movs	r3, #1
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_DMA_Abort_IT+0xe8>)
 8001918:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
    } 
  }
  return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020008 	.word	0x40020008
 8001948:	4002001c 	.word	0x4002001c
 800194c:	40020030 	.word	0x40020030
 8001950:	40020044 	.word	0x40020044
 8001954:	40020058 	.word	0x40020058
 8001958:	4002006c 	.word	0x4002006c
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	; 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	e169      	b.n	8001c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001974:	2201      	movs	r2, #1
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8158 	bne.w	8001c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a9a      	ldr	r2, [pc, #616]	; (8001c00 <HAL_GPIO_Init+0x2a0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d05e      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 800199c:	4a98      	ldr	r2, [pc, #608]	; (8001c00 <HAL_GPIO_Init+0x2a0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d875      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019a2:	4a98      	ldr	r2, [pc, #608]	; (8001c04 <HAL_GPIO_Init+0x2a4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d058      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019a8:	4a96      	ldr	r2, [pc, #600]	; (8001c04 <HAL_GPIO_Init+0x2a4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d86f      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ae:	4a96      	ldr	r2, [pc, #600]	; (8001c08 <HAL_GPIO_Init+0x2a8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d052      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019b4:	4a94      	ldr	r2, [pc, #592]	; (8001c08 <HAL_GPIO_Init+0x2a8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d869      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ba:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <HAL_GPIO_Init+0x2ac>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d04c      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019c0:	4a92      	ldr	r2, [pc, #584]	; (8001c0c <HAL_GPIO_Init+0x2ac>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d863      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019c6:	4a92      	ldr	r2, [pc, #584]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d046      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019cc:	4a90      	ldr	r2, [pc, #576]	; (8001c10 <HAL_GPIO_Init+0x2b0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d85d      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d82a      	bhi.n	8001a2c <HAL_GPIO_Init+0xcc>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d859      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <HAL_GPIO_Init+0x80>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001a5b 	.word	0x08001a5b
 80019e4:	08001a35 	.word	0x08001a35
 80019e8:	08001a47 	.word	0x08001a47
 80019ec:	08001a89 	.word	0x08001a89
 80019f0:	08001a8f 	.word	0x08001a8f
 80019f4:	08001a8f 	.word	0x08001a8f
 80019f8:	08001a8f 	.word	0x08001a8f
 80019fc:	08001a8f 	.word	0x08001a8f
 8001a00:	08001a8f 	.word	0x08001a8f
 8001a04:	08001a8f 	.word	0x08001a8f
 8001a08:	08001a8f 	.word	0x08001a8f
 8001a0c:	08001a8f 	.word	0x08001a8f
 8001a10:	08001a8f 	.word	0x08001a8f
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a8f 	.word	0x08001a8f
 8001a1c:	08001a8f 	.word	0x08001a8f
 8001a20:	08001a8f 	.word	0x08001a8f
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a51 	.word	0x08001a51
 8001a2c:	4a79      	ldr	r2, [pc, #484]	; (8001c14 <HAL_GPIO_Init+0x2b4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a32:	e02c      	b.n	8001a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e029      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	3304      	adds	r3, #4
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e024      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e01f      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	330c      	adds	r3, #12
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e01a      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a62:	2304      	movs	r3, #4
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e013      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a70:	2308      	movs	r3, #8
 8001a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	611a      	str	r2, [r3, #16]
          break;
 8001a7a:	e009      	b.n	8001a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	615a      	str	r2, [r3, #20]
          break;
 8001a86:	e003      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          break;
 8001a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2bff      	cmp	r3, #255	; 0xff
 8001a94:	d801      	bhi.n	8001a9a <HAL_GPIO_Init+0x13a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_Init+0x13e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d802      	bhi.n	8001aac <HAL_GPIO_Init+0x14c>
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x152>
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	210f      	movs	r1, #15
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80b1 	beq.w	8001c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	; (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_GPIO_Init+0x2b8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af8:	4a48      	ldr	r2, [pc, #288]	; (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a40      	ldr	r2, [pc, #256]	; (8001c20 <HAL_GPIO_Init+0x2c0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_GPIO_Init+0x1ec>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3f      	ldr	r2, [pc, #252]	; (8001c24 <HAL_GPIO_Init+0x2c4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <HAL_GPIO_Init+0x1e8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	; (8001c28 <HAL_GPIO_Init+0x2c8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d007      	beq.n	8001b44 <HAL_GPIO_Init+0x1e4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3d      	ldr	r2, [pc, #244]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_GPIO_Init+0x1e0>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x1ee>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b5e:	492f      	ldr	r1, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	492c      	ldr	r1, [pc, #176]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4928      	ldr	r1, [pc, #160]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4922      	ldr	r1, [pc, #136]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	491e      	ldr	r1, [pc, #120]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4918      	ldr	r1, [pc, #96]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4914      	ldr	r1, [pc, #80]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d021      	beq.n	8001c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
 8001bfc:	e021      	b.n	8001c42 <HAL_GPIO_Init+0x2e2>
 8001bfe:	bf00      	nop
 8001c00:	10320000 	.word	0x10320000
 8001c04:	10310000 	.word	0x10310000
 8001c08:	10220000 	.word	0x10220000
 8001c0c:	10210000 	.word	0x10210000
 8001c10:	10120000 	.word	0x10120000
 8001c14:	10110000 	.word	0x10110000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40010800 	.word	0x40010800
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40011400 	.word	0x40011400
 8001c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4909      	ldr	r1, [pc, #36]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f ae8e 	bne.w	8001974 <HAL_GPIO_Init+0x14>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	372c      	adds	r7, #44	; 0x2c
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	611a      	str	r2, [r3, #16]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43d9      	mvns	r1, r3
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	400b      	ands	r3, r1
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	611a      	str	r2, [r3, #16]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e26c      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cec:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d00c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf8:	4b8f      	ldr	r3, [pc, #572]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d112      	bne.n	8001d2a <HAL_RCC_OscConfig+0x5e>
 8001d04:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	4b89      	ldr	r3, [pc, #548]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d06c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x12c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d168      	bne.n	8001df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e246      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x76>
 8001d34:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a7f      	ldr	r2, [pc, #508]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x98>
 8001d4a:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7a      	ldr	r2, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b78      	ldr	r3, [pc, #480]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a77      	ldr	r2, [pc, #476]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0xbc>
 8001d6e:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a71      	ldr	r2, [pc, #452]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b6f      	ldr	r3, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xd4>
 8001d88:	4b6b      	ldr	r3, [pc, #428]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6a      	ldr	r2, [pc, #424]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a67      	ldr	r2, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc12 	bl	80015d0 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fc0e 	bl	80015d0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1fa      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe4>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fbfe 	bl	80015d0 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fbfa 	bl	80015d0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1e6      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x10c>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x18c>
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x176>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1ba      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4939      	ldr	r1, [pc, #228]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fbb3 	bl	80015d0 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fbaf 	bl	80015d0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e19b      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fb92 	bl	80015d0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fb8e 	bl	80015d0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e17a      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03a      	beq.n	8001f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fb72 	bl	80015d0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fb6e 	bl	80015d0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e15a      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 fad8 	bl	80024c4 <RCC_Delay>
 8001f14:	e01c      	b.n	8001f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fb58 	bl	80015d0 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f22:	e00f      	b.n	8001f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fb54 	bl	80015d0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e140      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	42420000 	.word	0x42420000
 8001f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b9e      	ldr	r3, [pc, #632]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e9      	bne.n	8001f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a6 	beq.w	80020aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b97      	ldr	r3, [pc, #604]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a93      	ldr	r2, [pc, #588]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b91      	ldr	r3, [pc, #580]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a8a      	ldr	r2, [pc, #552]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fb15 	bl	80015d0 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7ff fb11 	bl	80015d0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0fd      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x312>
 8001fd0:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a7a      	ldr	r2, [pc, #488]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x334>
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a75      	ldr	r2, [pc, #468]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a72      	ldr	r2, [pc, #456]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	e01c      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x356>
 8002008:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a6c      	ldr	r2, [pc, #432]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a69      	ldr	r2, [pc, #420]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x36e>
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a66      	ldr	r2, [pc, #408]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	4b64      	ldr	r3, [pc, #400]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a63      	ldr	r2, [pc, #396]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff fac5 	bl	80015d0 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff fac1 	bl	80015d0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0ab      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b57      	ldr	r3, [pc, #348]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCC_OscConfig+0x37e>
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7ff faaf 	bl	80015d0 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff faab 	bl	80015d0 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e095      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a47      	ldr	r2, [pc, #284]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8081 	beq.w	80021b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d061      	beq.n	8002184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d146      	bne.n	8002156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCC_OscConfig+0x4fc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff fa7f 	bl	80015d0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff fa7b 	bl	80015d0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e067      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	492d      	ldr	r1, [pc, #180]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a19      	ldr	r1, [r3, #32]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	430b      	orrs	r3, r1
 8002122:	4927      	ldr	r1, [pc, #156]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x4fc>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fa4f 	bl	80015d0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff fa4b 	bl	80015d0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e037      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x46a>
 8002154:	e02f      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_RCC_OscConfig+0x4fc>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fa38 	bl	80015d0 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7ff fa34 	bl	80015d0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e020      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x498>
 8002182:	e018      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e013      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
 80021c8:	42420060 	.word	0x42420060

080021cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d0      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b6a      	ldr	r3, [pc, #424]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b67      	ldr	r3, [pc, #412]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4965      	ldr	r1, [pc, #404]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b8      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002228:	4b59      	ldr	r3, [pc, #356]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002240:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a52      	ldr	r2, [pc, #328]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800224a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b50      	ldr	r3, [pc, #320]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	494d      	ldr	r1, [pc, #308]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d040      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e073      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06b      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4936      	ldr	r1, [pc, #216]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7ff f988 	bl	80015d0 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7ff f984 	bl	80015d0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e053      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d210      	bcs.n	800231c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0207 	bic.w	r2, r3, #7
 8002302:	4922      	ldr	r1, [pc, #136]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e032      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4916      	ldr	r1, [pc, #88]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	490e      	ldr	r1, [pc, #56]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235a:	f000 f821 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800235e:	4602      	mov	r2, r0
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	490a      	ldr	r1, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	5ccb      	ldrb	r3, [r1, r3]
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1cc>)
 8002374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f8e6 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40022000 	.word	0x40022000
 8002390:	40021000 	.word	0x40021000
 8002394:	08003c04 	.word	0x08003c04
 8002398:	20000018 	.word	0x20000018
 800239c:	2000001c 	.word	0x2000001c

080023a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b490      	push	{r4, r7}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023a8:	1d3c      	adds	r4, r7, #4
 80023aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023b0:	f240 2301 	movw	r3, #513	; 0x201
 80023b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x40>
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x46>
 80023de:	e02d      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e2:	623b      	str	r3, [r7, #32]
      break;
 80023e4:	e02d      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	0c9b      	lsrs	r3, r3, #18
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023f2:	4413      	add	r3, r2
 80023f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	0c5b      	lsrs	r3, r3, #17
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002412:	4413      	add	r3, r2
 8002414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241e:	fb02 f203 	mul.w	r2, r2, r3
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	e004      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	623b      	str	r3, [r7, #32]
      break;
 800243a:	e002      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243e:	623b      	str	r3, [r7, #32]
      break;
 8002440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002442:	6a3b      	ldr	r3, [r7, #32]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3728      	adds	r7, #40	; 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bc90      	pop	{r4, r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	08003bf4 	.word	0x08003bf4
 8002454:	40021000 	.word	0x40021000
 8002458:	007a1200 	.word	0x007a1200
 800245c:	003d0900 	.word	0x003d0900

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <HAL_RCC_GetHCLKFreq+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000018 	.word	0x20000018

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002478:	f7ff fff2 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	08003c14 	.word	0x08003c14

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff ffde 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0adb      	lsrs	r3, r3, #11
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08003c14 	.word	0x08003c14

080024c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <RCC_Delay+0x34>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <RCC_Delay+0x38>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0a5b      	lsrs	r3, r3, #9
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e0:	bf00      	nop
  }
  while (Delay --);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	60fa      	str	r2, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f9      	bne.n	80024e0 <RCC_Delay+0x1c>
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000018 	.word	0x20000018
 80024fc:	10624dd3 	.word	0x10624dd3

08002500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e041      	b.n	8002596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fd28 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f000 f944 	bl	80027cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e03a      	b.n	800262e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_TIM_Base_Start_IT+0x98>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00e      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x58>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d009      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x58>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_TIM_Base_Start_IT+0x9c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x58>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_TIM_Base_Start_IT+0xa0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d111      	bne.n	800261c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d010      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261a:	e007      	b.n	800262c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40000400 	.word	0x40000400
 8002640:	40000800 	.word	0x40000800

08002644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIM_ConfigClockSource+0x18>
 8002658:	2302      	movs	r3, #2
 800265a:	e0b3      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x180>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002694:	d03e      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0xd0>
 8002696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269a:	f200 8087 	bhi.w	80027ac <HAL_TIM_ConfigClockSource+0x168>
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	f000 8085 	beq.w	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	d87f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026ac:	2b70      	cmp	r3, #112	; 0x70
 80026ae:	d01a      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0xa2>
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d87b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026b4:	2b60      	cmp	r3, #96	; 0x60
 80026b6:	d050      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x116>
 80026b8:	2b60      	cmp	r3, #96	; 0x60
 80026ba:	d877      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b50      	cmp	r3, #80	; 0x50
 80026be:	d03c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0xf6>
 80026c0:	2b50      	cmp	r3, #80	; 0x50
 80026c2:	d873      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d058      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x136>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d86f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026cc:	2b30      	cmp	r3, #48	; 0x30
 80026ce:	d064      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026d0:	2b30      	cmp	r3, #48	; 0x30
 80026d2:	d86b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d060      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d867      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05c      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d05a      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026e4:	e062      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f000 f942 	bl	800297e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002708:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	609a      	str	r2, [r3, #8]
      break;
 8002712:	e04e      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6899      	ldr	r1, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f000 f92b 	bl	800297e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002736:	609a      	str	r2, [r3, #8]
      break;
 8002738:	e03b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 f8a2 	bl	8002890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2150      	movs	r1, #80	; 0x50
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f8f9 	bl	800294a <TIM_ITRx_SetConfig>
      break;
 8002758:	e02b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f000 f8c0 	bl	80028ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2160      	movs	r1, #96	; 0x60
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f8e9 	bl	800294a <TIM_ITRx_SetConfig>
      break;
 8002778:	e01b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	461a      	mov	r2, r3
 8002788:	f000 f882 	bl	8002890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2140      	movs	r1, #64	; 0x40
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f8d9 	bl	800294a <TIM_ITRx_SetConfig>
      break;
 8002798:	e00b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f000 f8d0 	bl	800294a <TIM_ITRx_SetConfig>
        break;
 80027aa:	e002      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a29      	ldr	r2, [pc, #164]	; (8002884 <TIM_Base_SetConfig+0xb8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00b      	beq.n	80027fc <TIM_Base_SetConfig+0x30>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ea:	d007      	beq.n	80027fc <TIM_Base_SetConfig+0x30>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a26      	ldr	r2, [pc, #152]	; (8002888 <TIM_Base_SetConfig+0xbc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <TIM_Base_SetConfig+0x30>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a25      	ldr	r2, [pc, #148]	; (800288c <TIM_Base_SetConfig+0xc0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d108      	bne.n	800280e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <TIM_Base_SetConfig+0xb8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00b      	beq.n	800282e <TIM_Base_SetConfig+0x62>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <TIM_Base_SetConfig+0xbc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <TIM_Base_SetConfig+0xc0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <TIM_Base_SetConfig+0xb8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400
 800288c:	40000800 	.word	0x40000800

08002890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f023 0201 	bic.w	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f023 030a 	bic.w	r3, r3, #10
 80028cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	621a      	str	r2, [r3, #32]
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f023 0210 	bic.w	r2, r3, #16
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002916:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	031b      	lsls	r3, r3, #12
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002928:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	621a      	str	r2, [r3, #32]
}
 8002940:	bf00      	nop
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	f043 0307 	orr.w	r3, r3, #7
 800296c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800297e:	b480      	push	{r7}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002998:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	021a      	lsls	r2, r3, #8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	609a      	str	r2, [r3, #8]
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e046      	b.n	8002a62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d009      	beq.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10c      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800

08002a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e03f      	b.n	8002b0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fa88 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fb8d 	bl	80031dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d130      	bne.n	8002b8e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_UART_Transmit_IT+0x26>
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e029      	b.n	8002b90 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Transmit_IT+0x38>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e022      	b.n	8002b90 <HAL_UART_Transmit_IT+0x7e>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	88fa      	ldrh	r2, [r7, #6]
 8002b62:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	; 0x21
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_UART_IRQHandler+0x52>
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa4f 	bl	800308a <UART_Receive_IT>
      return;
 8002bec:	e17b      	b.n	8002ee6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80b1 	beq.w	8002d58 <HAL_UART_IRQHandler+0x1bc>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_UART_IRQHandler+0x70>
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80a6 	beq.w	8002d58 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_UART_IRQHandler+0x90>
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_UART_IRQHandler+0xb0>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0202 	orr.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_UART_IRQHandler+0xd0>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00f      	beq.n	8002c96 <HAL_UART_IRQHandler+0xfa>
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_UART_IRQHandler+0xee>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0208 	orr.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 811e 	beq.w	8002edc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_UART_IRQHandler+0x11e>
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f9e8 	bl	800308a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x146>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d031      	beq.n	8002d46 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f92a 	bl	8002f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d023      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d04:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d013      	beq.n	8002d36 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	4a76      	ldr	r2, [pc, #472]	; (8002eec <HAL_UART_IRQHandler+0x350>)
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fdaa 	bl	8001874 <HAL_DMA_Abort_IT>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d30:	4610      	mov	r0, r2
 8002d32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d34:	e00e      	b.n	8002d54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8ec 	bl	8002f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3c:	e00a      	b.n	8002d54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8e8 	bl	8002f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	e006      	b.n	8002d54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8e4 	bl	8002f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d52:	e0c3      	b.n	8002edc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d54:	bf00      	nop
    return;
 8002d56:	e0c1      	b.n	8002edc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	f040 80a1 	bne.w	8002ea4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 809b 	beq.w	8002ea4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8095 	beq.w	8002ea4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04e      	beq.n	8002e3c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002da8:	8a3b      	ldrh	r3, [r7, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8098 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002db4:	8a3a      	ldrh	r2, [r7, #16]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	f080 8092 	bcs.w	8002ee0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8a3a      	ldrh	r2, [r7, #16]
 8002dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d02b      	beq.n	8002e24 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dda:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0210 	bic.w	r2, r2, #16
 8002e18:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fced 	bl	80017fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f876 	bl	8002f26 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e3a:	e051      	b.n	8002ee0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d047      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e54:	8a7b      	ldrh	r3, [r7, #18]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d044      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e68:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0210 	bic.w	r2, r2, #16
 8002e96:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e98:	8a7b      	ldrh	r3, [r7, #18]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f842 	bl	8002f26 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ea2:	e01f      	b.n	8002ee4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x324>
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f87f 	bl	8002fbc <UART_Transmit_IT>
    return;
 8002ebe:	e012      	b.n	8002ee6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x34a>
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f8c0 	bl	800305a <UART_EndTransmit_IT>
    return;
 8002eda:	e004      	b.n	8002ee6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002edc:	bf00      	nop
 8002ede:	e002      	b.n	8002ee6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002ee4:	bf00      	nop
  }
}
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	08002f95 	.word	0x08002f95

08002ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0210 	bic.w	r2, r2, #16
 8002f7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff ffb0 	bl	8002f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b21      	cmp	r3, #33	; 0x21
 8002fce:	d13e      	bne.n	800304e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd8:	d114      	bne.n	8003004 <UART_Transmit_IT+0x48>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d110      	bne.n	8003004 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	1c9a      	adds	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	621a      	str	r2, [r3, #32]
 8003002:	e008      	b.n	8003016 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	1c59      	adds	r1, r3, #1
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6211      	str	r1, [r2, #32]
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29b      	uxth	r3, r3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4619      	mov	r1, r3
 8003024:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003038:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003048:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff38 	bl	8002ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b22      	cmp	r3, #34	; 0x22
 800309c:	f040 8099 	bne.w	80031d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d117      	bne.n	80030da <UART_Receive_IT+0x50>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d113      	bne.n	80030da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
 80030d8:	e026      	b.n	8003128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d007      	beq.n	80030fe <UART_Receive_IT+0x74>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <UART_Receive_IT+0x82>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e008      	b.n	800311e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003118:	b2da      	uxtb	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29b      	uxth	r3, r3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4619      	mov	r1, r3
 8003136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003138:	2b00      	cmp	r3, #0
 800313a:	d148      	bne.n	80031ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0220 	bic.w	r2, r2, #32
 800314a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800315a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	2b01      	cmp	r3, #1
 800317a:	d123      	bne.n	80031c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0210 	bic.w	r2, r2, #16
 8003190:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	d10a      	bne.n	80031b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff feb2 	bl	8002f26 <HAL_UARTEx_RxEventCallback>
 80031c2:	e002      	b.n	80031ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fe9c 	bl	8002f02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e002      	b.n	80031d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003216:	f023 030c 	bic.w	r3, r3, #12
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	430b      	orrs	r3, r1
 8003222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <UART_SetConfig+0x114>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d103      	bne.n	800324c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7ff f92a 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	e002      	b.n	8003252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7ff f912 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <UART_SetConfig+0x118>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	0119      	lsls	r1, r3, #4
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009a      	lsls	r2, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <UART_SetConfig+0x118>)
 800328a:	fba3 0302 	umull	r0, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2064      	movs	r0, #100	; 0x64
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	3332      	adds	r3, #50	; 0x32
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <UART_SetConfig+0x118>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	4419      	add	r1, r3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <UART_SetConfig+0x118>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <UART_SetConfig+0x118>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	440a      	add	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40013800 	.word	0x40013800
 80032f4:	51eb851f 	.word	0x51eb851f

080032f8 <__errno>:
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <__errno+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000024 	.word	0x20000024

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	2600      	movs	r6, #0
 8003308:	4d0c      	ldr	r5, [pc, #48]	; (800333c <__libc_init_array+0x38>)
 800330a:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	f000 fc5c 	bl	8003bd0 <_init>
 8003318:	2600      	movs	r6, #0
 800331a:	4d0a      	ldr	r5, [pc, #40]	; (8003344 <__libc_init_array+0x40>)
 800331c:	4c0a      	ldr	r4, [pc, #40]	; (8003348 <__libc_init_array+0x44>)
 800331e:	1b64      	subs	r4, r4, r5
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	08003c50 	.word	0x08003c50
 8003340:	08003c50 	.word	0x08003c50
 8003344:	08003c50 	.word	0x08003c50
 8003348:	08003c54 	.word	0x08003c54

0800334c <memset>:
 800334c:	4603      	mov	r3, r0
 800334e:	4402      	add	r2, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <siprintf>:
 800335c:	b40e      	push	{r1, r2, r3}
 800335e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003362:	b500      	push	{lr}
 8003364:	b09c      	sub	sp, #112	; 0x70
 8003366:	ab1d      	add	r3, sp, #116	; 0x74
 8003368:	9002      	str	r0, [sp, #8]
 800336a:	9006      	str	r0, [sp, #24]
 800336c:	9107      	str	r1, [sp, #28]
 800336e:	9104      	str	r1, [sp, #16]
 8003370:	4808      	ldr	r0, [pc, #32]	; (8003394 <siprintf+0x38>)
 8003372:	4909      	ldr	r1, [pc, #36]	; (8003398 <siprintf+0x3c>)
 8003374:	f853 2b04 	ldr.w	r2, [r3], #4
 8003378:	9105      	str	r1, [sp, #20]
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	a902      	add	r1, sp, #8
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	f000 f868 	bl	8003454 <_svfiprintf_r>
 8003384:	2200      	movs	r2, #0
 8003386:	9b02      	ldr	r3, [sp, #8]
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	b01c      	add	sp, #112	; 0x70
 800338c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003390:	b003      	add	sp, #12
 8003392:	4770      	bx	lr
 8003394:	20000024 	.word	0x20000024
 8003398:	ffff0208 	.word	0xffff0208

0800339c <__ssputs_r>:
 800339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	4682      	mov	sl, r0
 80033a4:	429e      	cmp	r6, r3
 80033a6:	460c      	mov	r4, r1
 80033a8:	4690      	mov	r8, r2
 80033aa:	461f      	mov	r7, r3
 80033ac:	d838      	bhi.n	8003420 <__ssputs_r+0x84>
 80033ae:	898a      	ldrh	r2, [r1, #12]
 80033b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b4:	d032      	beq.n	800341c <__ssputs_r+0x80>
 80033b6:	6825      	ldr	r5, [r4, #0]
 80033b8:	6909      	ldr	r1, [r1, #16]
 80033ba:	3301      	adds	r3, #1
 80033bc:	eba5 0901 	sub.w	r9, r5, r1
 80033c0:	6965      	ldr	r5, [r4, #20]
 80033c2:	444b      	add	r3, r9
 80033c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033cc:	106d      	asrs	r5, r5, #1
 80033ce:	429d      	cmp	r5, r3
 80033d0:	bf38      	it	cc
 80033d2:	461d      	movcc	r5, r3
 80033d4:	0553      	lsls	r3, r2, #21
 80033d6:	d531      	bpl.n	800343c <__ssputs_r+0xa0>
 80033d8:	4629      	mov	r1, r5
 80033da:	f000 fb53 	bl	8003a84 <_malloc_r>
 80033de:	4606      	mov	r6, r0
 80033e0:	b950      	cbnz	r0, 80033f8 <__ssputs_r+0x5c>
 80033e2:	230c      	movs	r3, #12
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	f8ca 3000 	str.w	r3, [sl]
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	464a      	mov	r2, r9
 80033fa:	6921      	ldr	r1, [r4, #16]
 80033fc:	f000 face 	bl	800399c <memcpy>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	6126      	str	r6, [r4, #16]
 800340e:	444e      	add	r6, r9
 8003410:	6026      	str	r6, [r4, #0]
 8003412:	463e      	mov	r6, r7
 8003414:	6165      	str	r5, [r4, #20]
 8003416:	eba5 0509 	sub.w	r5, r5, r9
 800341a:	60a5      	str	r5, [r4, #8]
 800341c:	42be      	cmp	r6, r7
 800341e:	d900      	bls.n	8003422 <__ssputs_r+0x86>
 8003420:	463e      	mov	r6, r7
 8003422:	4632      	mov	r2, r6
 8003424:	4641      	mov	r1, r8
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f000 fac6 	bl	80039b8 <memmove>
 800342c:	68a3      	ldr	r3, [r4, #8]
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	1b9b      	subs	r3, r3, r6
 8003432:	4432      	add	r2, r6
 8003434:	2000      	movs	r0, #0
 8003436:	60a3      	str	r3, [r4, #8]
 8003438:	6022      	str	r2, [r4, #0]
 800343a:	e7db      	b.n	80033f4 <__ssputs_r+0x58>
 800343c:	462a      	mov	r2, r5
 800343e:	f000 fb7b 	bl	8003b38 <_realloc_r>
 8003442:	4606      	mov	r6, r0
 8003444:	2800      	cmp	r0, #0
 8003446:	d1e1      	bne.n	800340c <__ssputs_r+0x70>
 8003448:	4650      	mov	r0, sl
 800344a:	6921      	ldr	r1, [r4, #16]
 800344c:	f000 face 	bl	80039ec <_free_r>
 8003450:	e7c7      	b.n	80033e2 <__ssputs_r+0x46>
	...

08003454 <_svfiprintf_r>:
 8003454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003458:	4698      	mov	r8, r3
 800345a:	898b      	ldrh	r3, [r1, #12]
 800345c:	4607      	mov	r7, r0
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	460d      	mov	r5, r1
 8003462:	4614      	mov	r4, r2
 8003464:	b09d      	sub	sp, #116	; 0x74
 8003466:	d50e      	bpl.n	8003486 <_svfiprintf_r+0x32>
 8003468:	690b      	ldr	r3, [r1, #16]
 800346a:	b963      	cbnz	r3, 8003486 <_svfiprintf_r+0x32>
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	f000 fb09 	bl	8003a84 <_malloc_r>
 8003472:	6028      	str	r0, [r5, #0]
 8003474:	6128      	str	r0, [r5, #16]
 8003476:	b920      	cbnz	r0, 8003482 <_svfiprintf_r+0x2e>
 8003478:	230c      	movs	r3, #12
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	e0d1      	b.n	8003626 <_svfiprintf_r+0x1d2>
 8003482:	2340      	movs	r3, #64	; 0x40
 8003484:	616b      	str	r3, [r5, #20]
 8003486:	2300      	movs	r3, #0
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	2320      	movs	r3, #32
 800348c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003490:	2330      	movs	r3, #48	; 0x30
 8003492:	f04f 0901 	mov.w	r9, #1
 8003496:	f8cd 800c 	str.w	r8, [sp, #12]
 800349a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003640 <_svfiprintf_r+0x1ec>
 800349e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034a2:	4623      	mov	r3, r4
 80034a4:	469a      	mov	sl, r3
 80034a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034aa:	b10a      	cbz	r2, 80034b0 <_svfiprintf_r+0x5c>
 80034ac:	2a25      	cmp	r2, #37	; 0x25
 80034ae:	d1f9      	bne.n	80034a4 <_svfiprintf_r+0x50>
 80034b0:	ebba 0b04 	subs.w	fp, sl, r4
 80034b4:	d00b      	beq.n	80034ce <_svfiprintf_r+0x7a>
 80034b6:	465b      	mov	r3, fp
 80034b8:	4622      	mov	r2, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	4638      	mov	r0, r7
 80034be:	f7ff ff6d 	bl	800339c <__ssputs_r>
 80034c2:	3001      	adds	r0, #1
 80034c4:	f000 80aa 	beq.w	800361c <_svfiprintf_r+0x1c8>
 80034c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ca:	445a      	add	r2, fp
 80034cc:	9209      	str	r2, [sp, #36]	; 0x24
 80034ce:	f89a 3000 	ldrb.w	r3, [sl]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a2 	beq.w	800361c <_svfiprintf_r+0x1c8>
 80034d8:	2300      	movs	r3, #0
 80034da:	f04f 32ff 	mov.w	r2, #4294967295
 80034de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034e2:	f10a 0a01 	add.w	sl, sl, #1
 80034e6:	9304      	str	r3, [sp, #16]
 80034e8:	9307      	str	r3, [sp, #28]
 80034ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ee:	931a      	str	r3, [sp, #104]	; 0x68
 80034f0:	4654      	mov	r4, sl
 80034f2:	2205      	movs	r2, #5
 80034f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f8:	4851      	ldr	r0, [pc, #324]	; (8003640 <_svfiprintf_r+0x1ec>)
 80034fa:	f000 fa41 	bl	8003980 <memchr>
 80034fe:	9a04      	ldr	r2, [sp, #16]
 8003500:	b9d8      	cbnz	r0, 800353a <_svfiprintf_r+0xe6>
 8003502:	06d0      	lsls	r0, r2, #27
 8003504:	bf44      	itt	mi
 8003506:	2320      	movmi	r3, #32
 8003508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800350c:	0711      	lsls	r1, r2, #28
 800350e:	bf44      	itt	mi
 8003510:	232b      	movmi	r3, #43	; 0x2b
 8003512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003516:	f89a 3000 	ldrb.w	r3, [sl]
 800351a:	2b2a      	cmp	r3, #42	; 0x2a
 800351c:	d015      	beq.n	800354a <_svfiprintf_r+0xf6>
 800351e:	4654      	mov	r4, sl
 8003520:	2000      	movs	r0, #0
 8003522:	f04f 0c0a 	mov.w	ip, #10
 8003526:	9a07      	ldr	r2, [sp, #28]
 8003528:	4621      	mov	r1, r4
 800352a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800352e:	3b30      	subs	r3, #48	; 0x30
 8003530:	2b09      	cmp	r3, #9
 8003532:	d94e      	bls.n	80035d2 <_svfiprintf_r+0x17e>
 8003534:	b1b0      	cbz	r0, 8003564 <_svfiprintf_r+0x110>
 8003536:	9207      	str	r2, [sp, #28]
 8003538:	e014      	b.n	8003564 <_svfiprintf_r+0x110>
 800353a:	eba0 0308 	sub.w	r3, r0, r8
 800353e:	fa09 f303 	lsl.w	r3, r9, r3
 8003542:	4313      	orrs	r3, r2
 8003544:	46a2      	mov	sl, r4
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	e7d2      	b.n	80034f0 <_svfiprintf_r+0x9c>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	1d19      	adds	r1, r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	9103      	str	r1, [sp, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfbb      	ittet	lt
 8003556:	425b      	neglt	r3, r3
 8003558:	f042 0202 	orrlt.w	r2, r2, #2
 800355c:	9307      	strge	r3, [sp, #28]
 800355e:	9307      	strlt	r3, [sp, #28]
 8003560:	bfb8      	it	lt
 8003562:	9204      	strlt	r2, [sp, #16]
 8003564:	7823      	ldrb	r3, [r4, #0]
 8003566:	2b2e      	cmp	r3, #46	; 0x2e
 8003568:	d10c      	bne.n	8003584 <_svfiprintf_r+0x130>
 800356a:	7863      	ldrb	r3, [r4, #1]
 800356c:	2b2a      	cmp	r3, #42	; 0x2a
 800356e:	d135      	bne.n	80035dc <_svfiprintf_r+0x188>
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	3402      	adds	r4, #2
 8003574:	1d1a      	adds	r2, r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	9203      	str	r2, [sp, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	bfb8      	it	lt
 800357e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003582:	9305      	str	r3, [sp, #20]
 8003584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003650 <_svfiprintf_r+0x1fc>
 8003588:	2203      	movs	r2, #3
 800358a:	4650      	mov	r0, sl
 800358c:	7821      	ldrb	r1, [r4, #0]
 800358e:	f000 f9f7 	bl	8003980 <memchr>
 8003592:	b140      	cbz	r0, 80035a6 <_svfiprintf_r+0x152>
 8003594:	2340      	movs	r3, #64	; 0x40
 8003596:	eba0 000a 	sub.w	r0, r0, sl
 800359a:	fa03 f000 	lsl.w	r0, r3, r0
 800359e:	9b04      	ldr	r3, [sp, #16]
 80035a0:	3401      	adds	r4, #1
 80035a2:	4303      	orrs	r3, r0
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035aa:	2206      	movs	r2, #6
 80035ac:	4825      	ldr	r0, [pc, #148]	; (8003644 <_svfiprintf_r+0x1f0>)
 80035ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035b2:	f000 f9e5 	bl	8003980 <memchr>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d038      	beq.n	800362c <_svfiprintf_r+0x1d8>
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <_svfiprintf_r+0x1f4>)
 80035bc:	bb1b      	cbnz	r3, 8003606 <_svfiprintf_r+0x1b2>
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	3307      	adds	r3, #7
 80035c2:	f023 0307 	bic.w	r3, r3, #7
 80035c6:	3308      	adds	r3, #8
 80035c8:	9303      	str	r3, [sp, #12]
 80035ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035cc:	4433      	add	r3, r6
 80035ce:	9309      	str	r3, [sp, #36]	; 0x24
 80035d0:	e767      	b.n	80034a2 <_svfiprintf_r+0x4e>
 80035d2:	460c      	mov	r4, r1
 80035d4:	2001      	movs	r0, #1
 80035d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80035da:	e7a5      	b.n	8003528 <_svfiprintf_r+0xd4>
 80035dc:	2300      	movs	r3, #0
 80035de:	f04f 0c0a 	mov.w	ip, #10
 80035e2:	4619      	mov	r1, r3
 80035e4:	3401      	adds	r4, #1
 80035e6:	9305      	str	r3, [sp, #20]
 80035e8:	4620      	mov	r0, r4
 80035ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ee:	3a30      	subs	r2, #48	; 0x30
 80035f0:	2a09      	cmp	r2, #9
 80035f2:	d903      	bls.n	80035fc <_svfiprintf_r+0x1a8>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0c5      	beq.n	8003584 <_svfiprintf_r+0x130>
 80035f8:	9105      	str	r1, [sp, #20]
 80035fa:	e7c3      	b.n	8003584 <_svfiprintf_r+0x130>
 80035fc:	4604      	mov	r4, r0
 80035fe:	2301      	movs	r3, #1
 8003600:	fb0c 2101 	mla	r1, ip, r1, r2
 8003604:	e7f0      	b.n	80035e8 <_svfiprintf_r+0x194>
 8003606:	ab03      	add	r3, sp, #12
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	462a      	mov	r2, r5
 800360c:	4638      	mov	r0, r7
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <_svfiprintf_r+0x1f8>)
 8003610:	a904      	add	r1, sp, #16
 8003612:	f3af 8000 	nop.w
 8003616:	1c42      	adds	r2, r0, #1
 8003618:	4606      	mov	r6, r0
 800361a:	d1d6      	bne.n	80035ca <_svfiprintf_r+0x176>
 800361c:	89ab      	ldrh	r3, [r5, #12]
 800361e:	065b      	lsls	r3, r3, #25
 8003620:	f53f af2c 	bmi.w	800347c <_svfiprintf_r+0x28>
 8003624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003626:	b01d      	add	sp, #116	; 0x74
 8003628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362c:	ab03      	add	r3, sp, #12
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	462a      	mov	r2, r5
 8003632:	4638      	mov	r0, r7
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <_svfiprintf_r+0x1f8>)
 8003636:	a904      	add	r1, sp, #16
 8003638:	f000 f87c 	bl	8003734 <_printf_i>
 800363c:	e7eb      	b.n	8003616 <_svfiprintf_r+0x1c2>
 800363e:	bf00      	nop
 8003640:	08003c1c 	.word	0x08003c1c
 8003644:	08003c26 	.word	0x08003c26
 8003648:	00000000 	.word	0x00000000
 800364c:	0800339d 	.word	0x0800339d
 8003650:	08003c22 	.word	0x08003c22

08003654 <_printf_common>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	4616      	mov	r6, r2
 800365a:	4699      	mov	r9, r3
 800365c:	688a      	ldr	r2, [r1, #8]
 800365e:	690b      	ldr	r3, [r1, #16]
 8003660:	4607      	mov	r7, r0
 8003662:	4293      	cmp	r3, r2
 8003664:	bfb8      	it	lt
 8003666:	4613      	movlt	r3, r2
 8003668:	6033      	str	r3, [r6, #0]
 800366a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800366e:	460c      	mov	r4, r1
 8003670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003674:	b10a      	cbz	r2, 800367a <_printf_common+0x26>
 8003676:	3301      	adds	r3, #1
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	0699      	lsls	r1, r3, #26
 800367e:	bf42      	ittt	mi
 8003680:	6833      	ldrmi	r3, [r6, #0]
 8003682:	3302      	addmi	r3, #2
 8003684:	6033      	strmi	r3, [r6, #0]
 8003686:	6825      	ldr	r5, [r4, #0]
 8003688:	f015 0506 	ands.w	r5, r5, #6
 800368c:	d106      	bne.n	800369c <_printf_common+0x48>
 800368e:	f104 0a19 	add.w	sl, r4, #25
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	6832      	ldr	r2, [r6, #0]
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	42ab      	cmp	r3, r5
 800369a:	dc28      	bgt.n	80036ee <_printf_common+0x9a>
 800369c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036a0:	1e13      	subs	r3, r2, #0
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	bf18      	it	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	0692      	lsls	r2, r2, #26
 80036aa:	d42d      	bmi.n	8003708 <_printf_common+0xb4>
 80036ac:	4649      	mov	r1, r9
 80036ae:	4638      	mov	r0, r7
 80036b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b4:	47c0      	blx	r8
 80036b6:	3001      	adds	r0, #1
 80036b8:	d020      	beq.n	80036fc <_printf_common+0xa8>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	68e5      	ldr	r5, [r4, #12]
 80036be:	f003 0306 	and.w	r3, r3, #6
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	bf18      	it	ne
 80036c6:	2500      	movne	r5, #0
 80036c8:	6832      	ldr	r2, [r6, #0]
 80036ca:	f04f 0600 	mov.w	r6, #0
 80036ce:	68a3      	ldr	r3, [r4, #8]
 80036d0:	bf08      	it	eq
 80036d2:	1aad      	subeq	r5, r5, r2
 80036d4:	6922      	ldr	r2, [r4, #16]
 80036d6:	bf08      	it	eq
 80036d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036dc:	4293      	cmp	r3, r2
 80036de:	bfc4      	itt	gt
 80036e0:	1a9b      	subgt	r3, r3, r2
 80036e2:	18ed      	addgt	r5, r5, r3
 80036e4:	341a      	adds	r4, #26
 80036e6:	42b5      	cmp	r5, r6
 80036e8:	d11a      	bne.n	8003720 <_printf_common+0xcc>
 80036ea:	2000      	movs	r0, #0
 80036ec:	e008      	b.n	8003700 <_printf_common+0xac>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4652      	mov	r2, sl
 80036f2:	4649      	mov	r1, r9
 80036f4:	4638      	mov	r0, r7
 80036f6:	47c0      	blx	r8
 80036f8:	3001      	adds	r0, #1
 80036fa:	d103      	bne.n	8003704 <_printf_common+0xb0>
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003704:	3501      	adds	r5, #1
 8003706:	e7c4      	b.n	8003692 <_printf_common+0x3e>
 8003708:	2030      	movs	r0, #48	; 0x30
 800370a:	18e1      	adds	r1, r4, r3
 800370c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003716:	4422      	add	r2, r4
 8003718:	3302      	adds	r3, #2
 800371a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800371e:	e7c5      	b.n	80036ac <_printf_common+0x58>
 8003720:	2301      	movs	r3, #1
 8003722:	4622      	mov	r2, r4
 8003724:	4649      	mov	r1, r9
 8003726:	4638      	mov	r0, r7
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d0e6      	beq.n	80036fc <_printf_common+0xa8>
 800372e:	3601      	adds	r6, #1
 8003730:	e7d9      	b.n	80036e6 <_printf_common+0x92>
	...

08003734 <_printf_i>:
 8003734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	460c      	mov	r4, r1
 800373a:	7e27      	ldrb	r7, [r4, #24]
 800373c:	4691      	mov	r9, r2
 800373e:	2f78      	cmp	r7, #120	; 0x78
 8003740:	4680      	mov	r8, r0
 8003742:	469a      	mov	sl, r3
 8003744:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800374a:	d807      	bhi.n	800375c <_printf_i+0x28>
 800374c:	2f62      	cmp	r7, #98	; 0x62
 800374e:	d80a      	bhi.n	8003766 <_printf_i+0x32>
 8003750:	2f00      	cmp	r7, #0
 8003752:	f000 80d9 	beq.w	8003908 <_printf_i+0x1d4>
 8003756:	2f58      	cmp	r7, #88	; 0x58
 8003758:	f000 80a4 	beq.w	80038a4 <_printf_i+0x170>
 800375c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003764:	e03a      	b.n	80037dc <_printf_i+0xa8>
 8003766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800376a:	2b15      	cmp	r3, #21
 800376c:	d8f6      	bhi.n	800375c <_printf_i+0x28>
 800376e:	a001      	add	r0, pc, #4	; (adr r0, 8003774 <_printf_i+0x40>)
 8003770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037e1 	.word	0x080037e1
 800377c:	0800375d 	.word	0x0800375d
 8003780:	0800375d 	.word	0x0800375d
 8003784:	0800375d 	.word	0x0800375d
 8003788:	0800375d 	.word	0x0800375d
 800378c:	080037e1 	.word	0x080037e1
 8003790:	0800375d 	.word	0x0800375d
 8003794:	0800375d 	.word	0x0800375d
 8003798:	0800375d 	.word	0x0800375d
 800379c:	0800375d 	.word	0x0800375d
 80037a0:	080038ef 	.word	0x080038ef
 80037a4:	08003811 	.word	0x08003811
 80037a8:	080038d1 	.word	0x080038d1
 80037ac:	0800375d 	.word	0x0800375d
 80037b0:	0800375d 	.word	0x0800375d
 80037b4:	08003911 	.word	0x08003911
 80037b8:	0800375d 	.word	0x0800375d
 80037bc:	08003811 	.word	0x08003811
 80037c0:	0800375d 	.word	0x0800375d
 80037c4:	0800375d 	.word	0x0800375d
 80037c8:	080038d9 	.word	0x080038d9
 80037cc:	680b      	ldr	r3, [r1, #0]
 80037ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037d2:	1d1a      	adds	r2, r3, #4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	600a      	str	r2, [r1, #0]
 80037d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037dc:	2301      	movs	r3, #1
 80037de:	e0a4      	b.n	800392a <_printf_i+0x1f6>
 80037e0:	6825      	ldr	r5, [r4, #0]
 80037e2:	6808      	ldr	r0, [r1, #0]
 80037e4:	062e      	lsls	r6, r5, #24
 80037e6:	f100 0304 	add.w	r3, r0, #4
 80037ea:	d50a      	bpl.n	8003802 <_printf_i+0xce>
 80037ec:	6805      	ldr	r5, [r0, #0]
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	da03      	bge.n	80037fc <_printf_i+0xc8>
 80037f4:	232d      	movs	r3, #45	; 0x2d
 80037f6:	426d      	negs	r5, r5
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fc:	230a      	movs	r3, #10
 80037fe:	485e      	ldr	r0, [pc, #376]	; (8003978 <_printf_i+0x244>)
 8003800:	e019      	b.n	8003836 <_printf_i+0x102>
 8003802:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003806:	6805      	ldr	r5, [r0, #0]
 8003808:	600b      	str	r3, [r1, #0]
 800380a:	bf18      	it	ne
 800380c:	b22d      	sxthne	r5, r5
 800380e:	e7ef      	b.n	80037f0 <_printf_i+0xbc>
 8003810:	680b      	ldr	r3, [r1, #0]
 8003812:	6825      	ldr	r5, [r4, #0]
 8003814:	1d18      	adds	r0, r3, #4
 8003816:	6008      	str	r0, [r1, #0]
 8003818:	0628      	lsls	r0, r5, #24
 800381a:	d501      	bpl.n	8003820 <_printf_i+0xec>
 800381c:	681d      	ldr	r5, [r3, #0]
 800381e:	e002      	b.n	8003826 <_printf_i+0xf2>
 8003820:	0669      	lsls	r1, r5, #25
 8003822:	d5fb      	bpl.n	800381c <_printf_i+0xe8>
 8003824:	881d      	ldrh	r5, [r3, #0]
 8003826:	2f6f      	cmp	r7, #111	; 0x6f
 8003828:	bf0c      	ite	eq
 800382a:	2308      	moveq	r3, #8
 800382c:	230a      	movne	r3, #10
 800382e:	4852      	ldr	r0, [pc, #328]	; (8003978 <_printf_i+0x244>)
 8003830:	2100      	movs	r1, #0
 8003832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003836:	6866      	ldr	r6, [r4, #4]
 8003838:	2e00      	cmp	r6, #0
 800383a:	bfa8      	it	ge
 800383c:	6821      	ldrge	r1, [r4, #0]
 800383e:	60a6      	str	r6, [r4, #8]
 8003840:	bfa4      	itt	ge
 8003842:	f021 0104 	bicge.w	r1, r1, #4
 8003846:	6021      	strge	r1, [r4, #0]
 8003848:	b90d      	cbnz	r5, 800384e <_printf_i+0x11a>
 800384a:	2e00      	cmp	r6, #0
 800384c:	d04d      	beq.n	80038ea <_printf_i+0x1b6>
 800384e:	4616      	mov	r6, r2
 8003850:	fbb5 f1f3 	udiv	r1, r5, r3
 8003854:	fb03 5711 	mls	r7, r3, r1, r5
 8003858:	5dc7      	ldrb	r7, [r0, r7]
 800385a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800385e:	462f      	mov	r7, r5
 8003860:	42bb      	cmp	r3, r7
 8003862:	460d      	mov	r5, r1
 8003864:	d9f4      	bls.n	8003850 <_printf_i+0x11c>
 8003866:	2b08      	cmp	r3, #8
 8003868:	d10b      	bne.n	8003882 <_printf_i+0x14e>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	07df      	lsls	r7, r3, #31
 800386e:	d508      	bpl.n	8003882 <_printf_i+0x14e>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	6861      	ldr	r1, [r4, #4]
 8003874:	4299      	cmp	r1, r3
 8003876:	bfde      	ittt	le
 8003878:	2330      	movle	r3, #48	; 0x30
 800387a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800387e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003882:	1b92      	subs	r2, r2, r6
 8003884:	6122      	str	r2, [r4, #16]
 8003886:	464b      	mov	r3, r9
 8003888:	4621      	mov	r1, r4
 800388a:	4640      	mov	r0, r8
 800388c:	f8cd a000 	str.w	sl, [sp]
 8003890:	aa03      	add	r2, sp, #12
 8003892:	f7ff fedf 	bl	8003654 <_printf_common>
 8003896:	3001      	adds	r0, #1
 8003898:	d14c      	bne.n	8003934 <_printf_i+0x200>
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	b004      	add	sp, #16
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	4834      	ldr	r0, [pc, #208]	; (8003978 <_printf_i+0x244>)
 80038a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038aa:	680e      	ldr	r6, [r1, #0]
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80038b2:	061f      	lsls	r7, r3, #24
 80038b4:	600e      	str	r6, [r1, #0]
 80038b6:	d514      	bpl.n	80038e2 <_printf_i+0x1ae>
 80038b8:	07d9      	lsls	r1, r3, #31
 80038ba:	bf44      	itt	mi
 80038bc:	f043 0320 	orrmi.w	r3, r3, #32
 80038c0:	6023      	strmi	r3, [r4, #0]
 80038c2:	b91d      	cbnz	r5, 80038cc <_printf_i+0x198>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	f023 0320 	bic.w	r3, r3, #32
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2310      	movs	r3, #16
 80038ce:	e7af      	b.n	8003830 <_printf_i+0xfc>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f043 0320 	orr.w	r3, r3, #32
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	2378      	movs	r3, #120	; 0x78
 80038da:	4828      	ldr	r0, [pc, #160]	; (800397c <_printf_i+0x248>)
 80038dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038e0:	e7e3      	b.n	80038aa <_printf_i+0x176>
 80038e2:	065e      	lsls	r6, r3, #25
 80038e4:	bf48      	it	mi
 80038e6:	b2ad      	uxthmi	r5, r5
 80038e8:	e7e6      	b.n	80038b8 <_printf_i+0x184>
 80038ea:	4616      	mov	r6, r2
 80038ec:	e7bb      	b.n	8003866 <_printf_i+0x132>
 80038ee:	680b      	ldr	r3, [r1, #0]
 80038f0:	6826      	ldr	r6, [r4, #0]
 80038f2:	1d1d      	adds	r5, r3, #4
 80038f4:	6960      	ldr	r0, [r4, #20]
 80038f6:	600d      	str	r5, [r1, #0]
 80038f8:	0635      	lsls	r5, r6, #24
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	d501      	bpl.n	8003902 <_printf_i+0x1ce>
 80038fe:	6018      	str	r0, [r3, #0]
 8003900:	e002      	b.n	8003908 <_printf_i+0x1d4>
 8003902:	0671      	lsls	r1, r6, #25
 8003904:	d5fb      	bpl.n	80038fe <_printf_i+0x1ca>
 8003906:	8018      	strh	r0, [r3, #0]
 8003908:	2300      	movs	r3, #0
 800390a:	4616      	mov	r6, r2
 800390c:	6123      	str	r3, [r4, #16]
 800390e:	e7ba      	b.n	8003886 <_printf_i+0x152>
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	600a      	str	r2, [r1, #0]
 8003916:	681e      	ldr	r6, [r3, #0]
 8003918:	2100      	movs	r1, #0
 800391a:	4630      	mov	r0, r6
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	f000 f82f 	bl	8003980 <memchr>
 8003922:	b108      	cbz	r0, 8003928 <_printf_i+0x1f4>
 8003924:	1b80      	subs	r0, r0, r6
 8003926:	6060      	str	r0, [r4, #4]
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	6123      	str	r3, [r4, #16]
 800392c:	2300      	movs	r3, #0
 800392e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003932:	e7a8      	b.n	8003886 <_printf_i+0x152>
 8003934:	4632      	mov	r2, r6
 8003936:	4649      	mov	r1, r9
 8003938:	4640      	mov	r0, r8
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	47d0      	blx	sl
 800393e:	3001      	adds	r0, #1
 8003940:	d0ab      	beq.n	800389a <_printf_i+0x166>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	079b      	lsls	r3, r3, #30
 8003946:	d413      	bmi.n	8003970 <_printf_i+0x23c>
 8003948:	68e0      	ldr	r0, [r4, #12]
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	4298      	cmp	r0, r3
 800394e:	bfb8      	it	lt
 8003950:	4618      	movlt	r0, r3
 8003952:	e7a4      	b.n	800389e <_printf_i+0x16a>
 8003954:	2301      	movs	r3, #1
 8003956:	4632      	mov	r2, r6
 8003958:	4649      	mov	r1, r9
 800395a:	4640      	mov	r0, r8
 800395c:	47d0      	blx	sl
 800395e:	3001      	adds	r0, #1
 8003960:	d09b      	beq.n	800389a <_printf_i+0x166>
 8003962:	3501      	adds	r5, #1
 8003964:	68e3      	ldr	r3, [r4, #12]
 8003966:	9903      	ldr	r1, [sp, #12]
 8003968:	1a5b      	subs	r3, r3, r1
 800396a:	42ab      	cmp	r3, r5
 800396c:	dcf2      	bgt.n	8003954 <_printf_i+0x220>
 800396e:	e7eb      	b.n	8003948 <_printf_i+0x214>
 8003970:	2500      	movs	r5, #0
 8003972:	f104 0619 	add.w	r6, r4, #25
 8003976:	e7f5      	b.n	8003964 <_printf_i+0x230>
 8003978:	08003c2d 	.word	0x08003c2d
 800397c:	08003c3e 	.word	0x08003c3e

08003980 <memchr>:
 8003980:	4603      	mov	r3, r0
 8003982:	b510      	push	{r4, lr}
 8003984:	b2c9      	uxtb	r1, r1
 8003986:	4402      	add	r2, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	d101      	bne.n	8003992 <memchr+0x12>
 800398e:	2000      	movs	r0, #0
 8003990:	e003      	b.n	800399a <memchr+0x1a>
 8003992:	7804      	ldrb	r4, [r0, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	428c      	cmp	r4, r1
 8003998:	d1f6      	bne.n	8003988 <memchr+0x8>
 800399a:	bd10      	pop	{r4, pc}

0800399c <memcpy>:
 800399c:	440a      	add	r2, r1
 800399e:	4291      	cmp	r1, r2
 80039a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039a4:	d100      	bne.n	80039a8 <memcpy+0xc>
 80039a6:	4770      	bx	lr
 80039a8:	b510      	push	{r4, lr}
 80039aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ae:	4291      	cmp	r1, r2
 80039b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039b4:	d1f9      	bne.n	80039aa <memcpy+0xe>
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <memmove>:
 80039b8:	4288      	cmp	r0, r1
 80039ba:	b510      	push	{r4, lr}
 80039bc:	eb01 0402 	add.w	r4, r1, r2
 80039c0:	d902      	bls.n	80039c8 <memmove+0x10>
 80039c2:	4284      	cmp	r4, r0
 80039c4:	4623      	mov	r3, r4
 80039c6:	d807      	bhi.n	80039d8 <memmove+0x20>
 80039c8:	1e43      	subs	r3, r0, #1
 80039ca:	42a1      	cmp	r1, r4
 80039cc:	d008      	beq.n	80039e0 <memmove+0x28>
 80039ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039d6:	e7f8      	b.n	80039ca <memmove+0x12>
 80039d8:	4601      	mov	r1, r0
 80039da:	4402      	add	r2, r0
 80039dc:	428a      	cmp	r2, r1
 80039de:	d100      	bne.n	80039e2 <memmove+0x2a>
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ea:	e7f7      	b.n	80039dc <memmove+0x24>

080039ec <_free_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	4605      	mov	r5, r0
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d043      	beq.n	8003a7c <_free_r+0x90>
 80039f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f8:	1f0c      	subs	r4, r1, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bfb8      	it	lt
 80039fe:	18e4      	addlt	r4, r4, r3
 8003a00:	f000 f8d0 	bl	8003ba4 <__malloc_lock>
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <_free_r+0x94>)
 8003a06:	6813      	ldr	r3, [r2, #0]
 8003a08:	4610      	mov	r0, r2
 8003a0a:	b933      	cbnz	r3, 8003a1a <_free_r+0x2e>
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	6014      	str	r4, [r2, #0]
 8003a10:	4628      	mov	r0, r5
 8003a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a16:	f000 b8cb 	b.w	8003bb0 <__malloc_unlock>
 8003a1a:	42a3      	cmp	r3, r4
 8003a1c:	d90a      	bls.n	8003a34 <_free_r+0x48>
 8003a1e:	6821      	ldr	r1, [r4, #0]
 8003a20:	1862      	adds	r2, r4, r1
 8003a22:	4293      	cmp	r3, r2
 8003a24:	bf01      	itttt	eq
 8003a26:	681a      	ldreq	r2, [r3, #0]
 8003a28:	685b      	ldreq	r3, [r3, #4]
 8003a2a:	1852      	addeq	r2, r2, r1
 8003a2c:	6022      	streq	r2, [r4, #0]
 8003a2e:	6063      	str	r3, [r4, #4]
 8003a30:	6004      	str	r4, [r0, #0]
 8003a32:	e7ed      	b.n	8003a10 <_free_r+0x24>
 8003a34:	461a      	mov	r2, r3
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	b10b      	cbz	r3, 8003a3e <_free_r+0x52>
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	d9fa      	bls.n	8003a34 <_free_r+0x48>
 8003a3e:	6811      	ldr	r1, [r2, #0]
 8003a40:	1850      	adds	r0, r2, r1
 8003a42:	42a0      	cmp	r0, r4
 8003a44:	d10b      	bne.n	8003a5e <_free_r+0x72>
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	4401      	add	r1, r0
 8003a4a:	1850      	adds	r0, r2, r1
 8003a4c:	4283      	cmp	r3, r0
 8003a4e:	6011      	str	r1, [r2, #0]
 8003a50:	d1de      	bne.n	8003a10 <_free_r+0x24>
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4401      	add	r1, r0
 8003a58:	6011      	str	r1, [r2, #0]
 8003a5a:	6053      	str	r3, [r2, #4]
 8003a5c:	e7d8      	b.n	8003a10 <_free_r+0x24>
 8003a5e:	d902      	bls.n	8003a66 <_free_r+0x7a>
 8003a60:	230c      	movs	r3, #12
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	e7d4      	b.n	8003a10 <_free_r+0x24>
 8003a66:	6820      	ldr	r0, [r4, #0]
 8003a68:	1821      	adds	r1, r4, r0
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	bf01      	itttt	eq
 8003a6e:	6819      	ldreq	r1, [r3, #0]
 8003a70:	685b      	ldreq	r3, [r3, #4]
 8003a72:	1809      	addeq	r1, r1, r0
 8003a74:	6021      	streq	r1, [r4, #0]
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6054      	str	r4, [r2, #4]
 8003a7a:	e7c9      	b.n	8003a10 <_free_r+0x24>
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
 8003a7e:	bf00      	nop
 8003a80:	200000d4 	.word	0x200000d4

08003a84 <_malloc_r>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	1ccd      	adds	r5, r1, #3
 8003a88:	f025 0503 	bic.w	r5, r5, #3
 8003a8c:	3508      	adds	r5, #8
 8003a8e:	2d0c      	cmp	r5, #12
 8003a90:	bf38      	it	cc
 8003a92:	250c      	movcc	r5, #12
 8003a94:	2d00      	cmp	r5, #0
 8003a96:	4606      	mov	r6, r0
 8003a98:	db01      	blt.n	8003a9e <_malloc_r+0x1a>
 8003a9a:	42a9      	cmp	r1, r5
 8003a9c:	d903      	bls.n	8003aa6 <_malloc_r+0x22>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa6:	f000 f87d 	bl	8003ba4 <__malloc_lock>
 8003aaa:	4921      	ldr	r1, [pc, #132]	; (8003b30 <_malloc_r+0xac>)
 8003aac:	680a      	ldr	r2, [r1, #0]
 8003aae:	4614      	mov	r4, r2
 8003ab0:	b99c      	cbnz	r4, 8003ada <_malloc_r+0x56>
 8003ab2:	4f20      	ldr	r7, [pc, #128]	; (8003b34 <_malloc_r+0xb0>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	b923      	cbnz	r3, 8003ac2 <_malloc_r+0x3e>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 f862 	bl	8003b84 <_sbrk_r>
 8003ac0:	6038      	str	r0, [r7, #0]
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 f85d 	bl	8003b84 <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d123      	bne.n	8003b16 <_malloc_r+0x92>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	6033      	str	r3, [r6, #0]
 8003ad4:	f000 f86c 	bl	8003bb0 <__malloc_unlock>
 8003ad8:	e7e3      	b.n	8003aa2 <_malloc_r+0x1e>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	1b5b      	subs	r3, r3, r5
 8003ade:	d417      	bmi.n	8003b10 <_malloc_r+0x8c>
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	d903      	bls.n	8003aec <_malloc_r+0x68>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	441c      	add	r4, r3
 8003ae8:	6025      	str	r5, [r4, #0]
 8003aea:	e004      	b.n	8003af6 <_malloc_r+0x72>
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	bf0c      	ite	eq
 8003af2:	600b      	streq	r3, [r1, #0]
 8003af4:	6053      	strne	r3, [r2, #4]
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f85a 	bl	8003bb0 <__malloc_unlock>
 8003afc:	f104 000b 	add.w	r0, r4, #11
 8003b00:	1d23      	adds	r3, r4, #4
 8003b02:	f020 0007 	bic.w	r0, r0, #7
 8003b06:	1ac2      	subs	r2, r0, r3
 8003b08:	d0cc      	beq.n	8003aa4 <_malloc_r+0x20>
 8003b0a:	1a1b      	subs	r3, r3, r0
 8003b0c:	50a3      	str	r3, [r4, r2]
 8003b0e:	e7c9      	b.n	8003aa4 <_malloc_r+0x20>
 8003b10:	4622      	mov	r2, r4
 8003b12:	6864      	ldr	r4, [r4, #4]
 8003b14:	e7cc      	b.n	8003ab0 <_malloc_r+0x2c>
 8003b16:	1cc4      	adds	r4, r0, #3
 8003b18:	f024 0403 	bic.w	r4, r4, #3
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d0e3      	beq.n	8003ae8 <_malloc_r+0x64>
 8003b20:	1a21      	subs	r1, r4, r0
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 f82e 	bl	8003b84 <_sbrk_r>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d1dd      	bne.n	8003ae8 <_malloc_r+0x64>
 8003b2c:	e7cf      	b.n	8003ace <_malloc_r+0x4a>
 8003b2e:	bf00      	nop
 8003b30:	200000d4 	.word	0x200000d4
 8003b34:	200000d8 	.word	0x200000d8

08003b38 <_realloc_r>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	460e      	mov	r6, r1
 8003b40:	b921      	cbnz	r1, 8003b4c <_realloc_r+0x14>
 8003b42:	4611      	mov	r1, r2
 8003b44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b48:	f7ff bf9c 	b.w	8003a84 <_malloc_r>
 8003b4c:	b922      	cbnz	r2, 8003b58 <_realloc_r+0x20>
 8003b4e:	f7ff ff4d 	bl	80039ec <_free_r>
 8003b52:	4625      	mov	r5, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b58:	f000 f830 	bl	8003bbc <_malloc_usable_size_r>
 8003b5c:	42a0      	cmp	r0, r4
 8003b5e:	d20f      	bcs.n	8003b80 <_realloc_r+0x48>
 8003b60:	4621      	mov	r1, r4
 8003b62:	4638      	mov	r0, r7
 8003b64:	f7ff ff8e 	bl	8003a84 <_malloc_r>
 8003b68:	4605      	mov	r5, r0
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0f2      	beq.n	8003b54 <_realloc_r+0x1c>
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4622      	mov	r2, r4
 8003b72:	f7ff ff13 	bl	800399c <memcpy>
 8003b76:	4631      	mov	r1, r6
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7ff ff37 	bl	80039ec <_free_r>
 8003b7e:	e7e9      	b.n	8003b54 <_realloc_r+0x1c>
 8003b80:	4635      	mov	r5, r6
 8003b82:	e7e7      	b.n	8003b54 <_realloc_r+0x1c>

08003b84 <_sbrk_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	2300      	movs	r3, #0
 8003b88:	4d05      	ldr	r5, [pc, #20]	; (8003ba0 <_sbrk_r+0x1c>)
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fd fa94 	bl	80010bc <_sbrk>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_sbrk_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_sbrk_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	2000048c 	.word	0x2000048c

08003ba4 <__malloc_lock>:
 8003ba4:	4801      	ldr	r0, [pc, #4]	; (8003bac <__malloc_lock+0x8>)
 8003ba6:	f000 b811 	b.w	8003bcc <__retarget_lock_acquire_recursive>
 8003baa:	bf00      	nop
 8003bac:	20000494 	.word	0x20000494

08003bb0 <__malloc_unlock>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__malloc_unlock+0x8>)
 8003bb2:	f000 b80c 	b.w	8003bce <__retarget_lock_release_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	20000494 	.word	0x20000494

08003bbc <_malloc_usable_size_r>:
 8003bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc0:	1f18      	subs	r0, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bfbc      	itt	lt
 8003bc6:	580b      	ldrlt	r3, [r1, r0]
 8003bc8:	18c0      	addlt	r0, r0, r3
 8003bca:	4770      	bx	lr

08003bcc <__retarget_lock_acquire_recursive>:
 8003bcc:	4770      	bx	lr

08003bce <__retarget_lock_release_recursive>:
 8003bce:	4770      	bx	lr

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
